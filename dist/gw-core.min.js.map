{"version":3,"file":"gw-core.min.js","sources":["../js/utils.js","../js/random.js","../js/range.js","../js/flag.js","../js/grid.js","../js/io.js","../js/fov.js","../js/gw.js"],"sourcesContent":["/**\n * GW.utils\n * @module utils\n */\n// DIRS are organized clockwise\n// - first 4 are arrow directions\n//   >> rotate 90 degrees clockwise ==>> newIndex = (oldIndex + 1) % 4\n//   >> opposite direction ==>> oppIndex = (index + 2) % 4\n// - last 4 are diagonals\n//   >> rotate 90 degrees clockwise ==>> newIndex = 4 + (oldIndex + 1) % 4;\n//   >> opposite diagonal ==>> newIndex = 4 + (index + 2) % 4;\nexport const DIRS = [\n    [0, 1],\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n    [1, 1],\n    [1, -1],\n    [-1, -1],\n    [-1, 1],\n];\nexport const NO_DIRECTION = -1;\nexport const UP = 0;\nexport const RIGHT = 1;\nexport const DOWN = 2;\nexport const LEFT = 3;\nexport const RIGHT_UP = 4;\nexport const RIGHT_DOWN = 5;\nexport const LEFT_DOWN = 6;\nexport const LEFT_UP = 7;\n// CLOCK DIRS are organized clockwise, starting at UP\n// >> opposite = (index + 4) % 8\n// >> 90 degrees rotate right = (index + 2) % 8\n// >> 90 degrees rotate left = (8 + index - 2) % 8\nexport const CLOCK_DIRS = [\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [1, -1],\n    [0, -1],\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n];\nexport function NOOP() { }\nexport function TRUE() {\n    return true;\n}\nexport function FALSE() {\n    return false;\n}\nexport function ONE() {\n    return 1;\n}\nexport function ZERO() {\n    return 0;\n}\nexport function IDENTITY(x) {\n    return x;\n}\n/**\n * clamps a value between min and max (inclusive)\n * @param v {Number} the value to clamp\n * @param min {Number} the minimum value\n * @param max {Number} the maximum value\n * @returns {Number} the clamped value\n */\nexport function clamp(v, min, max) {\n    if (v < min)\n        return min;\n    if (v > max)\n        return max;\n    return v;\n}\nexport function x(src) {\n    // @ts-ignore\n    return src.x || src[0] || 0;\n}\nexport function y(src) {\n    // @ts-ignore\n    return src.y || src[1] || 0;\n}\nexport function copyXY(dest, src) {\n    dest.x = x(src);\n    dest.y = y(src);\n}\nexport function addXY(dest, src) {\n    dest.x += x(src);\n    dest.y += y(src);\n}\nexport function equalsXY(dest, src) {\n    return dest.x == x(src) && dest.y == y(src);\n}\nexport function lerpXY(a, b, pct) {\n    if (pct > 1) {\n        pct = pct / 100;\n    }\n    pct = clamp(pct, 0, 1);\n    const dx = x(b) - x(a);\n    const dy = y(b) - y(a);\n    const x2 = x(a) + Math.floor(dx * pct);\n    const y2 = y(a) + Math.floor(dy * pct);\n    return [x2, y2];\n}\nexport function distanceBetween(x1, y1, x2, y2) {\n    const x = Math.abs(x1 - x2);\n    const y = Math.abs(y1 - y2);\n    const min = Math.min(x, y);\n    return x + y - 0.6 * min;\n}\nexport function distanceFromTo(a, b) {\n    return distanceBetween(x(a), y(a), x(b), y(b));\n}\nexport function calcRadius(x, y) {\n    return distanceBetween(0, 0, x, y);\n}\nexport function dirBetween(x, y, toX, toY) {\n    let diffX = toX - x;\n    let diffY = toY - y;\n    if (diffX && diffY) {\n        const absX = Math.abs(diffX);\n        const absY = Math.abs(diffY);\n        if (absX >= 2 * absY) {\n            diffY = 0;\n        }\n        else if (absY >= 2 * absX) {\n            diffX = 0;\n        }\n    }\n    return [Math.sign(diffX), Math.sign(diffY)];\n}\nexport function dirFromTo(a, b) {\n    return dirBetween(x(a), y(a), x(b), y(b));\n}\nexport function dirIndex(dir) {\n    const x0 = x(dir);\n    const y0 = y(dir);\n    return DIRS.findIndex((a) => a[0] == x0 && a[1] == y0);\n}\nexport function isOppositeDir(a, b) {\n    if (a[0] + b[0] != 0)\n        return false;\n    if (a[1] + b[1] != 0)\n        return false;\n    return true;\n}\nexport function isSameDir(a, b) {\n    return a[0] == b[0] && a[1] == b[1];\n}\nexport function dirSpread(dir) {\n    const result = [dir];\n    if (dir[0] == 0) {\n        result.push([1, dir[1]]);\n        result.push([-1, dir[1]]);\n    }\n    else if (dir[1] == 0) {\n        result.push([dir[0], 1]);\n        result.push([dir[0], -1]);\n    }\n    else {\n        result.push([dir[0], 0]);\n        result.push([0, dir[1]]);\n    }\n    return result;\n}\nexport function stepFromTo(a, b, fn) {\n    const x0 = x(a);\n    const y0 = y(a);\n    const diff = [x(b) - x0, y(b) - y0];\n    const steps = Math.abs(diff[0]) + Math.abs(diff[1]);\n    const c = [0, 0];\n    const last = [99999, 99999];\n    for (let step = 0; step <= steps; ++step) {\n        c[0] = x0 + Math.floor((diff[0] * step) / steps);\n        c[1] = y0 + Math.floor((diff[1] * step) / steps);\n        if (c[0] != last[0] || c[1] != last[1]) {\n            fn(c[0], c[1]);\n        }\n        last[0] = c[0];\n        last[1] = c[1];\n    }\n}\n// Draws the smooth gradient that appears on a button when you hover over or depress it.\n// Returns the percentage by which the current tile should be averaged toward a hilite color.\nexport function smoothHiliteGradient(currentXValue, maxXValue) {\n    return Math.floor(100 * Math.sin((Math.PI * currentXValue) / maxXValue));\n}\nfunction assignField(dest, src, key) {\n    const current = dest[key];\n    const updated = src[key];\n    if (current && current.copy && updated) {\n        current.copy(updated);\n    }\n    else if (current && current.clear && !updated) {\n        current.clear();\n    }\n    else if (current && current.nullify && !updated) {\n        current.nullify();\n    }\n    else if (updated && updated.clone) {\n        dest[key] = updated.clone(); // just use same object (shallow copy)\n    }\n    else if (updated && Array.isArray(updated)) {\n        dest[key] = updated.slice();\n    }\n    else if (current && Array.isArray(current)) {\n        current.length = 0;\n    }\n    else {\n        dest[key] = updated;\n    }\n}\n// export function copyObject(dest, src) {\n//   Object.keys(dest).forEach( (key) => {\n//     assignField(dest, src, key);\n//   });\n// }\n// export function assignObject(dest, src) {\n//   Object.keys(src).forEach( (key) => {\n//     assignField(dest, src, key);\n//   });\n// }\nexport function assignOmitting(omit, dest, src) {\n    if (typeof omit === \"string\") {\n        omit = omit.split(/[,|]/g).map((t) => t.trim());\n    }\n    Object.keys(src).forEach((key) => {\n        if (omit.includes(key))\n            return;\n        assignField(dest, src, key);\n    });\n}\nexport function setDefault(obj, field, val) {\n    if (obj[field] === undefined) {\n        obj[field] = val;\n    }\n}\nexport function setDefaults(obj, def, custom = null) {\n    let dest;\n    Object.keys(def).forEach((key) => {\n        const origKey = key;\n        let defValue = def[key];\n        dest = obj;\n        // allow for => 'stats.health': 100\n        const parts = key.split(\".\");\n        while (parts.length > 1) {\n            key = parts.shift();\n            if (dest[key] === undefined) {\n                dest = dest[key] = {};\n            }\n            else if (typeof dest[key] !== \"object\") {\n                ERROR(\"Trying to set default member on non-object config item: \" + origKey);\n            }\n            else {\n                dest = dest[key];\n            }\n        }\n        key = parts.shift();\n        let current = dest[key];\n        // console.log('def - ', key, current, defValue, obj, dest);\n        if (custom && custom(dest, key, current, defValue)) {\n            // do nothing\n        }\n        else if (current === undefined) {\n            if (defValue === null) {\n                dest[key] = null;\n            }\n            else if (Array.isArray(defValue)) {\n                dest[key] = defValue.slice();\n            }\n            else if (typeof defValue === \"object\") {\n                dest[key] = defValue; // Object.assign({}, defValue); -- this breaks assigning a Color object as a default...\n            }\n            else {\n                dest[key] = defValue;\n            }\n        }\n    });\n}\nexport function kindDefaults(obj, def) {\n    function custom(dest, key, current, defValue) {\n        if (key.search(/[fF]lags$/) < 0)\n            return false;\n        if (!current) {\n            current = [];\n        }\n        else if (typeof current == \"string\") {\n            current = current.split(/[,|]/).map((t) => t.trim());\n        }\n        else if (!Array.isArray(current)) {\n            current = [current];\n        }\n        if (typeof defValue === \"string\") {\n            defValue = defValue.split(/[,|]/).map((t) => t.trim());\n        }\n        else if (!Array.isArray(defValue)) {\n            defValue = [defValue];\n        }\n        // console.log('flags', key, defValue, current);\n        dest[key] = defValue.concat(current);\n        return true;\n    }\n    return setDefaults(obj, def, custom);\n}\nexport function pick(obj, ...fields) {\n    const data = {};\n    fields.forEach((f) => {\n        const v = obj[f];\n        if (v !== undefined) {\n            data[f] = v;\n        }\n    });\n    return data;\n}\nexport function clearObject(obj) {\n    Object.keys(obj).forEach((key) => (obj[key] = undefined));\n}\nexport function ERROR(message) {\n    throw new Error(message);\n}\nexport function WARN(...args) {\n    console.warn(...args);\n}\nexport function getOpt(obj, member, _default) {\n    const v = obj[member];\n    if (v === undefined)\n        return _default;\n    return v;\n}\nexport function firstOpt(field, ...args) {\n    for (let arg of args) {\n        if (typeof arg !== \"object\" || Array.isArray(arg)) {\n            return arg;\n        }\n        if (arg[field] !== undefined) {\n            return arg[field];\n        }\n    }\n    return undefined;\n}\nexport function arraysIntersect(a, b) {\n    return a.some((av) => b.includes(av));\n}\nexport function sum(arr) {\n    return arr.reduce((a, b) => a + b);\n}\nexport function chainLength(root) {\n    let count = 0;\n    while (root) {\n        count += 1;\n        root = root.next;\n    }\n    return count;\n}\nexport function chainIncludes(chain, entry) {\n    while (chain && chain !== entry) {\n        chain = chain.next;\n    }\n    return chain === entry;\n}\nexport function eachChain(item, fn) {\n    let index = 0;\n    while (item) {\n        const next = item.next;\n        fn(item, index++);\n        item = next;\n    }\n    return index; // really count\n}\nexport function addToChain(obj, name, entry) {\n    entry.next = obj[name] || null;\n    obj[name] = entry;\n    return true;\n}\nexport function removeFromChain(obj, name, entry) {\n    const root = obj[name];\n    if (root === entry) {\n        obj[name] = entry.next || null;\n        entry.next = null;\n        return true;\n    }\n    else if (!root) {\n        return false;\n    }\n    else {\n        let prev = root;\n        let current = prev.next;\n        while (current && current !== entry) {\n            prev = current;\n            current = prev.next;\n        }\n        if (current === entry) {\n            prev.next = current.next || null;\n            entry.next = null;\n            return true;\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=utils.js.map","const RANDOM_CONFIG = {\n    make: () => {\n        return Math.random.bind(Math);\n    },\n};\nfunction lotteryDrawArray(rand, frequencies) {\n    let i, maxFreq, randIndex;\n    maxFreq = 0;\n    for (i = 0; i < frequencies.length; i++) {\n        maxFreq += frequencies[i];\n    }\n    if (maxFreq <= 0) {\n        console.warn(\"Lottery Draw - no frequencies\", frequencies, frequencies.length);\n        return 0;\n    }\n    randIndex = rand.range(0, maxFreq - 1);\n    for (i = 0; i < frequencies.length; i++) {\n        if (frequencies[i] > randIndex) {\n            return i;\n        }\n        else {\n            randIndex -= frequencies[i];\n        }\n    }\n    console.warn(\"Lottery Draw failed.\", frequencies, frequencies.length);\n    return 0;\n}\nfunction lotteryDrawObject(rand, weights) {\n    const entries = Object.entries(weights);\n    const frequencies = entries.map(([_, weight]) => weight);\n    const index = lotteryDrawArray(rand, frequencies);\n    return entries[index][0];\n}\nexport class Random {\n    constructor() {\n        this._fn = RANDOM_CONFIG.make();\n    }\n    static configure(opts) {\n        if (opts.make) {\n            if (typeof opts.make !== \"function\")\n                throw new Error(\"Random make parameter must be a function.\");\n            if (typeof opts.make(12345) !== \"function\")\n                throw new Error(\"Random make function must accept a numeric seed and return a random function.\");\n            RANDOM_CONFIG.make = opts.make;\n            random.seed();\n            cosmetic.seed();\n        }\n    }\n    seed(val) {\n        this._fn = RANDOM_CONFIG.make(val);\n    }\n    value() {\n        return this._fn();\n    }\n    float() {\n        return this.value();\n    }\n    number(max = 0) {\n        max = max || Number.MAX_SAFE_INTEGER;\n        return Math.floor(this._fn() * max);\n    }\n    int(max = 0) {\n        return this.number(max);\n    }\n    range(lo, hi) {\n        if (hi <= lo)\n            return hi;\n        const diff = hi - lo + 1;\n        return lo + this.number(diff);\n    }\n    dice(count, sides, addend = 0) {\n        let total = 0;\n        let mult = 1;\n        if (count < 0) {\n            count = -count;\n            mult = -1;\n        }\n        addend = addend || 0;\n        for (let i = 0; i < count; ++i) {\n            total += this.range(1, sides);\n        }\n        total *= mult;\n        return total + addend;\n    }\n    weighted(weights) {\n        if (Array.isArray(weights)) {\n            return lotteryDrawArray(this, weights);\n        }\n        return lotteryDrawObject(this, weights);\n    }\n    item(list) {\n        if (!Array.isArray(list)) {\n            list = Object.values(list);\n        }\n        return list[this.range(0, list.length - 1)];\n    }\n    key(obj) {\n        return this.item(Object.keys(obj));\n    }\n    shuffle(list, fromIndex = 0, toIndex = 0) {\n        if (arguments.length == 2) {\n            toIndex = fromIndex;\n            fromIndex = 0;\n        }\n        let i, r, buf;\n        toIndex = toIndex || list.length;\n        fromIndex = fromIndex || 0;\n        for (i = fromIndex; i < toIndex; i++) {\n            r = this.range(fromIndex, toIndex - 1);\n            if (i != r) {\n                buf = list[r];\n                list[r] = list[i];\n                list[i] = buf;\n            }\n        }\n        return list;\n    }\n    sequence(n) {\n        const list = [];\n        for (let i = 0; i < n; i++) {\n            list[i] = i;\n        }\n        return this.shuffle(list);\n    }\n    chance(percent, outOf = 100) {\n        if (percent <= 0)\n            return false;\n        if (percent >= outOf)\n            return true;\n        return this.number(outOf) < percent;\n    }\n    // Get a random int between lo and hi, inclusive, with probability distribution\n    // affected by clumps.\n    clumped(lo, hi, clumps) {\n        if (hi <= lo) {\n            return lo;\n        }\n        if (clumps <= 1) {\n            return this.range(lo, hi);\n        }\n        let i, total = 0, numSides = Math.floor((hi - lo) / clumps);\n        for (i = 0; i < (hi - lo) % clumps; i++) {\n            total += this.range(0, numSides + 1);\n        }\n        for (; i < clumps; i++) {\n            total += this.range(0, numSides);\n        }\n        return total + lo;\n    }\n}\nexport const random = new Random();\nexport const cosmetic = new Random();\n//# sourceMappingURL=random.js.map","import { random } from \"./random\";\nexport class Range {\n    constructor(lower, upper = 0, clumps = 1, rng) {\n        this._rng = rng || random;\n        if (Array.isArray(lower)) {\n            clumps = lower[2];\n            upper = lower[1];\n            lower = lower[0];\n        }\n        else if (lower instanceof Range) {\n            clumps = lower.clumps;\n            upper = lower.hi;\n            lower = lower.lo;\n        }\n        if (upper < lower) {\n            [upper, lower] = [lower, upper];\n        }\n        this.lo = lower || 0;\n        this.hi = upper || this.lo;\n        this.clumps = clumps || 1;\n    }\n    value() {\n        return this._rng.clumped(this.lo, this.hi, this.clumps);\n    }\n    toString() {\n        if (this.lo >= this.hi) {\n            return \"\" + this.lo;\n        }\n        return `${this.lo}-${this.hi}`;\n    }\n}\nexport function make(config, rng) {\n    if (!config)\n        return new Range(0, 0, 0, rng);\n    if (config instanceof Range)\n        return config; // you can supply a custom range object\n    // if (config.value) return config;  // calc or damage\n    if (typeof config == \"function\")\n        throw new Error(\"Custom range functions not supported - extend Range\");\n    if (config === undefined || config === null)\n        return new Range(0, 0, 0, rng);\n    if (typeof config == \"number\")\n        return new Range(config, config, 1, rng);\n    // @ts-ignore\n    if (config === true || config === false)\n        throw new Error(\"Invalid random config: \" + config);\n    if (Array.isArray(config)) {\n        return new Range(config[0], config[1], config[2], rng);\n    }\n    if (typeof config !== \"string\") {\n        throw new Error(\"Calculations must be strings.  Received: \" + JSON.stringify(config));\n    }\n    if (config.length == 0)\n        return new Range(0, 0, 0, rng);\n    const RE = /^(?:([+-]?\\d*)[Dd](\\d+)([+-]?\\d*)|([+-]?\\d+)-(\\d+):?(\\d+)?|([+-]?\\d+)~(\\d+)|([+-]?\\d+\\.?\\d*))/g;\n    let results;\n    while ((results = RE.exec(config)) !== null) {\n        if (results[2]) {\n            let count = Number.parseInt(results[1]) || 1;\n            const sides = Number.parseInt(results[2]);\n            const addend = Number.parseInt(results[3]) || 0;\n            const lower = addend + count;\n            const upper = addend + count * sides;\n            return new Range(lower, upper, count, rng);\n        }\n        else if (results[4] && results[5]) {\n            const min = Number.parseInt(results[4]);\n            const max = Number.parseInt(results[5]);\n            const clumps = Number.parseInt(results[6]);\n            return new Range(min, max, clumps, rng);\n        }\n        else if (results[7] && results[8]) {\n            const base = Number.parseInt(results[7]);\n            const std = Number.parseInt(results[8]);\n            return new Range(base - 2 * std, base + 2 * std, 3, rng);\n        }\n        else if (results[9]) {\n            const v = Number.parseFloat(results[9]);\n            return new Range(v, v, 1, rng);\n        }\n    }\n    throw new Error(\"Not a valid range - \" + config);\n}\n//# sourceMappingURL=range.js.map","///////////////////////////////////\n// FLAG\nexport function fl(N) {\n    return 1 << N;\n}\nexport function toString(flagObj, value) {\n    const inverse = Object.entries(flagObj).reduce((out, entry) => {\n        const [key, value] = entry;\n        if (value)\n            out[value] = key;\n        return out;\n    }, []);\n    const out = [];\n    for (let index = 0; index < 32; ++index) {\n        const fl = 1 << index;\n        if (value & fl) {\n            out.push(inverse[fl]);\n        }\n    }\n    return out.join(\" | \");\n}\nexport function from(obj, ...args) {\n    let result = 0;\n    for (let index = 0; index < args.length; ++index) {\n        let value = args[index];\n        if (value === undefined)\n            continue;\n        if (typeof value == \"number\") {\n            result |= value;\n            continue; // next\n        }\n        else if (typeof value === \"string\") {\n            value = value\n                .split(/[,|]/)\n                .map((t) => t.trim())\n                .map((u) => {\n                const n = Number.parseInt(u);\n                if (n >= 0)\n                    return n;\n                return u;\n            });\n        }\n        if (Array.isArray(value)) {\n            value.forEach((v) => {\n                if (typeof v == \"string\") {\n                    v = v.trim();\n                    if (v.startsWith(\"!\")) {\n                        // @ts-ignore\n                        const f = obj[v.substring(1)];\n                        result &= ~f;\n                    }\n                    else {\n                        // @ts-ignore\n                        const f = obj[v];\n                        if (f) {\n                            result |= f;\n                        }\n                    }\n                }\n                else if (v === 0) {\n                    // to allow clearing flags when extending objects\n                    result = 0;\n                }\n                else {\n                    result |= v;\n                }\n            });\n        }\n    }\n    return result;\n}\nexport const flags = {};\nexport function install(flagName, flag) {\n    flags[flagName] = flag;\n    return flag;\n}\n//# sourceMappingURL=flag.js.map","import { random } from \"./random\";\nimport * as Utils from \"./utils\";\nconst DIRS = Utils.DIRS;\nconst CDIRS = Utils.CLOCK_DIRS;\nexport function makeArray(l, fn) {\n    if (fn === undefined)\n        return new Array(l).fill(0);\n    fn = fn || (() => 0);\n    const arr = new Array(l);\n    for (let i = 0; i < l; ++i) {\n        arr[i] = fn(i);\n    }\n    return arr;\n}\nfunction _formatGridValue(v) {\n    if (v === false) {\n        return \" \";\n    }\n    else if (v === true) {\n        return \"T\";\n    }\n    else if (v < 10) {\n        return \"\" + v;\n    }\n    else if (v < 36) {\n        return String.fromCharCode(\"a\".charCodeAt(0) + v - 10);\n    }\n    else if (v < 62) {\n        return String.fromCharCode(\"A\".charCodeAt(0) + v - 10 - 26);\n    }\n    else if (typeof v === \"string\") {\n        return v[0];\n    }\n    else {\n        return \"#\";\n    }\n}\nexport class Grid extends Array {\n    constructor(w, h, v) {\n        super(w);\n        for (let x = 0; x < w; ++x) {\n            if (typeof v === \"function\") {\n                this[x] = new Array(h)\n                    .fill(0)\n                    .map((_, i) => v(x, i));\n            }\n            else {\n                this[x] = new Array(h).fill(v);\n            }\n        }\n        this._width = w;\n        this._height = h;\n    }\n    get width() {\n        return this._width;\n    }\n    get height() {\n        return this._height;\n    }\n    // @ts-ignore\n    forEach(fn) {\n        let i, j;\n        for (i = 0; i < this.width; i++) {\n            for (j = 0; j < this.height; j++) {\n                fn(this[i][j], i, j, this);\n            }\n        }\n    }\n    eachNeighbor(x, y, fn, only4dirs = false) {\n        const maxIndex = only4dirs ? 4 : 8;\n        for (let d = 0; d < maxIndex; ++d) {\n            const dir = DIRS[d];\n            const i = x + dir[0];\n            const j = y + dir[1];\n            if (this.hasXY(i, j)) {\n                fn(this[i][j], i, j, this);\n            }\n        }\n    }\n    forRect(x, y, w, h, fn) {\n        w = Math.min(this.width - x, w);\n        h = Math.min(this.height - y, h);\n        for (let i = x; i < x + w; ++i) {\n            for (let j = y; j < y + h; ++j) {\n                fn(this[i][j], i, j, this);\n            }\n        }\n    }\n    // @ts-ignore\n    map(fn) {\n        return super.map((col, x) => {\n            return col.map((v, y) => fn(v, x, y, this));\n        });\n    }\n    forCircle(x, y, radius, fn) {\n        let i, j;\n        for (i = Math.max(0, x - radius - 1); i < Math.min(this.width, x + radius + 1); i++) {\n            for (j = Math.max(0, y - radius - 1); j < Math.min(this.height, y + radius + 1); j++) {\n                if (this.hasXY(i, j) &&\n                    (i - x) * (i - x) + (j - y) * (j - y) < radius * radius + radius) {\n                    // + radius softens the circle\n                    fn(this[i][j], i, j, this);\n                }\n            }\n        }\n    }\n    hasXY(x, y) {\n        return x >= 0 && y >= 0 && x < this.width && y < this.height;\n    }\n    isBoundaryXY(x, y) {\n        return (this.hasXY(x, y) &&\n            (x == 0 || x == this.width - 1 || y == 0 || y == this.height - 1));\n    }\n    calcBounds() {\n        const bounds = { left: this.width, top: this.height, right: 0, bottom: 0 };\n        this.forEach((v, i, j) => {\n            if (!v)\n                return;\n            if (bounds.left > i)\n                bounds.left = i;\n            if (bounds.right < i)\n                bounds.right = i;\n            if (bounds.top > j)\n                bounds.top = j;\n            if (bounds.bottom < j)\n                bounds.bottom = j;\n        });\n        return bounds;\n    }\n    update(fn) {\n        let i, j;\n        for (i = 0; i < this.width; i++) {\n            for (j = 0; j < this.height; j++) {\n                this[i][j] = fn(this[i][j], i, j, this);\n            }\n        }\n    }\n    updateRect(x, y, width, height, fn) {\n        let i, j;\n        for (i = x; i < x + width; i++) {\n            for (j = y; j < y + height; j++) {\n                if (this.hasXY(i, j)) {\n                    this[i][j] = fn(this[i][j], i, j, this);\n                }\n            }\n        }\n    }\n    updateCircle(x, y, radius, fn) {\n        let i, j;\n        for (i = Math.max(0, x - radius - 1); i < Math.min(this.width, x + radius + 1); i++) {\n            for (j = Math.max(0, y - radius - 1); j < Math.min(this.height, y + radius + 1); j++) {\n                if (this.hasXY(i, j) &&\n                    (i - x) * (i - x) + (j - y) * (j - y) < radius * radius + radius) {\n                    // + radius softens the circle\n                    this[i][j] = fn(this[i][j], i, j, this);\n                }\n            }\n        }\n    }\n    // @ts-ignore\n    fill(v) {\n        const fn = typeof v === \"function\" ? v : () => v;\n        this.update(fn);\n    }\n    fillRect(x, y, w, h, v) {\n        const fn = typeof v === \"function\" ? v : () => v;\n        this.updateRect(x, y, w, h, fn);\n    }\n    fillCircle(x, y, radius, v) {\n        const fn = typeof v === \"function\" ? v : () => v;\n        this.updateCircle(x, y, radius, fn);\n    }\n    replace(findValue, replaceValue) {\n        this.update((v) => (v == findValue ? replaceValue : v));\n    }\n    copy(from) {\n        // TODO - check width, height?\n        this.update((_, i, j) => from[i][j]);\n    }\n    count(match) {\n        const fn = typeof match === \"function\"\n            ? match\n            : (v) => v == match;\n        let count = 0;\n        this.forEach((v, i, j) => {\n            if (fn(v, i, j, this))\n                ++count;\n        });\n        return count;\n    }\n    dump(fmtFn) {\n        this.dumpRect(0, 0, this.width, this.height, fmtFn);\n    }\n    dumpRect(left, top, width, height, fmtFn) {\n        let i, j;\n        fmtFn = fmtFn || _formatGridValue;\n        left = Utils.clamp(left, 0, this.width - 2);\n        top = Utils.clamp(top, 0, this.height - 2);\n        const right = Utils.clamp(left + width, 1, this.width - 1);\n        const bottom = Utils.clamp(top + height, 1, this.height - 1);\n        let output = [];\n        for (j = top; j <= bottom; j++) {\n            let line = (\"\" + j + \"]\").padStart(3, \" \");\n            for (i = left; i <= right; i++) {\n                if (i % 10 == 0) {\n                    line += \" \";\n                }\n                const v = this[i][j];\n                line += fmtFn(v, i, j)[0];\n            }\n            output.push(line);\n        }\n        console.log(output.join(\"\\n\"));\n    }\n    dumpAround(x, y, radius) {\n        this.dumpRect(x - radius, y - radius, 2 * radius, 2 * radius);\n    }\n    closestMatchingLoc(x, y, fn) {\n        let bestLoc = [-1, -1];\n        let bestDistance = this.width + this.height;\n        this.forEach((v, i, j) => {\n            if (fn(v, i, j, this)) {\n                const dist = Utils.distanceBetween(x, y, i, j);\n                if (dist < bestDistance) {\n                    bestLoc[0] = i;\n                    bestLoc[1] = j;\n                    bestDistance = dist;\n                }\n                else if (dist == bestDistance && random.chance(50)) {\n                    bestLoc[0] = i;\n                    bestLoc[1] = j;\n                }\n            }\n        });\n        return bestLoc;\n    }\n    firstMatchingLoc(v) {\n        const fn = typeof v === \"function\" ? v : (val) => val == v;\n        for (let i = 0; i < this.width; ++i) {\n            for (let j = 0; j < this.height; ++j) {\n                if (fn(this[i][j], i, j, this)) {\n                    return [i, j];\n                }\n            }\n        }\n        return [-1, -1];\n    }\n    randomMatchingLoc(v, deterministic = false) {\n        let locationCount = 0;\n        let i, j, index;\n        const fn = typeof v === \"function\" ? v : (val) => val == v;\n        locationCount = 0;\n        this.forEach((v, i, j) => {\n            if (fn(v, i, j, this)) {\n                locationCount++;\n            }\n        });\n        if (locationCount == 0) {\n            return [-1, -1];\n        }\n        else if (deterministic) {\n            index = Math.floor(locationCount / 2);\n        }\n        else {\n            index = random.range(0, locationCount - 1);\n        }\n        for (i = 0; i < this.width && index >= 0; i++) {\n            for (j = 0; j < this.height && index >= 0; j++) {\n                if (fn(this[i][j], i, j, this)) {\n                    if (index == 0) {\n                        return [i, j];\n                    }\n                    index--;\n                }\n            }\n        }\n        return [-1, -1];\n    }\n    matchingLocNear(x, y, v, deterministic = false) {\n        let loc = [-1, -1];\n        let i, j, k, candidateLocs, randIndex;\n        const fn = typeof v === \"function\" ? v : (val) => val == v;\n        candidateLocs = 0;\n        // count up the number of candidate locations\n        for (k = 0; k < Math.max(this.width, this.height) && !candidateLocs; k++) {\n            for (i = x - k; i <= x + k; i++) {\n                for (j = y - k; j <= y + k; j++) {\n                    if (this.hasXY(i, j) &&\n                        (i == x - k || i == x + k || j == y - k || j == y + k) &&\n                        fn(this[i][j], i, j, this)) {\n                        candidateLocs++;\n                    }\n                }\n            }\n        }\n        if (candidateLocs == 0) {\n            return [-1, -1];\n        }\n        // and pick one\n        if (deterministic) {\n            randIndex = 1 + Math.floor(candidateLocs / 2);\n        }\n        else {\n            randIndex = 1 + random.number(candidateLocs);\n        }\n        for (k = 0; k < Math.max(this.width, this.height); k++) {\n            for (i = x - k; i <= x + k; i++) {\n                for (j = y - k; j <= y + k; j++) {\n                    if (this.hasXY(i, j) &&\n                        (i == x - k || i == x + k || j == y - k || j == y + k) &&\n                        fn(this[i][j], i, j, this)) {\n                        if (--randIndex == 0) {\n                            loc[0] = i;\n                            loc[1] = j;\n                            return loc;\n                        }\n                    }\n                }\n            }\n        }\n        // brogueAssert(false);\n        return [-1, -1]; // should never reach this point\n    }\n    // Rotates around the cell, counting up the number of distinct strings of neighbors with the same test result in a single revolution.\n    //\t\tZero means there are no impassable tiles adjacent.\n    //\t\tOne means it is adjacent to a wall.\n    //\t\tTwo means it is in a hallway or something similar.\n    //\t\tThree means it is the center of a T-intersection or something similar.\n    //\t\tFour means it is in the intersection of two hallways.\n    //\t\tFive or more means there is a bug.\n    arcCount(x, y, testFn) {\n        let arcCount, dir, oldX, oldY, newX, newY;\n        // brogueAssert(grid.hasXY(x, y));\n        testFn = testFn || Utils.IDENTITY;\n        arcCount = 0;\n        for (dir = 0; dir < CDIRS.length; dir++) {\n            oldX = x + CDIRS[(dir + 7) % 8][0];\n            oldY = y + CDIRS[(dir + 7) % 8][1];\n            newX = x + CDIRS[dir][0];\n            newY = y + CDIRS[dir][1];\n            // Counts every transition from passable to impassable or vice-versa on the way around the cell:\n            if ((this.hasXY(newX, newY) &&\n                testFn(this[newX][newY], newX, newY, this)) !=\n                (this.hasXY(oldX, oldY) && testFn(this[oldX][oldY], oldX, oldY, this))) {\n                arcCount++;\n            }\n        }\n        return Math.floor(arcCount / 2); // Since we added one when we entered a wall and another when we left.\n    }\n}\nconst GRID_CACHE = [];\n// @ts-ignore\nlet GRID_ACTIVE_COUNT = 0;\n// @ts-ignore\nlet GRID_ALLOC_COUNT = 0;\n// @ts-ignore\nlet GRID_CREATE_COUNT = 0;\n// @ts-ignore\nlet GRID_FREE_COUNT = 0;\nexport class NumGrid extends Grid {\n    constructor(w, h, v = 0) {\n        super(w, h, v);\n    }\n    static alloc(w, h, v = 0) {\n        if (!w || !h)\n            throw new Error(\"Grid alloc requires width and height parameters.\");\n        ++GRID_ACTIVE_COUNT;\n        ++GRID_ALLOC_COUNT;\n        let grid = GRID_CACHE.pop();\n        if (!grid) {\n            ++GRID_CREATE_COUNT;\n            return new NumGrid(w, h, v);\n        }\n        grid.resize(w, h, v);\n        return grid;\n    }\n    static free(grid) {\n        if (grid) {\n            if (GRID_CACHE.indexOf(grid) >= 0)\n                return;\n            GRID_CACHE.push(grid);\n            ++GRID_FREE_COUNT;\n            --GRID_ACTIVE_COUNT;\n        }\n    }\n    resize(width, height, v = 0) {\n        const fn = typeof v === \"function\" ? v : () => v;\n        while (this.length < width)\n            this.push([]);\n        this.length = width;\n        let x = 0;\n        let y = 0;\n        for (x = 0; x < width; ++x) {\n            const col = this[x];\n            for (y = 0; y < height; ++y) {\n                col[y] = fn(x, y);\n            }\n            col.length = height;\n        }\n        this._width = width;\n        this._height = height;\n        if (this.x !== undefined) {\n            this.x = undefined;\n            this.y = undefined;\n        }\n    }\n    findReplaceRange(findValueMin, findValueMax, fillValue) {\n        this.update((v) => {\n            if (v >= findValueMin && v <= findValueMax) {\n                return fillValue;\n            }\n            return v;\n        });\n    }\n    // Flood-fills the grid from (x, y) along cells that are within the eligible range.\n    // Returns the total count of filled cells.\n    floodFillRange(x, y, eligibleValueMin = 0, eligibleValueMax = 0, fillValue = 0) {\n        let dir;\n        let newX, newY, fillCount = 1;\n        if (fillValue >= eligibleValueMin && fillValue <= eligibleValueMax) {\n            throw new Error(\"Invalid grid flood fill\");\n        }\n        this[x][y] = fillValue;\n        for (dir = 0; dir < 4; dir++) {\n            newX = x + DIRS[dir][0];\n            newY = y + DIRS[dir][1];\n            if (this.hasXY(newX, newY) &&\n                this[newX][newY] >= eligibleValueMin &&\n                this[newX][newY] <= eligibleValueMax) {\n                fillCount += this.floodFillRange(newX, newY, eligibleValueMin, eligibleValueMax, fillValue);\n            }\n        }\n        return fillCount;\n    }\n    invert() {\n        this.update((v) => (v ? 0 : 1));\n    }\n    closestLocWithValue(x, y, value = 1) {\n        return this.closestMatchingLoc(x, y, (v) => v == value);\n    }\n    // Takes a grid as a mask of valid locations, chooses one randomly and returns it as (x, y).\n    // If there are no valid locations, returns (-1, -1).\n    randomLocWithValue(validValue = 1) {\n        return this.randomMatchingLoc((v) => v == validValue);\n    }\n    getQualifyingLocNear(x, y, deterministic = false) {\n        return this.matchingLocNear(x, y, (v) => !!v, deterministic);\n    }\n    leastPositiveValue() {\n        let least = Number.MAX_SAFE_INTEGER;\n        this.forEach((v) => {\n            if (v > 0 && v < least) {\n                least = v;\n            }\n        });\n        return least;\n    }\n    randomLeastPositiveLoc(deterministic = false) {\n        const targetValue = this.leastPositiveValue();\n        return this.randomMatchingLoc((v) => v == targetValue, deterministic);\n    }\n    // Marks a cell as being a member of blobNumber, then recursively iterates through the rest of the blob\n    floodFill(x, y, matchValue, fillValue) {\n        let dir;\n        let newX, newY, numberOfCells = 1;\n        const matchFn = typeof matchValue == \"function\"\n            ? matchValue\n            : (v) => v == matchValue;\n        const fillFn = typeof fillValue == \"function\" ? fillValue : () => fillValue;\n        this[x][y] = fillFn(this[x][y], x, y, this);\n        // Iterate through the four cardinal neighbors.\n        for (dir = 0; dir < 4; dir++) {\n            newX = x + DIRS[dir][0];\n            newY = y + DIRS[dir][1];\n            if (!this.hasXY(newX, newY)) {\n                continue;\n            }\n            if (matchFn(this[newX][newY], newX, newY, this)) {\n                // If the neighbor is an unmarked region cell,\n                numberOfCells += this.floodFill(newX, newY, matchFn, fillFn); // then recurse.\n            }\n        }\n        return numberOfCells;\n    }\n    _cellularAutomataRound(birthParameters /* char[9] */, survivalParameters /* char[9] */) {\n        let i, j, nbCount, newX, newY;\n        let dir;\n        let buffer2;\n        buffer2 = NumGrid.alloc(this.width, this.height);\n        buffer2.copy(this); // Make a backup of this in buffer2, so that each generation is isolated.\n        let didSomething = false;\n        for (i = 0; i < this.width; i++) {\n            for (j = 0; j < this.height; j++) {\n                nbCount = 0;\n                for (dir = 0; dir < DIRS.length; dir++) {\n                    newX = i + DIRS[dir][0];\n                    newY = j + DIRS[dir][1];\n                    if (this.hasXY(newX, newY) && buffer2[newX][newY]) {\n                        nbCount++;\n                    }\n                }\n                if (!buffer2[i][j] && birthParameters[nbCount] == \"t\") {\n                    this[i][j] = 1; // birth\n                    didSomething = true;\n                }\n                else if (buffer2[i][j] && survivalParameters[nbCount] == \"t\") {\n                    // survival\n                }\n                else {\n                    this[i][j] = 0; // death\n                    didSomething = true;\n                }\n            }\n        }\n        NumGrid.free(buffer2);\n        return didSomething;\n    }\n    // Loads up **grid with the results of a cellular automata simulation.\n    fillBlob(roundCount, minBlobWidth, minBlobHeight, maxBlobWidth, maxBlobHeight, percentSeeded, birthParameters, survivalParameters) {\n        let i, j, k;\n        let blobNumber, blobSize, topBlobNumber, topBlobSize;\n        let topBlobMinX, topBlobMinY, topBlobMaxX, topBlobMaxY, blobWidth, blobHeight;\n        let foundACellThisLine;\n        if (minBlobWidth >= maxBlobWidth) {\n            minBlobWidth = Math.round(0.75 * maxBlobWidth);\n            maxBlobWidth = Math.round(1.25 * maxBlobWidth);\n        }\n        if (minBlobHeight >= maxBlobHeight) {\n            minBlobHeight = Math.round(0.75 * maxBlobHeight);\n            maxBlobHeight = Math.round(1.25 * maxBlobHeight);\n        }\n        const left = Math.floor((this.width - maxBlobWidth) / 2);\n        const top = Math.floor((this.height - maxBlobHeight) / 2);\n        // Generate blobs until they satisfy the minBlobWidth and minBlobHeight restraints\n        do {\n            // Clear buffer.\n            this.fill(0);\n            // Fill relevant portion with noise based on the percentSeeded argument.\n            for (i = 0; i < maxBlobWidth; i++) {\n                for (j = 0; j < maxBlobHeight; j++) {\n                    this[i + left][j + top] = random.chance(percentSeeded) ? 1 : 0;\n                }\n            }\n            // Some iterations of cellular automata\n            for (k = 0; k < roundCount; k++) {\n                if (!this._cellularAutomataRound(birthParameters, survivalParameters)) {\n                    k = roundCount; // cellularAutomataRound did not make any changes\n                }\n            }\n            // Now to measure the result. These are best-of variables; start them out at worst-case values.\n            topBlobSize = 0;\n            topBlobNumber = 0;\n            topBlobMinX = this.width;\n            topBlobMaxX = 0;\n            topBlobMinY = this.height;\n            topBlobMaxY = 0;\n            // Fill each blob with its own number, starting with 2 (since 1 means floor), and keeping track of the biggest:\n            blobNumber = 2;\n            for (i = 0; i < this.width; i++) {\n                for (j = 0; j < this.height; j++) {\n                    if (this[i][j] == 1) {\n                        // an unmarked blob\n                        // Mark all the cells and returns the total size:\n                        blobSize = this.floodFill(i, j, 1, blobNumber);\n                        if (blobSize > topBlobSize) {\n                            // if this blob is a new record\n                            topBlobSize = blobSize;\n                            topBlobNumber = blobNumber;\n                        }\n                        blobNumber++;\n                    }\n                }\n            }\n            // Figure out the top blob's height and width:\n            // First find the max & min x:\n            for (i = 0; i < this.width; i++) {\n                foundACellThisLine = false;\n                for (j = 0; j < this.height; j++) {\n                    if (this[i][j] == topBlobNumber) {\n                        foundACellThisLine = true;\n                        break;\n                    }\n                }\n                if (foundACellThisLine) {\n                    if (i < topBlobMinX) {\n                        topBlobMinX = i;\n                    }\n                    if (i > topBlobMaxX) {\n                        topBlobMaxX = i;\n                    }\n                }\n            }\n            // Then the max & min y:\n            for (j = 0; j < this.height; j++) {\n                foundACellThisLine = false;\n                for (i = 0; i < this.width; i++) {\n                    if (this[i][j] == topBlobNumber) {\n                        foundACellThisLine = true;\n                        break;\n                    }\n                }\n                if (foundACellThisLine) {\n                    if (j < topBlobMinY) {\n                        topBlobMinY = j;\n                    }\n                    if (j > topBlobMaxY) {\n                        topBlobMaxY = j;\n                    }\n                }\n            }\n            blobWidth = topBlobMaxX - topBlobMinX + 1;\n            blobHeight = topBlobMaxY - topBlobMinY + 1;\n        } while (blobWidth < minBlobWidth ||\n            blobHeight < minBlobHeight ||\n            topBlobNumber == 0);\n        // Replace the winning blob with 1's, and everything else with 0's:\n        for (i = 0; i < this.width; i++) {\n            for (j = 0; j < this.height; j++) {\n                if (this[i][j] == topBlobNumber) {\n                    this[i][j] = 1;\n                }\n                else {\n                    this[i][j] = 0;\n                }\n            }\n        }\n        // Populate the returned variables.\n        return {\n            x: topBlobMinX,\n            y: topBlobMinY,\n            width: blobWidth,\n            height: blobHeight,\n        };\n    }\n}\n// Grid.fillBlob = fillBlob;\nexport const alloc = NumGrid.alloc.bind(NumGrid);\nexport const free = NumGrid.free.bind(NumGrid);\nexport function make(w, h, v) {\n    if (v === undefined)\n        return new NumGrid(w, h, 0);\n    if (typeof v === \"number\")\n        return new NumGrid(w, h, v);\n    return new Grid(w, h, v);\n}\nexport function offsetZip(destGrid, srcGrid, srcToDestX, srcToDestY, value) {\n    const fn = typeof value === \"function\"\n        ? value\n        : (_, s, dx, dy) => (destGrid[dx][dy] = value || s);\n    srcGrid.forEach((c, i, j) => {\n        const destX = i + srcToDestX;\n        const destY = j + srcToDestY;\n        if (!destGrid.hasXY(destX, destY))\n            return;\n        if (!c)\n            return;\n        fn(destGrid[destX][destY], c, destX, destY, i, j, destGrid, srcGrid);\n    });\n}\n// Grid.offsetZip = offsetZip;\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(grid, x, y, isOpen) {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n    const fnOpen = typeof isOpen === \"function\"\n        ? isOpen\n        : (v) => v == isOpen;\n    solutionDir = Utils.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (grid.hasXY(oppX, oppY) &&\n            grid.hasXY(newX, newY) &&\n            fnOpen(grid[oppX][oppY], oppX, oppY, grid)) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != Utils.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return Utils.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\n// Grid.directionOfDoorSite = directionOfDoorSite;\nexport function intersection(onto, a, b) {\n    b = b || onto;\n    onto.update((_, i, j) => a[i][j] && b[i][j]);\n}\n// Grid.intersection = intersection;\nexport function unite(onto, a, b) {\n    b = b || onto;\n    onto.update((_, i, j) => b[i][j] || a[i][j]);\n}\n//# sourceMappingURL=grid.js.map","import * as Utils from \"./utils\";\nexport var commands = {};\nexport function addCommand(id, fn) {\n    commands[id] = fn;\n}\nlet KEYMAP = {};\nconst EVENTS = [];\nconst DEAD_EVENTS = [];\nconst LAST_CLICK = { x: -1, y: -1 };\nexport const KEYPRESS = \"keypress\";\nexport const MOUSEMOVE = \"mousemove\";\nexport const CLICK = \"click\";\nexport const TICK = \"tick\";\nexport const MOUSEUP = \"mouseup\";\nconst CONTROL_CODES = [\n    \"ShiftLeft\",\n    \"ShiftRight\",\n    \"ControlLeft\",\n    \"ControlRight\",\n    \"AltLeft\",\n    \"AltRight\",\n    \"MetaLeft\",\n    \"MetaRight\",\n];\nvar CURRENT_HANDLER = null;\nvar PAUSED = null;\nexport function setKeymap(keymap) {\n    KEYMAP = keymap;\n}\nexport function hasEvents() {\n    return EVENTS.length;\n}\nexport function clearEvents() {\n    while (EVENTS.length) {\n        const ev = EVENTS.shift();\n        DEAD_EVENTS.push(ev);\n    }\n}\nexport function pushEvent(ev) {\n    if (PAUSED) {\n        console.log(\"PAUSED EVENT\", ev.type);\n    }\n    if (EVENTS.length) {\n        const last = EVENTS[EVENTS.length - 1];\n        if (last.type === ev.type) {\n            if (last.type === MOUSEMOVE) {\n                last.x = ev.x;\n                last.y = ev.y;\n                recycleEvent(ev);\n                return;\n            }\n        }\n    }\n    // Keep clicks down to one per cell if holding down mouse button\n    if (ev.type === CLICK) {\n        if (LAST_CLICK.x == ev.x && LAST_CLICK.y == ev.y) {\n            recycleEvent(ev);\n            return;\n        }\n        LAST_CLICK.x = ev.x;\n        LAST_CLICK.y = ev.y;\n    }\n    else if (ev.type == MOUSEUP) {\n        LAST_CLICK.x = -1;\n        LAST_CLICK.y = -1;\n        recycleEvent(ev);\n        return;\n    }\n    if (CURRENT_HANDLER) {\n        CURRENT_HANDLER(ev);\n    }\n    else if (ev.type === TICK) {\n        const first = EVENTS[0];\n        if (first && first.type === TICK) {\n            first.dt += ev.dt;\n            recycleEvent(ev);\n            return;\n        }\n        EVENTS.unshift(ev); // ticks go first\n    }\n    else {\n        EVENTS.push(ev);\n    }\n}\nexport async function dispatchEvent(ev, km) {\n    let result;\n    let command;\n    km = km || KEYMAP;\n    if (typeof km === \"function\") {\n        command = km;\n    }\n    else if (ev.dir) {\n        command = km.dir;\n    }\n    else if (ev.type === KEYPRESS) {\n        // @ts-ignore\n        command = km[ev.key] || km[ev.code] || km.keypress;\n    }\n    else if (km[ev.type]) {\n        command = km[ev.type];\n    }\n    if (command) {\n        if (typeof command === \"function\") {\n            result = await command.call(km, ev);\n        }\n        else if (commands[command]) {\n            result = await commands[command](ev);\n        }\n        else {\n            Utils.WARN(\"No command found: \" + command);\n        }\n    }\n    if (\"next\" in km && km.next === false) {\n        result = false;\n    }\n    recycleEvent(ev);\n    return result;\n}\nfunction recycleEvent(ev) {\n    DEAD_EVENTS.push(ev);\n}\n// TICK\nexport function makeTickEvent(dt) {\n    const ev = DEAD_EVENTS.pop() || {};\n    ev.shiftKey = false;\n    ev.ctrlKey = false;\n    ev.altKey = false;\n    ev.metaKey = false;\n    ev.type = TICK;\n    ev.key = null;\n    ev.code = null;\n    ev.x = -1;\n    ev.y = -1;\n    ev.dir = null;\n    ev.dt = dt;\n    return ev;\n}\n// KEYBOARD\nexport function makeKeyEvent(e) {\n    let key = e.key;\n    let code = e.code.toLowerCase();\n    if (e.shiftKey) {\n        key = key.toUpperCase();\n        code = code.toUpperCase();\n    }\n    if (e.ctrlKey) {\n        key = \"^\" + key;\n        code = \"^\" + code;\n    }\n    if (e.metaKey) {\n        key = \"#\" + key;\n        code = \"#\" + code;\n    }\n    if (e.altKey) {\n        code = \"/\" + code;\n    }\n    const ev = DEAD_EVENTS.pop() || {};\n    ev.shiftKey = e.shiftKey;\n    ev.ctrlKey = e.ctrlKey;\n    ev.altKey = e.altKey;\n    ev.metaKey = e.metaKey;\n    ev.type = KEYPRESS;\n    ev.key = key;\n    ev.code = code;\n    ev.x = -1;\n    ev.y = -1;\n    ev.clientX = -1;\n    ev.clientY = -1;\n    ev.dir = keyCodeDirection(e.code);\n    ev.dt = 0;\n    return ev;\n}\nexport function keyCodeDirection(key) {\n    const lowerKey = key.toLowerCase();\n    if (lowerKey === \"arrowup\") {\n        return [0, -1];\n    }\n    else if (lowerKey === \"arrowdown\") {\n        return [0, 1];\n    }\n    else if (lowerKey === \"arrowleft\") {\n        return [-1, 0];\n    }\n    else if (lowerKey === \"arrowright\") {\n        return [1, 0];\n    }\n    return null;\n}\nexport function ignoreKeyEvent(e) {\n    return CONTROL_CODES.includes(e.code);\n}\n// MOUSE\nexport var mouse = { x: -1, y: -1 };\nexport function makeMouseEvent(e, x, y) {\n    const ev = DEAD_EVENTS.pop() || {};\n    ev.shiftKey = e.shiftKey;\n    ev.ctrlKey = e.ctrlKey;\n    ev.altKey = e.altKey;\n    ev.metaKey = e.metaKey;\n    ev.type = e.type;\n    if (e.buttons && e.type !== \"mouseup\") {\n        ev.type = CLICK;\n    }\n    ev.key = null;\n    ev.code = null;\n    ev.x = x;\n    ev.y = y;\n    ev.clientX = e.clientX;\n    ev.clientY = e.clientY;\n    ev.dir = null;\n    ev.dt = 0;\n    return ev;\n}\n// IO\nexport function pauseEvents() {\n    if (PAUSED)\n        return;\n    PAUSED = CURRENT_HANDLER;\n    CURRENT_HANDLER = null;\n    // io.debug('events paused');\n}\nexport function resumeEvents() {\n    if (!PAUSED)\n        return;\n    if (CURRENT_HANDLER) {\n        console.warn(\"overwrite CURRENT HANDLER!\");\n    }\n    CURRENT_HANDLER = PAUSED;\n    PAUSED = null;\n    // io.debug('resuming events');\n    if (EVENTS.length && CURRENT_HANDLER) {\n        const e = EVENTS.shift();\n        // io.debug('- processing paused event', e.type);\n        CURRENT_HANDLER(e);\n        // io.recycleEvent(e);\t// DO NOT DO THIS B/C THE HANDLER MAY PUT IT BACK ON THE QUEUE (see tickMs)\n    }\n    // io.debug('events resumed');\n}\nexport function nextEvent(ms, match) {\n    match = match || Utils.TRUE;\n    let elapsed = 0;\n    while (EVENTS.length) {\n        const e = EVENTS.shift();\n        if (e.type === MOUSEMOVE) {\n            mouse.x = e.x;\n            mouse.y = e.y;\n        }\n        if (match(e)) {\n            return Promise.resolve(e);\n        }\n        recycleEvent(e);\n    }\n    let done;\n    if (ms === undefined) {\n        ms = -1; // wait forever\n    }\n    if (ms == 0)\n        return Promise.resolve(null);\n    if (CURRENT_HANDLER) {\n        console.warn(\"OVERWRITE HANDLER - nextEvent\");\n    }\n    else if (EVENTS.length) {\n        console.warn(\"SET HANDLER WITH QUEUED EVENTS - nextEvent\");\n    }\n    CURRENT_HANDLER = (e) => {\n        if (e.type === MOUSEMOVE) {\n            mouse.x = e.x;\n            mouse.y = e.y;\n        }\n        if (e.type === TICK && ms > 0) {\n            elapsed += e.dt;\n            if (elapsed < ms) {\n                return;\n            }\n        }\n        else if (!match(e))\n            return;\n        CURRENT_HANDLER = null;\n        e.dt = elapsed;\n        done(e);\n    };\n    return new Promise((resolve) => (done = resolve));\n}\nexport async function tickMs(ms = 1) {\n    let done;\n    setTimeout(() => done(), ms);\n    return new Promise((resolve) => (done = resolve));\n}\nexport async function nextKeyPress(ms, match) {\n    if (ms === undefined)\n        ms = -1;\n    match = match || Utils.TRUE;\n    function matchingKey(e) {\n        if (e.type !== KEYPRESS)\n            return false;\n        return match(e);\n    }\n    return nextEvent(ms, matchingKey);\n}\nexport async function nextKeyOrClick(ms, matchFn) {\n    if (ms === undefined)\n        ms = -1;\n    matchFn = matchFn || Utils.TRUE;\n    function match(e) {\n        if (e.type !== KEYPRESS && e.type !== CLICK)\n            return false;\n        return matchFn(e);\n    }\n    return nextEvent(ms, match);\n}\nexport async function pause(ms) {\n    const e = await nextKeyOrClick(ms);\n    return e && e.type !== TICK;\n}\nexport function waitForAck() {\n    return pause(5 * 60 * 1000); // 5 min\n}\nexport async function loop(keymap) {\n    let running = true;\n    while (running) {\n        const ev = await nextEvent();\n        if (ev && (await dispatchEvent(ev, keymap))) {\n            running = false;\n        }\n    }\n}\n//# sourceMappingURL=io.js.map","// CREDIT - This is adapted from: http://roguebasin.roguelikedevelopment.org/index.php?title=Improved_Shadowcasting_in_Java\nimport * as Utils from \"./utils\";\nexport class FOV {\n    constructor(strategy) {\n        this._startX = -1;\n        this._startY = -1;\n        this._maxRadius = 100;\n        this._isBlocked = strategy.isBlocked;\n        this._calcRadius = strategy.calcRadius || Utils.calcRadius;\n        this._setVisible = strategy.setVisible;\n        this._hasXY = strategy.hasXY || Utils.TRUE;\n    }\n    calculate(x, y, maxRadius) {\n        this._setVisible(x, y, 1);\n        this._startX = x;\n        this._startY = y;\n        this._maxRadius = maxRadius + 1;\n        // uses the diagonals\n        for (let i = 4; i < 8; ++i) {\n            const d = Utils.DIRS[i];\n            this.castLight(1, 1.0, 0.0, 0, d[0], d[1], 0);\n            this.castLight(1, 1.0, 0.0, d[0], 0, 0, d[1]);\n        }\n    }\n    // NOTE: slope starts a 1 and ends at 0.\n    castLight(row, startSlope, endSlope, xx, xy, yx, yy) {\n        if (row >= this._maxRadius) {\n            // fov.debug('CAST: row=%d, start=%d, end=%d, row >= maxRadius => cancel', row, startSlope.toFixed(2), endSlope.toFixed(2));\n            return;\n        }\n        if (startSlope < endSlope) {\n            // fov.debug('CAST: row=%d, start=%d, end=%d, start < end => cancel', row, startSlope.toFixed(2), endSlope.toFixed(2));\n            return;\n        }\n        // fov.debug('CAST: row=%d, start=%d, end=%d, x=%d,%d, y=%d,%d', row, startSlope.toFixed(2), endSlope.toFixed(2), xx, xy, yx, yy);\n        let nextStart = startSlope;\n        let blocked = false;\n        let deltaY = -row;\n        let currentX, currentY, outerSlope, innerSlope, maxSlope, minSlope = 0;\n        for (let deltaX = -row; deltaX <= 0; deltaX++) {\n            currentX = Math.floor(this._startX + deltaX * xx + deltaY * xy);\n            currentY = Math.floor(this._startY + deltaX * yx + deltaY * yy);\n            outerSlope = (deltaX - 0.5) / (deltaY + 0.5);\n            innerSlope = (deltaX + 0.5) / (deltaY - 0.5);\n            maxSlope = deltaX / (deltaY + 0.5);\n            minSlope = (deltaX + 0.5) / deltaY;\n            if (!this._hasXY(currentX, currentY)) {\n                blocked = true;\n                // nextStart = innerSlope;\n                continue;\n            }\n            // fov.debug('- test %d,%d ... start=%d, min=%d, max=%d, end=%d, dx=%d, dy=%d', currentX, currentY, startSlope.toFixed(2), maxSlope.toFixed(2), minSlope.toFixed(2), endSlope.toFixed(2), deltaX, deltaY);\n            if (startSlope < minSlope) {\n                blocked = this._isBlocked(currentX, currentY);\n                continue;\n            }\n            else if (endSlope > maxSlope) {\n                break;\n            }\n            //check if it's within the lightable area and light if needed\n            const radius = this._calcRadius(deltaX, deltaY);\n            if (radius < this._maxRadius) {\n                const bright = 1 - radius / this._maxRadius;\n                this._setVisible(currentX, currentY, bright);\n                // fov.debug('       - visible');\n            }\n            if (blocked) {\n                //previous cell was a blocking one\n                if (this._isBlocked(currentX, currentY)) {\n                    //hit a wall\n                    // fov.debug('       - blocked ... nextStart: %d', innerSlope.toFixed(2));\n                    nextStart = innerSlope;\n                    continue;\n                }\n                else {\n                    blocked = false;\n                }\n            }\n            else {\n                if (this._isBlocked(currentX, currentY) && row < this._maxRadius) {\n                    //hit a wall within sight line\n                    // fov.debug('       - blocked ... start:%d, end:%d, nextStart: %d', nextStart.toFixed(2), outerSlope.toFixed(2), innerSlope.toFixed(2));\n                    blocked = true;\n                    this.castLight(row + 1, nextStart, outerSlope, xx, xy, yx, yy);\n                    nextStart = innerSlope;\n                }\n            }\n        }\n        if (!blocked) {\n            this.castLight(row + 1, nextStart, endSlope, xx, xy, yx, yy);\n        }\n    }\n}\n//# sourceMappingURL=fov.js.map","import * as utils_1 from \"./utils\";\nexport { utils_1 as utils };\nimport * as range_1 from \"./range\";\nexport { range_1 as range };\nimport * as flag_1 from \"./flag\";\nexport { flag_1 as flag };\nimport * as grid_1 from \"./grid\";\nexport { grid_1 as grid };\nimport * as io_1 from \"./io\";\nexport { io_1 as io };\nimport * as fov_1 from \"./fov\";\nexport { fov_1 as fov };\nexport { flags } from \"./flag\";\nexport { cosmetic, random, Random } from \"./random\";\nexport var data = {};\n//# sourceMappingURL=gw.js.map"],"names":["DIRS","CLOCK_DIRS","TRUE","IDENTITY","x","clamp","v","min","max","src","y","distanceBetween","x1","y1","x2","y2","Math","abs","calcRadius","dirBetween","toX","toY","diffX","diffY","absX","absY","sign","setDefaults","obj","def","custom","dest","Object","keys","forEach","key","origKey","defValue","parts","split","length","shift","undefined","ERROR","current","Array","isArray","slice","message","Error","WARN","args","console","warn","a","b","pct","dx","dy","floor","dir","x0","y0","findIndex","result","push","fn","diff","steps","c","last","step","currentXValue","maxXValue","sin","PI","omit","map","t","trim","includes","updated","copy","clear","nullify","clone","assignField","field","val","search","concat","fields","data","f","member","_default","arg","some","av","arr","reduce","root","count","next","chain","entry","item","index","name","prev","RANDOM_CONFIG","make","random","bind","lotteryDrawArray","rand","frequencies","i","maxFreq","randIndex","range","Random","[object Object]","this","_fn","opts","seed","cosmetic","value","Number","MAX_SAFE_INTEGER","number","lo","hi","sides","addend","total","mult","weights","entries","_","weight","lotteryDrawObject","list","values","fromIndex","toIndex","r","buf","arguments","n","shuffle","percent","outOf","clumps","numSides","Range","lower","upper","rng","_rng","clumped","config","JSON","stringify","RE","results","exec","parseInt","base","std","parseFloat","flags","N","flagObj","inverse","out","fl","join","u","startsWith","substring","flagName","flag","Utils.DIRS","CDIRS","Utils.CLOCK_DIRS","_formatGridValue","String","fromCharCode","charCodeAt","Grid","w","h","super","fill","_width","_height","width","height","j","only4dirs","maxIndex","d","hasXY","col","radius","bounds","left","top","right","bottom","update","updateRect","updateCircle","findValue","replaceValue","from","match","fmtFn","dumpRect","Utils.clamp","output","line","padStart","log","bestLoc","bestDistance","dist","Utils.distanceBetween","chance","deterministic","locationCount","k","candidateLocs","loc","testFn","arcCount","oldX","oldY","newX","newY","Utils.IDENTITY","GRID_CACHE","NumGrid","grid","pop","resize","indexOf","findValueMin","findValueMax","fillValue","eligibleValueMin","eligibleValueMax","fillCount","floodFillRange","closestMatchingLoc","validValue","randomMatchingLoc","matchingLocNear","least","targetValue","leastPositiveValue","matchValue","numberOfCells","matchFn","fillFn","floodFill","birthParameters","survivalParameters","nbCount","buffer2","alloc","didSomething","free","roundCount","minBlobWidth","minBlobHeight","maxBlobWidth","maxBlobHeight","percentSeeded","blobNumber","blobSize","topBlobNumber","topBlobSize","topBlobMinX","topBlobMinY","topBlobMaxX","topBlobMaxY","blobWidth","blobHeight","foundACellThisLine","round","_cellularAutomataRound","l","destGrid","srcGrid","srcToDestX","srcToDestY","s","destX","destY","isOpen","solutionDir","oppX","oppY","fnOpen","onto","commands","KEYMAP","EVENTS","DEAD_EVENTS","LAST_CLICK","KEYPRESS","MOUSEMOVE","CLICK","TICK","MOUSEUP","CONTROL_CODES","CURRENT_HANDLER","PAUSED","async","dispatchEvent","ev","km","command","type","code","keypress","call","Utils.WARN","recycleEvent","keyCodeDirection","lowerKey","toLowerCase","mouse","nextEvent","ms","Utils.TRUE","done","elapsed","e","Promise","resolve","dt","nextKeyOrClick","pause","id","keymap","first","unshift","shiftKey","ctrlKey","altKey","metaKey","toUpperCase","clientX","clientY","buttons","setTimeout","running","strategy","_startX","_startY","_maxRadius","_isBlocked","isBlocked","_calcRadius","Utils.calcRadius","_setVisible","setVisible","_hasXY","maxRadius","castLight","row","startSlope","endSlope","xx","xy","yx","yy","currentX","currentY","outerSlope","innerSlope","maxSlope","nextStart","blocked","deltaY","minSlope","deltaX","bright"],"mappings":"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"}