{"version":3,"file":"gw-core.min.js","sources":["../js/utils.js","../js/random.js","../js/range.js","../js/flag.js","../js/grid.js","../js/io.js","../js/fov.js","../js/path.js","../js/events.js","../js/gw.js"],"sourcesContent":["/**\n * GW.utils\n * @module utils\n */\n// DIRS are organized clockwise\n// - first 4 are arrow directions\n//   >> rotate 90 degrees clockwise ==>> newIndex = (oldIndex + 1) % 4\n//   >> opposite direction ==>> oppIndex = (index + 2) % 4\n// - last 4 are diagonals\n//   >> rotate 90 degrees clockwise ==>> newIndex = 4 + (oldIndex + 1) % 4;\n//   >> opposite diagonal ==>> newIndex = 4 + (index + 2) % 4;\nexport const DIRS = [\n    [0, 1],\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n    [1, 1],\n    [1, -1],\n    [-1, -1],\n    [-1, 1],\n];\nexport const NO_DIRECTION = -1;\nexport const UP = 0;\nexport const RIGHT = 1;\nexport const DOWN = 2;\nexport const LEFT = 3;\nexport const RIGHT_UP = 4;\nexport const RIGHT_DOWN = 5;\nexport const LEFT_DOWN = 6;\nexport const LEFT_UP = 7;\n// CLOCK DIRS are organized clockwise, starting at UP\n// >> opposite = (index + 4) % 8\n// >> 90 degrees rotate right = (index + 2) % 8\n// >> 90 degrees rotate left = (8 + index - 2) % 8\nexport const CLOCK_DIRS = [\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [1, -1],\n    [0, -1],\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n];\nexport function NOOP() { }\nexport function TRUE() {\n    return true;\n}\nexport function FALSE() {\n    return false;\n}\nexport function ONE() {\n    return 1;\n}\nexport function ZERO() {\n    return 0;\n}\nexport function IDENTITY(x) {\n    return x;\n}\n/**\n * clamps a value between min and max (inclusive)\n * @param v {Number} the value to clamp\n * @param min {Number} the minimum value\n * @param max {Number} the maximum value\n * @returns {Number} the clamped value\n */\nexport function clamp(v, min, max) {\n    if (v < min)\n        return min;\n    if (v > max)\n        return max;\n    return v;\n}\nexport function x(src) {\n    // @ts-ignore\n    return src.x || src[0] || 0;\n}\nexport function y(src) {\n    // @ts-ignore\n    return src.y || src[1] || 0;\n}\nexport function copyXY(dest, src) {\n    dest.x = x(src);\n    dest.y = y(src);\n}\nexport function addXY(dest, src) {\n    dest.x += x(src);\n    dest.y += y(src);\n}\nexport function equalsXY(dest, src) {\n    return dest.x == x(src) && dest.y == y(src);\n}\nexport function lerpXY(a, b, pct) {\n    if (pct > 1) {\n        pct = pct / 100;\n    }\n    pct = clamp(pct, 0, 1);\n    const dx = x(b) - x(a);\n    const dy = y(b) - y(a);\n    const x2 = x(a) + Math.floor(dx * pct);\n    const y2 = y(a) + Math.floor(dy * pct);\n    return [x2, y2];\n}\nexport function distanceBetween(x1, y1, x2, y2) {\n    const x = Math.abs(x1 - x2);\n    const y = Math.abs(y1 - y2);\n    const min = Math.min(x, y);\n    return x + y - 0.6 * min;\n}\nexport function distanceFromTo(a, b) {\n    return distanceBetween(x(a), y(a), x(b), y(b));\n}\nexport function calcRadius(x, y) {\n    return distanceBetween(0, 0, x, y);\n}\nexport function dirBetween(x, y, toX, toY) {\n    let diffX = toX - x;\n    let diffY = toY - y;\n    if (diffX && diffY) {\n        const absX = Math.abs(diffX);\n        const absY = Math.abs(diffY);\n        if (absX >= 2 * absY) {\n            diffY = 0;\n        }\n        else if (absY >= 2 * absX) {\n            diffX = 0;\n        }\n    }\n    return [Math.sign(diffX), Math.sign(diffY)];\n}\nexport function dirFromTo(a, b) {\n    return dirBetween(x(a), y(a), x(b), y(b));\n}\nexport function dirIndex(dir) {\n    const x0 = x(dir);\n    const y0 = y(dir);\n    return DIRS.findIndex((a) => a[0] == x0 && a[1] == y0);\n}\nexport function isOppositeDir(a, b) {\n    if (a[0] + b[0] != 0)\n        return false;\n    if (a[1] + b[1] != 0)\n        return false;\n    return true;\n}\nexport function isSameDir(a, b) {\n    return a[0] == b[0] && a[1] == b[1];\n}\nexport function dirSpread(dir) {\n    const result = [dir];\n    if (dir[0] == 0) {\n        result.push([1, dir[1]]);\n        result.push([-1, dir[1]]);\n    }\n    else if (dir[1] == 0) {\n        result.push([dir[0], 1]);\n        result.push([dir[0], -1]);\n    }\n    else {\n        result.push([dir[0], 0]);\n        result.push([0, dir[1]]);\n    }\n    return result;\n}\nexport function stepFromTo(a, b, fn) {\n    const x0 = x(a);\n    const y0 = y(a);\n    const diff = [x(b) - x0, y(b) - y0];\n    const steps = Math.abs(diff[0]) + Math.abs(diff[1]);\n    const c = [0, 0];\n    const last = [99999, 99999];\n    for (let step = 0; step <= steps; ++step) {\n        c[0] = x0 + Math.floor((diff[0] * step) / steps);\n        c[1] = y0 + Math.floor((diff[1] * step) / steps);\n        if (c[0] != last[0] || c[1] != last[1]) {\n            fn(c[0], c[1]);\n        }\n        last[0] = c[0];\n        last[1] = c[1];\n    }\n}\n// Draws the smooth gradient that appears on a button when you hover over or depress it.\n// Returns the percentage by which the current tile should be averaged toward a hilite color.\nexport function smoothHiliteGradient(currentXValue, maxXValue) {\n    return Math.floor(100 * Math.sin((Math.PI * currentXValue) / maxXValue));\n}\nfunction assignField(dest, src, key) {\n    const current = dest[key];\n    const updated = src[key];\n    if (current && current.copy && updated) {\n        current.copy(updated);\n    }\n    else if (current && current.clear && !updated) {\n        current.clear();\n    }\n    else if (current && current.nullify && !updated) {\n        current.nullify();\n    }\n    else if (updated && updated.clone) {\n        dest[key] = updated.clone(); // just use same object (shallow copy)\n    }\n    else if (updated && Array.isArray(updated)) {\n        dest[key] = updated.slice();\n    }\n    else if (current && Array.isArray(current)) {\n        current.length = 0;\n    }\n    else {\n        dest[key] = updated;\n    }\n}\n// export function copyObject(dest, src) {\n//   Object.keys(dest).forEach( (key) => {\n//     assignField(dest, src, key);\n//   });\n// }\n// export function assignObject(dest, src) {\n//   Object.keys(src).forEach( (key) => {\n//     assignField(dest, src, key);\n//   });\n// }\nexport function assignOmitting(omit, dest, src) {\n    if (typeof omit === \"string\") {\n        omit = omit.split(/[,|]/g).map((t) => t.trim());\n    }\n    Object.keys(src).forEach((key) => {\n        if (omit.includes(key))\n            return;\n        assignField(dest, src, key);\n    });\n}\nexport function setDefault(obj, field, val) {\n    if (obj[field] === undefined) {\n        obj[field] = val;\n    }\n}\nexport function setDefaults(obj, def, custom = null) {\n    let dest;\n    Object.keys(def).forEach((key) => {\n        const origKey = key;\n        let defValue = def[key];\n        dest = obj;\n        // allow for => 'stats.health': 100\n        const parts = key.split(\".\");\n        while (parts.length > 1) {\n            key = parts.shift();\n            if (dest[key] === undefined) {\n                dest = dest[key] = {};\n            }\n            else if (typeof dest[key] !== \"object\") {\n                ERROR(\"Trying to set default member on non-object config item: \" + origKey);\n            }\n            else {\n                dest = dest[key];\n            }\n        }\n        key = parts.shift();\n        let current = dest[key];\n        // console.log('def - ', key, current, defValue, obj, dest);\n        if (custom && custom(dest, key, current, defValue)) {\n            // do nothing\n        }\n        else if (current === undefined) {\n            if (defValue === null) {\n                dest[key] = null;\n            }\n            else if (Array.isArray(defValue)) {\n                dest[key] = defValue.slice();\n            }\n            else if (typeof defValue === \"object\") {\n                dest[key] = defValue; // Object.assign({}, defValue); -- this breaks assigning a Color object as a default...\n            }\n            else {\n                dest[key] = defValue;\n            }\n        }\n    });\n}\nexport function kindDefaults(obj, def) {\n    function custom(dest, key, current, defValue) {\n        if (key.search(/[fF]lags$/) < 0)\n            return false;\n        if (!current) {\n            current = [];\n        }\n        else if (typeof current == \"string\") {\n            current = current.split(/[,|]/).map((t) => t.trim());\n        }\n        else if (!Array.isArray(current)) {\n            current = [current];\n        }\n        if (typeof defValue === \"string\") {\n            defValue = defValue.split(/[,|]/).map((t) => t.trim());\n        }\n        else if (!Array.isArray(defValue)) {\n            defValue = [defValue];\n        }\n        // console.log('flags', key, defValue, current);\n        dest[key] = defValue.concat(current);\n        return true;\n    }\n    return setDefaults(obj, def, custom);\n}\nexport function pick(obj, ...fields) {\n    const data = {};\n    fields.forEach((f) => {\n        const v = obj[f];\n        if (v !== undefined) {\n            data[f] = v;\n        }\n    });\n    return data;\n}\nexport function clearObject(obj) {\n    Object.keys(obj).forEach((key) => (obj[key] = undefined));\n}\nexport function ERROR(message) {\n    throw new Error(message);\n}\nexport function WARN(...args) {\n    console.warn(...args);\n}\nexport function getOpt(obj, member, _default) {\n    const v = obj[member];\n    if (v === undefined)\n        return _default;\n    return v;\n}\nexport function firstOpt(field, ...args) {\n    for (let arg of args) {\n        if (typeof arg !== \"object\" || Array.isArray(arg)) {\n            return arg;\n        }\n        if (arg[field] !== undefined) {\n            return arg[field];\n        }\n    }\n    return undefined;\n}\nexport function arraysIntersect(a, b) {\n    return a.some((av) => b.includes(av));\n}\nexport function sum(arr) {\n    return arr.reduce((a, b) => a + b);\n}\nexport function chainLength(root) {\n    let count = 0;\n    while (root) {\n        count += 1;\n        root = root.next;\n    }\n    return count;\n}\nexport function chainIncludes(chain, entry) {\n    while (chain && chain !== entry) {\n        chain = chain.next;\n    }\n    return chain === entry;\n}\nexport function eachChain(item, fn) {\n    let index = 0;\n    while (item) {\n        const next = item.next;\n        fn(item, index++);\n        item = next;\n    }\n    return index; // really count\n}\nexport function addToChain(obj, name, entry) {\n    entry.next = obj[name] || null;\n    obj[name] = entry;\n    return true;\n}\nexport function removeFromChain(obj, name, entry) {\n    const root = obj[name];\n    if (root === entry) {\n        obj[name] = entry.next || null;\n        entry.next = null;\n        return true;\n    }\n    else if (!root) {\n        return false;\n    }\n    else {\n        let prev = root;\n        let current = prev.next;\n        while (current && current !== entry) {\n            prev = current;\n            current = prev.next;\n        }\n        if (current === entry) {\n            prev.next = current.next || null;\n            entry.next = null;\n            return true;\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=utils.js.map","const RANDOM_CONFIG = {\n    make: () => {\n        return Math.random.bind(Math);\n    },\n};\nfunction lotteryDrawArray(rand, frequencies) {\n    let i, maxFreq, randIndex;\n    maxFreq = 0;\n    for (i = 0; i < frequencies.length; i++) {\n        maxFreq += frequencies[i];\n    }\n    if (maxFreq <= 0) {\n        console.warn(\"Lottery Draw - no frequencies\", frequencies, frequencies.length);\n        return 0;\n    }\n    randIndex = rand.range(0, maxFreq - 1);\n    for (i = 0; i < frequencies.length; i++) {\n        if (frequencies[i] > randIndex) {\n            return i;\n        }\n        else {\n            randIndex -= frequencies[i];\n        }\n    }\n    console.warn(\"Lottery Draw failed.\", frequencies, frequencies.length);\n    return 0;\n}\nfunction lotteryDrawObject(rand, weights) {\n    const entries = Object.entries(weights);\n    const frequencies = entries.map(([_, weight]) => weight);\n    const index = lotteryDrawArray(rand, frequencies);\n    return entries[index][0];\n}\nexport class Random {\n    constructor() {\n        this._fn = RANDOM_CONFIG.make();\n    }\n    static configure(opts) {\n        if (opts.make) {\n            if (typeof opts.make !== \"function\")\n                throw new Error(\"Random make parameter must be a function.\");\n            if (typeof opts.make(12345) !== \"function\")\n                throw new Error(\"Random make function must accept a numeric seed and return a random function.\");\n            RANDOM_CONFIG.make = opts.make;\n            random.seed();\n            cosmetic.seed();\n        }\n    }\n    seed(val) {\n        this._fn = RANDOM_CONFIG.make(val);\n    }\n    value() {\n        return this._fn();\n    }\n    float() {\n        return this.value();\n    }\n    number(max = 0) {\n        max = max || Number.MAX_SAFE_INTEGER;\n        return Math.floor(this._fn() * max);\n    }\n    int(max = 0) {\n        return this.number(max);\n    }\n    range(lo, hi) {\n        if (hi <= lo)\n            return hi;\n        const diff = hi - lo + 1;\n        return lo + this.number(diff);\n    }\n    dice(count, sides, addend = 0) {\n        let total = 0;\n        let mult = 1;\n        if (count < 0) {\n            count = -count;\n            mult = -1;\n        }\n        addend = addend || 0;\n        for (let i = 0; i < count; ++i) {\n            total += this.range(1, sides);\n        }\n        total *= mult;\n        return total + addend;\n    }\n    weighted(weights) {\n        if (Array.isArray(weights)) {\n            return lotteryDrawArray(this, weights);\n        }\n        return lotteryDrawObject(this, weights);\n    }\n    item(list) {\n        if (!Array.isArray(list)) {\n            list = Object.values(list);\n        }\n        return list[this.range(0, list.length - 1)];\n    }\n    key(obj) {\n        return this.item(Object.keys(obj));\n    }\n    shuffle(list, fromIndex = 0, toIndex = 0) {\n        if (arguments.length == 2) {\n            toIndex = fromIndex;\n            fromIndex = 0;\n        }\n        let i, r, buf;\n        toIndex = toIndex || list.length;\n        fromIndex = fromIndex || 0;\n        for (i = fromIndex; i < toIndex; i++) {\n            r = this.range(fromIndex, toIndex - 1);\n            if (i != r) {\n                buf = list[r];\n                list[r] = list[i];\n                list[i] = buf;\n            }\n        }\n        return list;\n    }\n    sequence(n) {\n        const list = [];\n        for (let i = 0; i < n; i++) {\n            list[i] = i;\n        }\n        return this.shuffle(list);\n    }\n    chance(percent, outOf = 100) {\n        if (percent <= 0)\n            return false;\n        if (percent >= outOf)\n            return true;\n        return this.number(outOf) < percent;\n    }\n    // Get a random int between lo and hi, inclusive, with probability distribution\n    // affected by clumps.\n    clumped(lo, hi, clumps) {\n        if (hi <= lo) {\n            return lo;\n        }\n        if (clumps <= 1) {\n            return this.range(lo, hi);\n        }\n        let i, total = 0, numSides = Math.floor((hi - lo) / clumps);\n        for (i = 0; i < (hi - lo) % clumps; i++) {\n            total += this.range(0, numSides + 1);\n        }\n        for (; i < clumps; i++) {\n            total += this.range(0, numSides);\n        }\n        return total + lo;\n    }\n}\nexport const random = new Random();\nexport const cosmetic = new Random();\n//# sourceMappingURL=random.js.map","import { random } from \"./random\";\nexport class Range {\n    constructor(lower, upper = 0, clumps = 1, rng) {\n        this._rng = rng || random;\n        if (Array.isArray(lower)) {\n            clumps = lower[2];\n            upper = lower[1];\n            lower = lower[0];\n        }\n        else if (lower instanceof Range) {\n            clumps = lower.clumps;\n            upper = lower.hi;\n            lower = lower.lo;\n        }\n        if (upper < lower) {\n            [upper, lower] = [lower, upper];\n        }\n        this.lo = lower || 0;\n        this.hi = upper || this.lo;\n        this.clumps = clumps || 1;\n    }\n    value() {\n        return this._rng.clumped(this.lo, this.hi, this.clumps);\n    }\n    toString() {\n        if (this.lo >= this.hi) {\n            return \"\" + this.lo;\n        }\n        return `${this.lo}-${this.hi}`;\n    }\n}\nexport function make(config, rng) {\n    if (!config)\n        return new Range(0, 0, 0, rng);\n    if (config instanceof Range)\n        return config; // you can supply a custom range object\n    // if (config.value) return config;  // calc or damage\n    if (typeof config == \"function\")\n        throw new Error(\"Custom range functions not supported - extend Range\");\n    if (config === undefined || config === null)\n        return new Range(0, 0, 0, rng);\n    if (typeof config == \"number\")\n        return new Range(config, config, 1, rng);\n    // @ts-ignore\n    if (config === true || config === false)\n        throw new Error(\"Invalid random config: \" + config);\n    if (Array.isArray(config)) {\n        return new Range(config[0], config[1], config[2], rng);\n    }\n    if (typeof config !== \"string\") {\n        throw new Error(\"Calculations must be strings.  Received: \" + JSON.stringify(config));\n    }\n    if (config.length == 0)\n        return new Range(0, 0, 0, rng);\n    const RE = /^(?:([+-]?\\d*)[Dd](\\d+)([+-]?\\d*)|([+-]?\\d+)-(\\d+):?(\\d+)?|([+-]?\\d+)~(\\d+)|([+-]?\\d+\\.?\\d*))/g;\n    let results;\n    while ((results = RE.exec(config)) !== null) {\n        if (results[2]) {\n            let count = Number.parseInt(results[1]) || 1;\n            const sides = Number.parseInt(results[2]);\n            const addend = Number.parseInt(results[3]) || 0;\n            const lower = addend + count;\n            const upper = addend + count * sides;\n            return new Range(lower, upper, count, rng);\n        }\n        else if (results[4] && results[5]) {\n            const min = Number.parseInt(results[4]);\n            const max = Number.parseInt(results[5]);\n            const clumps = Number.parseInt(results[6]);\n            return new Range(min, max, clumps, rng);\n        }\n        else if (results[7] && results[8]) {\n            const base = Number.parseInt(results[7]);\n            const std = Number.parseInt(results[8]);\n            return new Range(base - 2 * std, base + 2 * std, 3, rng);\n        }\n        else if (results[9]) {\n            const v = Number.parseFloat(results[9]);\n            return new Range(v, v, 1, rng);\n        }\n    }\n    throw new Error(\"Not a valid range - \" + config);\n}\n//# sourceMappingURL=range.js.map","///////////////////////////////////\n// FLAG\nexport function fl(N) {\n    return 1 << N;\n}\nexport function toString(flagObj, value) {\n    const inverse = Object.entries(flagObj).reduce((out, entry) => {\n        const [key, value] = entry;\n        if (value)\n            out[value] = key;\n        return out;\n    }, []);\n    const out = [];\n    for (let index = 0; index < 32; ++index) {\n        const fl = 1 << index;\n        if (value & fl) {\n            out.push(inverse[fl]);\n        }\n    }\n    return out.join(\" | \");\n}\nexport function from(obj, ...args) {\n    let result = 0;\n    for (let index = 0; index < args.length; ++index) {\n        let value = args[index];\n        if (value === undefined)\n            continue;\n        if (typeof value == \"number\") {\n            result |= value;\n            continue; // next\n        }\n        else if (typeof value === \"string\") {\n            value = value\n                .split(/[,|]/)\n                .map((t) => t.trim())\n                .map((u) => {\n                const n = Number.parseInt(u);\n                if (n >= 0)\n                    return n;\n                return u;\n            });\n        }\n        if (Array.isArray(value)) {\n            value.forEach((v) => {\n                if (typeof v == \"string\") {\n                    v = v.trim();\n                    if (v.startsWith(\"!\")) {\n                        // @ts-ignore\n                        const f = obj[v.substring(1)];\n                        result &= ~f;\n                    }\n                    else {\n                        // @ts-ignore\n                        const f = obj[v];\n                        if (f) {\n                            result |= f;\n                        }\n                    }\n                }\n                else if (v === 0) {\n                    // to allow clearing flags when extending objects\n                    result = 0;\n                }\n                else {\n                    result |= v;\n                }\n            });\n        }\n    }\n    return result;\n}\nexport const flags = {};\nexport function install(flagName, flag) {\n    flags[flagName] = flag;\n    return flag;\n}\n//# sourceMappingURL=flag.js.map","import { random } from \"./random\";\nimport * as Utils from \"./utils\";\nconst DIRS = Utils.DIRS;\nconst CDIRS = Utils.CLOCK_DIRS;\nexport function makeArray(l, fn) {\n    if (fn === undefined)\n        return new Array(l).fill(0);\n    fn = fn || (() => 0);\n    const arr = new Array(l);\n    for (let i = 0; i < l; ++i) {\n        arr[i] = fn(i);\n    }\n    return arr;\n}\nfunction _formatGridValue(v) {\n    if (v === false) {\n        return \" \";\n    }\n    else if (v === true) {\n        return \"T\";\n    }\n    else if (v < 10) {\n        return \"\" + v;\n    }\n    else if (v < 36) {\n        return String.fromCharCode(\"a\".charCodeAt(0) + v - 10);\n    }\n    else if (v < 62) {\n        return String.fromCharCode(\"A\".charCodeAt(0) + v - 10 - 26);\n    }\n    else if (typeof v === \"string\") {\n        return v[0];\n    }\n    else {\n        return \"#\";\n    }\n}\nexport class Grid extends Array {\n    constructor(w, h, v) {\n        super(w);\n        for (let x = 0; x < w; ++x) {\n            if (typeof v === \"function\") {\n                this[x] = new Array(h)\n                    .fill(0)\n                    .map((_, i) => v(x, i));\n            }\n            else {\n                this[x] = new Array(h).fill(v);\n            }\n        }\n        this._width = w;\n        this._height = h;\n    }\n    get width() {\n        return this._width;\n    }\n    get height() {\n        return this._height;\n    }\n    // @ts-ignore\n    forEach(fn) {\n        let i, j;\n        for (i = 0; i < this.width; i++) {\n            for (j = 0; j < this.height; j++) {\n                fn(this[i][j], i, j, this);\n            }\n        }\n    }\n    eachNeighbor(x, y, fn, only4dirs = false) {\n        const maxIndex = only4dirs ? 4 : 8;\n        for (let d = 0; d < maxIndex; ++d) {\n            const dir = DIRS[d];\n            const i = x + dir[0];\n            const j = y + dir[1];\n            if (this.hasXY(i, j)) {\n                fn(this[i][j], i, j, this);\n            }\n        }\n    }\n    forRect(x, y, w, h, fn) {\n        w = Math.min(this.width - x, w);\n        h = Math.min(this.height - y, h);\n        for (let i = x; i < x + w; ++i) {\n            for (let j = y; j < y + h; ++j) {\n                fn(this[i][j], i, j, this);\n            }\n        }\n    }\n    // @ts-ignore\n    map(fn) {\n        return super.map((col, x) => {\n            return col.map((v, y) => fn(v, x, y, this));\n        });\n    }\n    forCircle(x, y, radius, fn) {\n        let i, j;\n        for (i = Math.max(0, x - radius - 1); i < Math.min(this.width, x + radius + 1); i++) {\n            for (j = Math.max(0, y - radius - 1); j < Math.min(this.height, y + radius + 1); j++) {\n                if (this.hasXY(i, j) &&\n                    (i - x) * (i - x) + (j - y) * (j - y) < radius * radius + radius) {\n                    // + radius softens the circle\n                    fn(this[i][j], i, j, this);\n                }\n            }\n        }\n    }\n    hasXY(x, y) {\n        return x >= 0 && y >= 0 && x < this.width && y < this.height;\n    }\n    isBoundaryXY(x, y) {\n        return (this.hasXY(x, y) &&\n            (x == 0 || x == this.width - 1 || y == 0 || y == this.height - 1));\n    }\n    calcBounds() {\n        const bounds = { left: this.width, top: this.height, right: 0, bottom: 0 };\n        this.forEach((v, i, j) => {\n            if (!v)\n                return;\n            if (bounds.left > i)\n                bounds.left = i;\n            if (bounds.right < i)\n                bounds.right = i;\n            if (bounds.top > j)\n                bounds.top = j;\n            if (bounds.bottom < j)\n                bounds.bottom = j;\n        });\n        return bounds;\n    }\n    update(fn) {\n        let i, j;\n        for (i = 0; i < this.width; i++) {\n            for (j = 0; j < this.height; j++) {\n                this[i][j] = fn(this[i][j], i, j, this);\n            }\n        }\n    }\n    updateRect(x, y, width, height, fn) {\n        let i, j;\n        for (i = x; i < x + width; i++) {\n            for (j = y; j < y + height; j++) {\n                if (this.hasXY(i, j)) {\n                    this[i][j] = fn(this[i][j], i, j, this);\n                }\n            }\n        }\n    }\n    updateCircle(x, y, radius, fn) {\n        let i, j;\n        for (i = Math.max(0, x - radius - 1); i < Math.min(this.width, x + radius + 1); i++) {\n            for (j = Math.max(0, y - radius - 1); j < Math.min(this.height, y + radius + 1); j++) {\n                if (this.hasXY(i, j) &&\n                    (i - x) * (i - x) + (j - y) * (j - y) < radius * radius + radius) {\n                    // + radius softens the circle\n                    this[i][j] = fn(this[i][j], i, j, this);\n                }\n            }\n        }\n    }\n    // @ts-ignore\n    fill(v) {\n        const fn = typeof v === \"function\" ? v : () => v;\n        this.update(fn);\n    }\n    fillRect(x, y, w, h, v) {\n        const fn = typeof v === \"function\" ? v : () => v;\n        this.updateRect(x, y, w, h, fn);\n    }\n    fillCircle(x, y, radius, v) {\n        const fn = typeof v === \"function\" ? v : () => v;\n        this.updateCircle(x, y, radius, fn);\n    }\n    replace(findValue, replaceValue) {\n        this.update((v) => (v == findValue ? replaceValue : v));\n    }\n    copy(from) {\n        // TODO - check width, height?\n        this.update((_, i, j) => from[i][j]);\n    }\n    count(match) {\n        const fn = typeof match === \"function\"\n            ? match\n            : (v) => v == match;\n        let count = 0;\n        this.forEach((v, i, j) => {\n            if (fn(v, i, j, this))\n                ++count;\n        });\n        return count;\n    }\n    dump(fmtFn) {\n        this.dumpRect(0, 0, this.width, this.height, fmtFn);\n    }\n    dumpRect(left, top, width, height, fmtFn) {\n        let i, j;\n        fmtFn = fmtFn || _formatGridValue;\n        left = Utils.clamp(left, 0, this.width - 2);\n        top = Utils.clamp(top, 0, this.height - 2);\n        const right = Utils.clamp(left + width, 1, this.width - 1);\n        const bottom = Utils.clamp(top + height, 1, this.height - 1);\n        let output = [];\n        for (j = top; j <= bottom; j++) {\n            let line = (\"\" + j + \"]\").padStart(3, \" \");\n            for (i = left; i <= right; i++) {\n                if (i % 10 == 0) {\n                    line += \" \";\n                }\n                const v = this[i][j];\n                line += fmtFn(v, i, j)[0];\n            }\n            output.push(line);\n        }\n        console.log(output.join(\"\\n\"));\n    }\n    dumpAround(x, y, radius) {\n        this.dumpRect(x - radius, y - radius, 2 * radius, 2 * radius);\n    }\n    closestMatchingLoc(x, y, fn) {\n        let bestLoc = [-1, -1];\n        let bestDistance = this.width + this.height;\n        this.forEach((v, i, j) => {\n            if (fn(v, i, j, this)) {\n                const dist = Utils.distanceBetween(x, y, i, j);\n                if (dist < bestDistance) {\n                    bestLoc[0] = i;\n                    bestLoc[1] = j;\n                    bestDistance = dist;\n                }\n                else if (dist == bestDistance && random.chance(50)) {\n                    bestLoc[0] = i;\n                    bestLoc[1] = j;\n                }\n            }\n        });\n        return bestLoc;\n    }\n    firstMatchingLoc(v) {\n        const fn = typeof v === \"function\" ? v : (val) => val == v;\n        for (let i = 0; i < this.width; ++i) {\n            for (let j = 0; j < this.height; ++j) {\n                if (fn(this[i][j], i, j, this)) {\n                    return [i, j];\n                }\n            }\n        }\n        return [-1, -1];\n    }\n    randomMatchingLoc(v, deterministic = false) {\n        let locationCount = 0;\n        let i, j, index;\n        const fn = typeof v === \"function\" ? v : (val) => val == v;\n        locationCount = 0;\n        this.forEach((v, i, j) => {\n            if (fn(v, i, j, this)) {\n                locationCount++;\n            }\n        });\n        if (locationCount == 0) {\n            return [-1, -1];\n        }\n        else if (deterministic) {\n            index = Math.floor(locationCount / 2);\n        }\n        else {\n            index = random.range(0, locationCount - 1);\n        }\n        for (i = 0; i < this.width && index >= 0; i++) {\n            for (j = 0; j < this.height && index >= 0; j++) {\n                if (fn(this[i][j], i, j, this)) {\n                    if (index == 0) {\n                        return [i, j];\n                    }\n                    index--;\n                }\n            }\n        }\n        return [-1, -1];\n    }\n    matchingLocNear(x, y, v, deterministic = false) {\n        let loc = [-1, -1];\n        let i, j, k, candidateLocs, randIndex;\n        const fn = typeof v === \"function\" ? v : (val) => val == v;\n        candidateLocs = 0;\n        // count up the number of candidate locations\n        for (k = 0; k < Math.max(this.width, this.height) && !candidateLocs; k++) {\n            for (i = x - k; i <= x + k; i++) {\n                for (j = y - k; j <= y + k; j++) {\n                    if (this.hasXY(i, j) &&\n                        (i == x - k || i == x + k || j == y - k || j == y + k) &&\n                        fn(this[i][j], i, j, this)) {\n                        candidateLocs++;\n                    }\n                }\n            }\n        }\n        if (candidateLocs == 0) {\n            return [-1, -1];\n        }\n        // and pick one\n        if (deterministic) {\n            randIndex = 1 + Math.floor(candidateLocs / 2);\n        }\n        else {\n            randIndex = 1 + random.number(candidateLocs);\n        }\n        for (k = 0; k < Math.max(this.width, this.height); k++) {\n            for (i = x - k; i <= x + k; i++) {\n                for (j = y - k; j <= y + k; j++) {\n                    if (this.hasXY(i, j) &&\n                        (i == x - k || i == x + k || j == y - k || j == y + k) &&\n                        fn(this[i][j], i, j, this)) {\n                        if (--randIndex == 0) {\n                            loc[0] = i;\n                            loc[1] = j;\n                            return loc;\n                        }\n                    }\n                }\n            }\n        }\n        // brogueAssert(false);\n        return [-1, -1]; // should never reach this point\n    }\n    // Rotates around the cell, counting up the number of distinct strings of neighbors with the same test result in a single revolution.\n    //\t\tZero means there are no impassable tiles adjacent.\n    //\t\tOne means it is adjacent to a wall.\n    //\t\tTwo means it is in a hallway or something similar.\n    //\t\tThree means it is the center of a T-intersection or something similar.\n    //\t\tFour means it is in the intersection of two hallways.\n    //\t\tFive or more means there is a bug.\n    arcCount(x, y, testFn) {\n        let arcCount, dir, oldX, oldY, newX, newY;\n        // brogueAssert(grid.hasXY(x, y));\n        testFn = testFn || Utils.IDENTITY;\n        arcCount = 0;\n        for (dir = 0; dir < CDIRS.length; dir++) {\n            oldX = x + CDIRS[(dir + 7) % 8][0];\n            oldY = y + CDIRS[(dir + 7) % 8][1];\n            newX = x + CDIRS[dir][0];\n            newY = y + CDIRS[dir][1];\n            // Counts every transition from passable to impassable or vice-versa on the way around the cell:\n            if ((this.hasXY(newX, newY) &&\n                testFn(this[newX][newY], newX, newY, this)) !=\n                (this.hasXY(oldX, oldY) && testFn(this[oldX][oldY], oldX, oldY, this))) {\n                arcCount++;\n            }\n        }\n        return Math.floor(arcCount / 2); // Since we added one when we entered a wall and another when we left.\n    }\n}\nconst GRID_CACHE = [];\n// @ts-ignore\nlet GRID_ACTIVE_COUNT = 0;\n// @ts-ignore\nlet GRID_ALLOC_COUNT = 0;\n// @ts-ignore\nlet GRID_CREATE_COUNT = 0;\n// @ts-ignore\nlet GRID_FREE_COUNT = 0;\nexport class NumGrid extends Grid {\n    constructor(w, h, v = 0) {\n        super(w, h, v);\n    }\n    static alloc(w, h, v = 0) {\n        if (!w || !h)\n            throw new Error(\"Grid alloc requires width and height parameters.\");\n        ++GRID_ACTIVE_COUNT;\n        ++GRID_ALLOC_COUNT;\n        let grid = GRID_CACHE.pop();\n        if (!grid) {\n            ++GRID_CREATE_COUNT;\n            return new NumGrid(w, h, v);\n        }\n        grid.resize(w, h, v);\n        return grid;\n    }\n    static free(grid) {\n        if (grid) {\n            if (GRID_CACHE.indexOf(grid) >= 0)\n                return;\n            GRID_CACHE.push(grid);\n            ++GRID_FREE_COUNT;\n            --GRID_ACTIVE_COUNT;\n        }\n    }\n    resize(width, height, v = 0) {\n        const fn = typeof v === \"function\" ? v : () => v;\n        while (this.length < width)\n            this.push([]);\n        this.length = width;\n        let x = 0;\n        let y = 0;\n        for (x = 0; x < width; ++x) {\n            const col = this[x];\n            for (y = 0; y < height; ++y) {\n                col[y] = fn(x, y);\n            }\n            col.length = height;\n        }\n        this._width = width;\n        this._height = height;\n        if (this.x !== undefined) {\n            this.x = undefined;\n            this.y = undefined;\n        }\n    }\n    findReplaceRange(findValueMin, findValueMax, fillValue) {\n        this.update((v) => {\n            if (v >= findValueMin && v <= findValueMax) {\n                return fillValue;\n            }\n            return v;\n        });\n    }\n    // Flood-fills the grid from (x, y) along cells that are within the eligible range.\n    // Returns the total count of filled cells.\n    floodFillRange(x, y, eligibleValueMin = 0, eligibleValueMax = 0, fillValue = 0) {\n        let dir;\n        let newX, newY, fillCount = 1;\n        if (fillValue >= eligibleValueMin && fillValue <= eligibleValueMax) {\n            throw new Error(\"Invalid grid flood fill\");\n        }\n        this[x][y] = fillValue;\n        for (dir = 0; dir < 4; dir++) {\n            newX = x + DIRS[dir][0];\n            newY = y + DIRS[dir][1];\n            if (this.hasXY(newX, newY) &&\n                this[newX][newY] >= eligibleValueMin &&\n                this[newX][newY] <= eligibleValueMax) {\n                fillCount += this.floodFillRange(newX, newY, eligibleValueMin, eligibleValueMax, fillValue);\n            }\n        }\n        return fillCount;\n    }\n    invert() {\n        this.update((v) => (v ? 0 : 1));\n    }\n    closestLocWithValue(x, y, value = 1) {\n        return this.closestMatchingLoc(x, y, (v) => v == value);\n    }\n    // Takes a grid as a mask of valid locations, chooses one randomly and returns it as (x, y).\n    // If there are no valid locations, returns (-1, -1).\n    randomLocWithValue(validValue = 1) {\n        return this.randomMatchingLoc((v) => v == validValue);\n    }\n    getQualifyingLocNear(x, y, deterministic = false) {\n        return this.matchingLocNear(x, y, (v) => !!v, deterministic);\n    }\n    leastPositiveValue() {\n        let least = Number.MAX_SAFE_INTEGER;\n        this.forEach((v) => {\n            if (v > 0 && v < least) {\n                least = v;\n            }\n        });\n        return least;\n    }\n    randomLeastPositiveLoc(deterministic = false) {\n        const targetValue = this.leastPositiveValue();\n        return this.randomMatchingLoc((v) => v == targetValue, deterministic);\n    }\n    // Marks a cell as being a member of blobNumber, then recursively iterates through the rest of the blob\n    floodFill(x, y, matchValue, fillValue) {\n        let dir;\n        let newX, newY, numberOfCells = 1;\n        const matchFn = typeof matchValue == \"function\"\n            ? matchValue\n            : (v) => v == matchValue;\n        const fillFn = typeof fillValue == \"function\" ? fillValue : () => fillValue;\n        this[x][y] = fillFn(this[x][y], x, y, this);\n        // Iterate through the four cardinal neighbors.\n        for (dir = 0; dir < 4; dir++) {\n            newX = x + DIRS[dir][0];\n            newY = y + DIRS[dir][1];\n            if (!this.hasXY(newX, newY)) {\n                continue;\n            }\n            if (matchFn(this[newX][newY], newX, newY, this)) {\n                // If the neighbor is an unmarked region cell,\n                numberOfCells += this.floodFill(newX, newY, matchFn, fillFn); // then recurse.\n            }\n        }\n        return numberOfCells;\n    }\n    _cellularAutomataRound(birthParameters /* char[9] */, survivalParameters /* char[9] */) {\n        let i, j, nbCount, newX, newY;\n        let dir;\n        let buffer2;\n        buffer2 = NumGrid.alloc(this.width, this.height);\n        buffer2.copy(this); // Make a backup of this in buffer2, so that each generation is isolated.\n        let didSomething = false;\n        for (i = 0; i < this.width; i++) {\n            for (j = 0; j < this.height; j++) {\n                nbCount = 0;\n                for (dir = 0; dir < DIRS.length; dir++) {\n                    newX = i + DIRS[dir][0];\n                    newY = j + DIRS[dir][1];\n                    if (this.hasXY(newX, newY) && buffer2[newX][newY]) {\n                        nbCount++;\n                    }\n                }\n                if (!buffer2[i][j] && birthParameters[nbCount] == \"t\") {\n                    this[i][j] = 1; // birth\n                    didSomething = true;\n                }\n                else if (buffer2[i][j] && survivalParameters[nbCount] == \"t\") {\n                    // survival\n                }\n                else {\n                    this[i][j] = 0; // death\n                    didSomething = true;\n                }\n            }\n        }\n        NumGrid.free(buffer2);\n        return didSomething;\n    }\n    // Loads up **grid with the results of a cellular automata simulation.\n    fillBlob(roundCount, minBlobWidth, minBlobHeight, maxBlobWidth, maxBlobHeight, percentSeeded, birthParameters, survivalParameters) {\n        let i, j, k;\n        let blobNumber, blobSize, topBlobNumber, topBlobSize;\n        let topBlobMinX, topBlobMinY, topBlobMaxX, topBlobMaxY, blobWidth, blobHeight;\n        let foundACellThisLine;\n        if (minBlobWidth >= maxBlobWidth) {\n            minBlobWidth = Math.round(0.75 * maxBlobWidth);\n            maxBlobWidth = Math.round(1.25 * maxBlobWidth);\n        }\n        if (minBlobHeight >= maxBlobHeight) {\n            minBlobHeight = Math.round(0.75 * maxBlobHeight);\n            maxBlobHeight = Math.round(1.25 * maxBlobHeight);\n        }\n        const left = Math.floor((this.width - maxBlobWidth) / 2);\n        const top = Math.floor((this.height - maxBlobHeight) / 2);\n        // Generate blobs until they satisfy the minBlobWidth and minBlobHeight restraints\n        do {\n            // Clear buffer.\n            this.fill(0);\n            // Fill relevant portion with noise based on the percentSeeded argument.\n            for (i = 0; i < maxBlobWidth; i++) {\n                for (j = 0; j < maxBlobHeight; j++) {\n                    this[i + left][j + top] = random.chance(percentSeeded) ? 1 : 0;\n                }\n            }\n            // Some iterations of cellular automata\n            for (k = 0; k < roundCount; k++) {\n                if (!this._cellularAutomataRound(birthParameters, survivalParameters)) {\n                    k = roundCount; // cellularAutomataRound did not make any changes\n                }\n            }\n            // Now to measure the result. These are best-of variables; start them out at worst-case values.\n            topBlobSize = 0;\n            topBlobNumber = 0;\n            topBlobMinX = this.width;\n            topBlobMaxX = 0;\n            topBlobMinY = this.height;\n            topBlobMaxY = 0;\n            // Fill each blob with its own number, starting with 2 (since 1 means floor), and keeping track of the biggest:\n            blobNumber = 2;\n            for (i = 0; i < this.width; i++) {\n                for (j = 0; j < this.height; j++) {\n                    if (this[i][j] == 1) {\n                        // an unmarked blob\n                        // Mark all the cells and returns the total size:\n                        blobSize = this.floodFill(i, j, 1, blobNumber);\n                        if (blobSize > topBlobSize) {\n                            // if this blob is a new record\n                            topBlobSize = blobSize;\n                            topBlobNumber = blobNumber;\n                        }\n                        blobNumber++;\n                    }\n                }\n            }\n            // Figure out the top blob's height and width:\n            // First find the max & min x:\n            for (i = 0; i < this.width; i++) {\n                foundACellThisLine = false;\n                for (j = 0; j < this.height; j++) {\n                    if (this[i][j] == topBlobNumber) {\n                        foundACellThisLine = true;\n                        break;\n                    }\n                }\n                if (foundACellThisLine) {\n                    if (i < topBlobMinX) {\n                        topBlobMinX = i;\n                    }\n                    if (i > topBlobMaxX) {\n                        topBlobMaxX = i;\n                    }\n                }\n            }\n            // Then the max & min y:\n            for (j = 0; j < this.height; j++) {\n                foundACellThisLine = false;\n                for (i = 0; i < this.width; i++) {\n                    if (this[i][j] == topBlobNumber) {\n                        foundACellThisLine = true;\n                        break;\n                    }\n                }\n                if (foundACellThisLine) {\n                    if (j < topBlobMinY) {\n                        topBlobMinY = j;\n                    }\n                    if (j > topBlobMaxY) {\n                        topBlobMaxY = j;\n                    }\n                }\n            }\n            blobWidth = topBlobMaxX - topBlobMinX + 1;\n            blobHeight = topBlobMaxY - topBlobMinY + 1;\n        } while (blobWidth < minBlobWidth ||\n            blobHeight < minBlobHeight ||\n            topBlobNumber == 0);\n        // Replace the winning blob with 1's, and everything else with 0's:\n        for (i = 0; i < this.width; i++) {\n            for (j = 0; j < this.height; j++) {\n                if (this[i][j] == topBlobNumber) {\n                    this[i][j] = 1;\n                }\n                else {\n                    this[i][j] = 0;\n                }\n            }\n        }\n        // Populate the returned variables.\n        return {\n            x: topBlobMinX,\n            y: topBlobMinY,\n            width: blobWidth,\n            height: blobHeight,\n        };\n    }\n}\n// Grid.fillBlob = fillBlob;\nexport const alloc = NumGrid.alloc.bind(NumGrid);\nexport const free = NumGrid.free.bind(NumGrid);\nexport function make(w, h, v) {\n    if (v === undefined)\n        return new NumGrid(w, h, 0);\n    if (typeof v === \"number\")\n        return new NumGrid(w, h, v);\n    return new Grid(w, h, v);\n}\nexport function offsetZip(destGrid, srcGrid, srcToDestX, srcToDestY, value) {\n    const fn = typeof value === \"function\"\n        ? value\n        : (_, s, dx, dy) => (destGrid[dx][dy] = value || s);\n    srcGrid.forEach((c, i, j) => {\n        const destX = i + srcToDestX;\n        const destY = j + srcToDestY;\n        if (!destGrid.hasXY(destX, destY))\n            return;\n        if (!c)\n            return;\n        fn(destGrid[destX][destY], c, destX, destY, i, j, destGrid, srcGrid);\n    });\n}\n// Grid.offsetZip = offsetZip;\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(grid, x, y, isOpen) {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n    const fnOpen = typeof isOpen === \"function\"\n        ? isOpen\n        : (v) => v == isOpen;\n    solutionDir = Utils.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (grid.hasXY(oppX, oppY) &&\n            grid.hasXY(newX, newY) &&\n            fnOpen(grid[oppX][oppY], oppX, oppY, grid)) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != Utils.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return Utils.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\n// Grid.directionOfDoorSite = directionOfDoorSite;\nexport function intersection(onto, a, b) {\n    b = b || onto;\n    onto.update((_, i, j) => a[i][j] && b[i][j]);\n}\n// Grid.intersection = intersection;\nexport function unite(onto, a, b) {\n    b = b || onto;\n    onto.update((_, i, j) => b[i][j] || a[i][j]);\n}\n//# sourceMappingURL=grid.js.map","import * as Utils from \"./utils\";\nexport var commands = {};\nexport function addCommand(id, fn) {\n    commands[id] = fn;\n}\nlet KEYMAP = {};\nconst EVENTS = [];\nconst DEAD_EVENTS = [];\nconst LAST_CLICK = { x: -1, y: -1 };\nexport const KEYPRESS = \"keypress\";\nexport const MOUSEMOVE = \"mousemove\";\nexport const CLICK = \"click\";\nexport const TICK = \"tick\";\nexport const MOUSEUP = \"mouseup\";\nconst CONTROL_CODES = [\n    \"ShiftLeft\",\n    \"ShiftRight\",\n    \"ControlLeft\",\n    \"ControlRight\",\n    \"AltLeft\",\n    \"AltRight\",\n    \"MetaLeft\",\n    \"MetaRight\",\n];\nvar CURRENT_HANDLER = null;\nvar PAUSED = null;\nexport function setKeymap(keymap) {\n    KEYMAP = keymap;\n}\nexport function hasEvents() {\n    return EVENTS.length;\n}\nexport function clearEvents() {\n    while (EVENTS.length) {\n        const ev = EVENTS.shift();\n        DEAD_EVENTS.push(ev);\n    }\n}\nexport function pushEvent(ev) {\n    if (PAUSED) {\n        console.log(\"PAUSED EVENT\", ev.type);\n    }\n    if (EVENTS.length) {\n        const last = EVENTS[EVENTS.length - 1];\n        if (last.type === ev.type) {\n            if (last.type === MOUSEMOVE) {\n                last.x = ev.x;\n                last.y = ev.y;\n                recycleEvent(ev);\n                return;\n            }\n        }\n    }\n    // Keep clicks down to one per cell if holding down mouse button\n    if (ev.type === CLICK) {\n        if (LAST_CLICK.x == ev.x && LAST_CLICK.y == ev.y) {\n            recycleEvent(ev);\n            return;\n        }\n        LAST_CLICK.x = ev.x;\n        LAST_CLICK.y = ev.y;\n    }\n    else if (ev.type == MOUSEUP) {\n        LAST_CLICK.x = -1;\n        LAST_CLICK.y = -1;\n        recycleEvent(ev);\n        return;\n    }\n    if (CURRENT_HANDLER) {\n        CURRENT_HANDLER(ev);\n    }\n    else if (ev.type === TICK) {\n        const first = EVENTS[0];\n        if (first && first.type === TICK) {\n            first.dt += ev.dt;\n            recycleEvent(ev);\n            return;\n        }\n        EVENTS.unshift(ev); // ticks go first\n    }\n    else {\n        EVENTS.push(ev);\n    }\n}\nexport async function dispatchEvent(ev, km) {\n    let result;\n    let command;\n    km = km || KEYMAP;\n    if (typeof km === \"function\") {\n        command = km;\n    }\n    else if (ev.dir) {\n        command = km.dir;\n    }\n    else if (ev.type === KEYPRESS) {\n        // @ts-ignore\n        command = km[ev.key] || km[ev.code] || km.keypress;\n    }\n    else if (km[ev.type]) {\n        command = km[ev.type];\n    }\n    if (command) {\n        if (typeof command === \"function\") {\n            result = await command.call(km, ev);\n        }\n        else if (commands[command]) {\n            result = await commands[command](ev);\n        }\n        else {\n            Utils.WARN(\"No command found: \" + command);\n        }\n    }\n    if (\"next\" in km && km.next === false) {\n        result = false;\n    }\n    recycleEvent(ev);\n    return result;\n}\nfunction recycleEvent(ev) {\n    DEAD_EVENTS.push(ev);\n}\n// TICK\nexport function makeTickEvent(dt) {\n    const ev = DEAD_EVENTS.pop() || {};\n    ev.shiftKey = false;\n    ev.ctrlKey = false;\n    ev.altKey = false;\n    ev.metaKey = false;\n    ev.type = TICK;\n    ev.key = null;\n    ev.code = null;\n    ev.x = -1;\n    ev.y = -1;\n    ev.dir = null;\n    ev.dt = dt;\n    return ev;\n}\n// KEYBOARD\nexport function makeKeyEvent(e) {\n    let key = e.key;\n    let code = e.code.toLowerCase();\n    if (e.shiftKey) {\n        key = key.toUpperCase();\n        code = code.toUpperCase();\n    }\n    if (e.ctrlKey) {\n        key = \"^\" + key;\n        code = \"^\" + code;\n    }\n    if (e.metaKey) {\n        key = \"#\" + key;\n        code = \"#\" + code;\n    }\n    if (e.altKey) {\n        code = \"/\" + code;\n    }\n    const ev = DEAD_EVENTS.pop() || {};\n    ev.shiftKey = e.shiftKey;\n    ev.ctrlKey = e.ctrlKey;\n    ev.altKey = e.altKey;\n    ev.metaKey = e.metaKey;\n    ev.type = KEYPRESS;\n    ev.key = key;\n    ev.code = code;\n    ev.x = -1;\n    ev.y = -1;\n    ev.clientX = -1;\n    ev.clientY = -1;\n    ev.dir = keyCodeDirection(e.code);\n    ev.dt = 0;\n    return ev;\n}\nexport function keyCodeDirection(key) {\n    const lowerKey = key.toLowerCase();\n    if (lowerKey === \"arrowup\") {\n        return [0, -1];\n    }\n    else if (lowerKey === \"arrowdown\") {\n        return [0, 1];\n    }\n    else if (lowerKey === \"arrowleft\") {\n        return [-1, 0];\n    }\n    else if (lowerKey === \"arrowright\") {\n        return [1, 0];\n    }\n    return null;\n}\nexport function ignoreKeyEvent(e) {\n    return CONTROL_CODES.includes(e.code);\n}\n// MOUSE\nexport var mouse = { x: -1, y: -1 };\nexport function makeMouseEvent(e, x, y) {\n    const ev = DEAD_EVENTS.pop() || {};\n    ev.shiftKey = e.shiftKey;\n    ev.ctrlKey = e.ctrlKey;\n    ev.altKey = e.altKey;\n    ev.metaKey = e.metaKey;\n    ev.type = e.type;\n    if (e.buttons && e.type !== \"mouseup\") {\n        ev.type = CLICK;\n    }\n    ev.key = null;\n    ev.code = null;\n    ev.x = x;\n    ev.y = y;\n    ev.clientX = e.clientX;\n    ev.clientY = e.clientY;\n    ev.dir = null;\n    ev.dt = 0;\n    return ev;\n}\n// IO\nexport function pauseEvents() {\n    if (PAUSED)\n        return;\n    PAUSED = CURRENT_HANDLER;\n    CURRENT_HANDLER = null;\n    // io.debug('events paused');\n}\nexport function resumeEvents() {\n    if (!PAUSED)\n        return;\n    if (CURRENT_HANDLER) {\n        console.warn(\"overwrite CURRENT HANDLER!\");\n    }\n    CURRENT_HANDLER = PAUSED;\n    PAUSED = null;\n    // io.debug('resuming events');\n    if (EVENTS.length && CURRENT_HANDLER) {\n        const e = EVENTS.shift();\n        // io.debug('- processing paused event', e.type);\n        CURRENT_HANDLER(e);\n        // io.recycleEvent(e);\t// DO NOT DO THIS B/C THE HANDLER MAY PUT IT BACK ON THE QUEUE (see tickMs)\n    }\n    // io.debug('events resumed');\n}\nexport function nextEvent(ms, match) {\n    match = match || Utils.TRUE;\n    let elapsed = 0;\n    while (EVENTS.length) {\n        const e = EVENTS.shift();\n        if (e.type === MOUSEMOVE) {\n            mouse.x = e.x;\n            mouse.y = e.y;\n        }\n        if (match(e)) {\n            return Promise.resolve(e);\n        }\n        recycleEvent(e);\n    }\n    let done;\n    if (ms === undefined) {\n        ms = -1; // wait forever\n    }\n    if (ms == 0)\n        return Promise.resolve(null);\n    if (CURRENT_HANDLER) {\n        console.warn(\"OVERWRITE HANDLER - nextEvent\");\n    }\n    else if (EVENTS.length) {\n        console.warn(\"SET HANDLER WITH QUEUED EVENTS - nextEvent\");\n    }\n    CURRENT_HANDLER = (e) => {\n        if (e.type === MOUSEMOVE) {\n            mouse.x = e.x;\n            mouse.y = e.y;\n        }\n        if (e.type === TICK && ms > 0) {\n            elapsed += e.dt;\n            if (elapsed < ms) {\n                return;\n            }\n        }\n        else if (!match(e))\n            return;\n        CURRENT_HANDLER = null;\n        e.dt = elapsed;\n        done(e);\n    };\n    return new Promise((resolve) => (done = resolve));\n}\nexport async function tickMs(ms = 1) {\n    let done;\n    setTimeout(() => done(), ms);\n    return new Promise((resolve) => (done = resolve));\n}\nexport async function nextKeyPress(ms, match) {\n    if (ms === undefined)\n        ms = -1;\n    match = match || Utils.TRUE;\n    function matchingKey(e) {\n        if (e.type !== KEYPRESS)\n            return false;\n        return match(e);\n    }\n    return nextEvent(ms, matchingKey);\n}\nexport async function nextKeyOrClick(ms, matchFn) {\n    if (ms === undefined)\n        ms = -1;\n    matchFn = matchFn || Utils.TRUE;\n    function match(e) {\n        if (e.type !== KEYPRESS && e.type !== CLICK)\n            return false;\n        return matchFn(e);\n    }\n    return nextEvent(ms, match);\n}\nexport async function pause(ms) {\n    const e = await nextKeyOrClick(ms);\n    return e && e.type !== TICK;\n}\nexport function waitForAck() {\n    return pause(5 * 60 * 1000); // 5 min\n}\nexport async function loop(keymap) {\n    let running = true;\n    while (running) {\n        const ev = await nextEvent();\n        if (ev && (await dispatchEvent(ev, keymap))) {\n            running = false;\n        }\n    }\n}\n//# sourceMappingURL=io.js.map","// CREDIT - This is adapted from: http://roguebasin.roguelikedevelopment.org/index.php?title=Improved_Shadowcasting_in_Java\nimport * as Utils from \"./utils\";\nexport class FOV {\n    constructor(strategy) {\n        this._startX = -1;\n        this._startY = -1;\n        this._maxRadius = 100;\n        this._isBlocked = strategy.isBlocked;\n        this._calcRadius = strategy.calcRadius || Utils.calcRadius;\n        this._setVisible = strategy.setVisible;\n        this._hasXY = strategy.hasXY || Utils.TRUE;\n    }\n    calculate(x, y, maxRadius) {\n        this._setVisible(x, y, 1);\n        this._startX = x;\n        this._startY = y;\n        this._maxRadius = maxRadius + 1;\n        // uses the diagonals\n        for (let i = 4; i < 8; ++i) {\n            const d = Utils.DIRS[i];\n            this.castLight(1, 1.0, 0.0, 0, d[0], d[1], 0);\n            this.castLight(1, 1.0, 0.0, d[0], 0, 0, d[1]);\n        }\n    }\n    // NOTE: slope starts a 1 and ends at 0.\n    castLight(row, startSlope, endSlope, xx, xy, yx, yy) {\n        if (row >= this._maxRadius) {\n            // fov.debug('CAST: row=%d, start=%d, end=%d, row >= maxRadius => cancel', row, startSlope.toFixed(2), endSlope.toFixed(2));\n            return;\n        }\n        if (startSlope < endSlope) {\n            // fov.debug('CAST: row=%d, start=%d, end=%d, start < end => cancel', row, startSlope.toFixed(2), endSlope.toFixed(2));\n            return;\n        }\n        // fov.debug('CAST: row=%d, start=%d, end=%d, x=%d,%d, y=%d,%d', row, startSlope.toFixed(2), endSlope.toFixed(2), xx, xy, yx, yy);\n        let nextStart = startSlope;\n        let blocked = false;\n        let deltaY = -row;\n        let currentX, currentY, outerSlope, innerSlope, maxSlope, minSlope = 0;\n        for (let deltaX = -row; deltaX <= 0; deltaX++) {\n            currentX = Math.floor(this._startX + deltaX * xx + deltaY * xy);\n            currentY = Math.floor(this._startY + deltaX * yx + deltaY * yy);\n            outerSlope = (deltaX - 0.5) / (deltaY + 0.5);\n            innerSlope = (deltaX + 0.5) / (deltaY - 0.5);\n            maxSlope = deltaX / (deltaY + 0.5);\n            minSlope = (deltaX + 0.5) / deltaY;\n            if (!this._hasXY(currentX, currentY)) {\n                blocked = true;\n                // nextStart = innerSlope;\n                continue;\n            }\n            // fov.debug('- test %d,%d ... start=%d, min=%d, max=%d, end=%d, dx=%d, dy=%d', currentX, currentY, startSlope.toFixed(2), maxSlope.toFixed(2), minSlope.toFixed(2), endSlope.toFixed(2), deltaX, deltaY);\n            if (startSlope < minSlope) {\n                blocked = this._isBlocked(currentX, currentY);\n                continue;\n            }\n            else if (endSlope > maxSlope) {\n                break;\n            }\n            //check if it's within the lightable area and light if needed\n            const radius = this._calcRadius(deltaX, deltaY);\n            if (radius < this._maxRadius) {\n                const bright = 1 - radius / this._maxRadius;\n                this._setVisible(currentX, currentY, bright);\n                // fov.debug('       - visible');\n            }\n            if (blocked) {\n                //previous cell was a blocking one\n                if (this._isBlocked(currentX, currentY)) {\n                    //hit a wall\n                    // fov.debug('       - blocked ... nextStart: %d', innerSlope.toFixed(2));\n                    nextStart = innerSlope;\n                    continue;\n                }\n                else {\n                    blocked = false;\n                }\n            }\n            else {\n                if (this._isBlocked(currentX, currentY) && row < this._maxRadius) {\n                    //hit a wall within sight line\n                    // fov.debug('       - blocked ... start:%d, end:%d, nextStart: %d', nextStart.toFixed(2), outerSlope.toFixed(2), innerSlope.toFixed(2));\n                    blocked = true;\n                    this.castLight(row + 1, nextStart, outerSlope, xx, xy, yx, yy);\n                    nextStart = innerSlope;\n                }\n            }\n        }\n        if (!blocked) {\n            this.castLight(row + 1, nextStart, endSlope, xx, xy, yx, yy);\n        }\n    }\n}\n//# sourceMappingURL=fov.js.map","import * as Grid from \"./grid\";\nimport * as Utils from \"./utils\";\n// var PATH = {};\n// export { PATH as path };\nexport const FORBIDDEN = -1;\nexport const OBSTRUCTION = -2;\nexport const AVOIDED = 10;\nexport const NO_PATH = 30000;\nfunction makeCostLink(i) {\n    return {\n        distance: 0,\n        cost: 0,\n        index: i,\n        left: null,\n        right: null,\n    };\n}\nfunction makeDijkstraMap(w, h) {\n    return {\n        eightWays: false,\n        front: makeCostLink(-1),\n        links: Grid.makeArray(w * h, (i) => makeCostLink(i)),\n        width: w,\n        height: h,\n    };\n}\nfunction getLink(map, x, y) {\n    return map.links[x + map.width * y];\n}\nconst DIRS = Utils.DIRS;\nfunction update(map) {\n    let dir, dirs;\n    let linkIndex;\n    let left = null, right = null, link = null;\n    dirs = map.eightWays ? 8 : 4;\n    let head = map.front.right;\n    map.front.right = null;\n    while (head != null) {\n        for (dir = 0; dir < dirs; dir++) {\n            linkIndex = head.index + (DIRS[dir][0] + map.width * DIRS[dir][1]);\n            if (linkIndex < 0 || linkIndex >= map.width * map.height)\n                continue;\n            link = map.links[linkIndex];\n            // verify passability\n            if (link.cost < 0)\n                continue;\n            let diagCost = 0;\n            if (dir >= 4) {\n                diagCost = 0.4142;\n                let way1, way1index, way2, way2index;\n                way1index = head.index + DIRS[dir][0];\n                if (way1index < 0 || way1index >= map.width * map.height)\n                    continue;\n                way2index = head.index + map.width * DIRS[dir][1];\n                if (way2index < 0 || way2index >= map.width * map.height)\n                    continue;\n                way1 = map.links[way1index];\n                way2 = map.links[way2index];\n                if (way1.cost == OBSTRUCTION || way2.cost == OBSTRUCTION)\n                    continue;\n            }\n            if (head.distance + link.cost + diagCost < link.distance) {\n                link.distance = head.distance + link.cost + diagCost;\n                // reinsert the touched cell; it'll be close to the beginning of the list now, so\n                // this will be very fast.  start by removing it.\n                if (link.right != null)\n                    link.right.left = link.left;\n                if (link.left != null)\n                    link.left.right = link.right;\n                left = head;\n                right = head.right;\n                while (right != null && right.distance < link.distance) {\n                    left = right;\n                    right = right.right;\n                }\n                if (left != null)\n                    left.right = link;\n                link.right = right;\n                link.left = left;\n                if (right != null)\n                    right.left = link;\n            }\n        }\n        right = head.right;\n        head.left = null;\n        head.right = null;\n        head = right;\n    }\n}\nfunction clear(map, maxDistance, eightWays) {\n    let i;\n    map.eightWays = eightWays;\n    map.front.right = null;\n    for (i = 0; i < map.width * map.height; i++) {\n        map.links[i].distance = maxDistance;\n        map.links[i].left = map.links[i].right = null;\n    }\n}\n// function pdsGetDistance(map, x, y) {\n// \tupdate(map);\n// \treturn getLink(map, x, y).distance;\n// }\nfunction setDistance(map, x, y, distance) {\n    let left, right, link;\n    if (x > 0 && y > 0 && x < map.width - 1 && y < map.height - 1) {\n        link = getLink(map, x, y);\n        if (link.distance > distance) {\n            link.distance = distance;\n            if (link.right != null)\n                link.right.left = link.left;\n            if (link.left != null)\n                link.left.right = link.right;\n            left = map.front;\n            right = map.front.right;\n            while (right != null && right.distance < link.distance) {\n                left = right;\n                right = right.right;\n            }\n            link.right = right;\n            link.left = left;\n            left.right = link;\n            if (right != null)\n                right.left = link;\n        }\n    }\n}\n// function pdsSetCosts(map: DijkstraMap, costMap: Grid.NumGrid) {\n// \tlet i, j;\n// \tfor (i=0; i<map.width; i++) {\n// \t\tfor (j=0; j<map.height; j++) {\n// \t\t\tif (i != 0 && j != 0 && i < map.width - 1 && j < map.height - 1) {\n// \t\t\t\tgetLink(map, i, j).cost = costMap[i][j];\n// \t\t\t} else {\n// \t\t\t\tgetLink(map, i, j).cost = FORBIDDEN;\n// \t\t\t}\n// \t\t}\n// \t}\n// }\nfunction isBoundaryXY(data, x, y) {\n    if (x <= 0 || y <= 0)\n        return true;\n    if (x >= data.length - 1 || y >= data[0].length - 1)\n        return true;\n    return false;\n}\n// function pdsBatchInput(\n//   map: DijkstraMap,\n//   distanceMap: Grid.NumGrid,\n//   costMap: Grid.NumGrid,\n//   maxDistance: number,\n//   eightWays: boolean\n// ) {\n//   let i, j;\n//   map.eightWays = eightWays;\n//   let left: CostLink | null = map.front;\n//   let right: CostLink | null = map.front.right;\n//   map.front.right = null;\n//   for (i = 0; i < map.width; i++) {\n//     for (j = 0; j < map.height; j++) {\n//       let link = getLink(map, i, j);\n//       if (distanceMap != null) {\n//         link.distance = distanceMap[i][j];\n//       } else {\n//         if (costMap != null) {\n//           // totally hackish; refactor\n//           link.distance = maxDistance;\n//         }\n//       }\n//       let cost;\n//       if (isBoundaryXY(costMap, i, j)) {\n//         cost = OBSTRUCTION;\n//       } else {\n//         cost = costMap[i][j];\n//       }\n//       link.cost = cost;\n//       if (cost > 0) {\n//         if (link.distance < maxDistance) {\n//           if (right === null || right.distance > link.distance) {\n//             // left and right are used to traverse the list; if many cells have similar values,\n//             // some time can be saved by not clearing them with each insertion.  this time,\n//             // sadly, we have to start from the front.\n//             left = map.front;\n//             right = map.front.right;\n//           }\n//           while (right !== null && right.distance < link.distance) {\n//             left = right;\n//             right = right.right;\n//           }\n//           link.right = right;\n//           link.left = left;\n//           left.right = link;\n//           if (right != null) right.left = link;\n//           left = link;\n//         } else {\n//           link.right = null;\n//           link.left = null;\n//         }\n//       } else {\n//         link.right = null;\n//         link.left = null;\n//       }\n//     }\n//   }\n// }\nfunction batchOutput(map, distanceMap) {\n    let i, j;\n    update(map);\n    // transfer results to the distanceMap\n    for (i = 0; i < map.width; i++) {\n        for (j = 0; j < map.height; j++) {\n            distanceMap[i][j] = getLink(map, i, j).distance;\n        }\n    }\n}\nvar DIJKSTRA_MAP;\n// function dijkstraScan(\n//   distanceMap: Grid.NumGrid,\n//   costMap: Grid.NumGrid,\n//   useDiagonals = false\n// ) {\n//   // static makeDijkstraMap map;\n//   const width = distanceMap.length;\n//   const height = distanceMap[0].length;\n//   if (\n//     !DIJKSTRA_MAP ||\n//     DIJKSTRA_MAP.width < width ||\n//     DIJKSTRA_MAP.height < height\n//   ) {\n//     DIJKSTRA_MAP = makeDijkstraMap(width, height);\n//   }\n//   DIJKSTRA_MAP.width = width;\n//   DIJKSTRA_MAP.height = height;\n//   pdsBatchInput(DIJKSTRA_MAP, distanceMap, costMap, NO_PATH, useDiagonals);\n//   batchOutput(DIJKSTRA_MAP, distanceMap);\n// }\n//\n// function populateGenericCostMap(costMap, map) {\n//   let i, j;\n//\n// \tfor (i=0; i<map.width; i++) {\n// \t\tfor (j=0; j<map.height; j++) {\n//       if (map.hasTileFlag(i, j, def.T_OBSTRUCTS_PASSABILITY)\n//           && (!map.hasTileMechFlag(i, j, def.TM_IS_SECRET) || (map.discoveredTileFlags(i, j) & def.T_OBSTRUCTS_PASSABILITY)))\n// \t\t\t{\n// \t\t\t\tcostMap[i][j] = map.hasTileFlag(i, j, def.T_OBSTRUCTS_DIAGONAL_MOVEMENT) ? OBSTRUCTION : FORBIDDEN;\n//       } else if (map.hasTileFlag(i, j, def.T_PATHING_BLOCKER & ~def.T_OBSTRUCTS_PASSABILITY)) {\n// \t\t\t\tcostMap[i][j] = FORBIDDEN;\n//       } else {\n//         costMap[i][j] = 1;\n//       }\n//     }\n//   }\n// }\n//\n// GW.path.populateGenericCostMap = populateGenericCostMap;\n//\n//\n// function baseCostFunction(blockingTerrainFlags, traveler, canUseSecretDoors, i, j) {\n// \tlet cost = 1;\n// \tmonst = GW.MAP.actorAt(i, j);\n// \tconst monstFlags = (monst ? (monst.info ? monst.info.flags : monst.flags) : 0) || 0;\n// \tif ((monstFlags & (def.MONST_IMMUNE_TO_WEAPONS | def.MONST_INVULNERABLE))\n// \t\t\t&& (monstFlags & (def.MONST_IMMOBILE | def.MONST_GETS_TURN_ON_ACTIVATION)))\n// \t{\n// \t\t\t// Always avoid damage-immune stationary monsters.\n// \t\tcost = FORBIDDEN;\n// \t} else if (canUseSecretDoors\n// \t\t\t&& GW.MAP.hasTileMechFlag(i, j, TM_IS_SECRET)\n// \t\t\t&& GW.MAP.hasTileFlag(i, j, T_OBSTRUCTS_PASSABILITY)\n// \t\t\t&& !(GW.MAP.hasDiscoveredFlag(i, j) & T_OBSTRUCTS_PASSABILITY))\n// \t{\n// \t\tcost = 1;\n// \t} else if (GW.MAP.hasTileFlag(i, j, T_OBSTRUCTS_PASSABILITY)\n// \t\t\t\t || (traveler && traveler === GW.PLAYER && !(GW.MAP.hasCellFlag(i, j, (REVEALED | MAGIC_MAPPED)))))\n// \t{\n// \t\tcost = GW.MAP.hasTileFlag(i, j, T_OBSTRUCTS_DIAGONAL_MOVEMENT) ? OBSTRUCTION : FORBIDDEN;\n// \t} else if ((traveler && GW.actor.avoidsCell(traveler, i, j)) || GW.MAP.hasTileFlag(i, j, blockingTerrainFlags)) {\n// \t\tcost = FORBIDDEN;\n// \t}\n//\n// \treturn cost;\n// }\n//\n// GW.path.costFn = baseCostFunction;\n// GW.path.simpleCost = baseCostFunction.bind(undefined, 0, null, false);\n// GW.path.costForActor = ((actor) => baseCostFunction.bind(undefined, GW.actor.forbiddenFlags(actor), actor, actor !== GW.PLAYER));\nexport function calculateDistances(distanceMap, destinationX, destinationY, costMap, eightWays = false) {\n    const width = distanceMap.length;\n    const height = distanceMap[0].length;\n    if (!DIJKSTRA_MAP ||\n        DIJKSTRA_MAP.width < width ||\n        DIJKSTRA_MAP.height < height) {\n        DIJKSTRA_MAP = makeDijkstraMap(width, height);\n    }\n    DIJKSTRA_MAP.width = width;\n    DIJKSTRA_MAP.height = height;\n    let i, j;\n    for (i = 0; i < width; i++) {\n        for (j = 0; j < height; j++) {\n            getLink(DIJKSTRA_MAP, i, j).cost = isBoundaryXY(costMap, i, j)\n                ? OBSTRUCTION\n                : costMap[i][j];\n        }\n    }\n    clear(DIJKSTRA_MAP, NO_PATH, eightWays);\n    setDistance(DIJKSTRA_MAP, destinationX, destinationY, 0);\n    batchOutput(DIJKSTRA_MAP, distanceMap);\n    // TODO - Add this where called!\n    //   distanceMap.x = destinationX;\n    //   distanceMap.y = destinationY;\n}\n// function pathingDistance(x1, y1, x2, y2, blockingTerrainFlags, actor) {\n// \tlet retval;\n// \tconst distanceMap = GW.grid.alloc(DUNGEON.width, DUNGEON.height, 0);\n// \tconst costFn = baseCostFunction.bind(undefined, blockingTerrainFlags, actor, true);\n// \tcalculateDistances(distanceMap, x2, y2, costFn, true);\n// \tretval = distanceMap[x1][y1];\n// \tGW.grid.free(distanceMap);\n// \treturn retval;\n// }\n//\n// GW.path.distanceFromTo = pathingDistance;\n// function monstTravelDistance(monst, x2, y2, blockingTerrainFlags) {\n// \tlet retval;\n// \tconst distanceMap = GW.grid.alloc(DUNGEON.width, DUNGEON.height, 0);\n// \tcalculateDistances(distanceMap, x2, y2, blockingTerrainFlags, monst, true, true);\n// \tretval = distanceMap[monst.x][monst.y];\n// \tGW.grid.free(distanceMap);\n// \treturn retval;\n// }\n//\n// GW.actor.travelDistance = monstTravelDistance;\n// Returns null if there are no beneficial moves.\n// If preferDiagonals is true, we will prefer diagonal moves.\n// Always rolls downhill on the distance map.\n// If monst is provided, do not return a direction pointing to\n// a cell that the monster avoids.\nexport function nextStep(distanceMap, x, y, isBlocked, useDiagonals = false) {\n    let newX, newY, bestScore;\n    let dir, bestDir;\n    let blocked;\n    // brogueAssert(coordinatesAreInMap(x, y));\n    bestScore = 0;\n    bestDir = Utils.NO_DIRECTION;\n    for (dir = 0; dir < (useDiagonals ? 8 : 4); ++dir) {\n        newX = x + Utils.DIRS[dir][0];\n        newY = y + Utils.DIRS[dir][1];\n        blocked = isBlocked(newX, newY, x, y, distanceMap);\n        if (!blocked && distanceMap[x][y] - distanceMap[newX][newY] > bestScore) {\n            bestDir = dir;\n            bestScore = distanceMap[x][y] - distanceMap[newX][newY];\n        }\n    }\n    return Utils.DIRS[bestDir] || null;\n}\nfunction getClosestValidLocationOnMap(distanceMap, x, y) {\n    let i, j, dist, closestDistance, lowestMapScore;\n    let locX = -1;\n    let locY = -1;\n    const width = distanceMap.length;\n    const height = distanceMap[0].length;\n    closestDistance = 10000;\n    lowestMapScore = 10000;\n    for (i = 1; i < width - 1; i++) {\n        for (j = 1; j < height - 1; j++) {\n            if (distanceMap[i][j] >= 0 && distanceMap[i][j] < NO_PATH) {\n                dist = (i - x) * (i - x) + (j - y) * (j - y);\n                if (dist < closestDistance ||\n                    (dist == closestDistance && distanceMap[i][j] < lowestMapScore)) {\n                    locX = i;\n                    locY = j;\n                    closestDistance = dist;\n                    lowestMapScore = distanceMap[i][j];\n                }\n            }\n        }\n    }\n    if (locX >= 0)\n        return [locX, locY];\n    return null;\n}\n// Populates path[][] with a list of coordinates starting at origin and traversing down the map. Returns the number of steps in the path.\nexport function getPath(distanceMap, originX, originY, isBlocked) {\n    // actor = actor || GW.PLAYER;\n    let x = originX;\n    let y = originY;\n    let steps = 0;\n    if (distanceMap[x][y] < 0 || distanceMap[x][y] >= NO_PATH) {\n        const loc = getClosestValidLocationOnMap(distanceMap, x, y);\n        if (loc) {\n            x = loc[0];\n            y = loc[1];\n        }\n    }\n    const path = [[x, y]];\n    let dir;\n    do {\n        dir = nextStep(distanceMap, x, y, isBlocked, true);\n        if (dir) {\n            x += dir[0];\n            y += dir[1];\n            // path[steps][0] = x;\n            // path[steps][1] = y;\n            path.push([x, y]);\n            steps++;\n            // brogueAssert(coordinatesAreInMap(x, y));\n        }\n    } while (dir);\n    return steps ? path : null;\n}\n//\n// GW.path.from = getMonsterPathOnMap;\n//# sourceMappingURL=path.js.map","import * as Utils from \"./utils\";\n/**\n * Data for an event listener.\n */\nexport class Listener {\n    /**\n     * Creates a Listener.\n     * @param {Function} fn The listener function.\n     * @param {Object} [context=null] The context to invoke the listener with.\n     * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n     */\n    constructor(fn, context, once = false) {\n        this.fn = fn;\n        this.context = context || null;\n        this.once = once || false;\n        this.next = null;\n    }\n    /**\n     * Compares this Listener to the parameters.\n     * @param {Function} fn - The function\n     * @param {Object} [context] - The context Object.\n     * @param {Boolean} [once] - Whether or not it is a one time handler.\n     * @returns Whether or not this Listener matches the parameters.\n     */\n    matches(fn, context, once) {\n        return (this.fn === fn &&\n            (once === undefined || once == this.once) &&\n            (!context || this.context === context));\n    }\n}\nvar EVENTS = {};\n/**\n * Add a listener for a given event.\n *\n * @param {String} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {Listener}\n */\nexport function addListener(event, fn, context, once = false) {\n    if (typeof fn !== \"function\") {\n        throw new TypeError(\"The listener must be a function\");\n    }\n    const listener = new Listener(fn, context || null, once);\n    Utils.addToChain(EVENTS, event, listener);\n    return listener;\n}\n/**\n * Add a listener for a given event.\n *\n * @param {String} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {Listener}\n */\nexport function on(event, fn, context, once = false) {\n    return addListener(event, fn, context, once);\n}\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nexport function once(event, fn, context) {\n    return addListener(event, fn, context, true);\n}\n/**\n * Remove the listeners of a given event.\n *\n * @param {String} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nexport function removeListener(event, fn, context, once = false) {\n    if (!EVENTS[event])\n        return;\n    if (!fn) {\n        clearEvent(event);\n        return;\n    }\n    Utils.eachChain(EVENTS[event], (obj) => {\n        const l = obj;\n        if (l.matches(fn, context, once)) {\n            Utils.removeFromChain(EVENTS, event, l);\n        }\n    });\n}\n/**\n * Remove the listeners of a given event.\n *\n * @param {String} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nexport function off(event, fn, context, once = false) {\n    removeListener(event, fn, context, once);\n}\n/**\n * Clear event by name.\n *\n * @param {String} evt The Event name.\n */\nexport function clearEvent(event) {\n    EVENTS[event] = null;\n}\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nexport function removeAllListeners(event) {\n    if (event) {\n        if (EVENTS[event])\n            clearEvent(event);\n    }\n    else {\n        EVENTS = {};\n    }\n}\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {String} event The event name.\n * @param {...*} args The additional arguments to the event handlers.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nexport async function emit(...args) {\n    const event = args[0];\n    if (!EVENTS[event])\n        return false; // no events to send\n    let listener = EVENTS[event];\n    while (listener) {\n        let next = listener.next;\n        if (listener.once)\n            Utils.removeFromChain(EVENTS, event, listener);\n        await listener.fn.apply(listener.context, args);\n        listener = next;\n    }\n    return true;\n}\n//# sourceMappingURL=events.js.map","import * as utils_1 from \"./utils\";\nexport { utils_1 as utils };\nimport * as range_1 from \"./range\";\nexport { range_1 as range };\nimport * as flag_1 from \"./flag\";\nexport { flag_1 as flag };\nimport * as grid_1 from \"./grid\";\nexport { grid_1 as grid };\nimport * as io_1 from \"./io\";\nexport { io_1 as io };\nimport * as fov_1 from \"./fov\";\nexport { fov_1 as fov };\nimport * as path_1 from \"./path\";\nexport { path_1 as path };\nimport * as events_1 from \"./events\";\nexport { events_1 as events };\nexport { flags } from \"./flag\";\nexport { cosmetic, random, Random } from \"./random\";\nexport var data = {};\n//# sourceMappingURL=gw.js.map"],"names":["DIRS","CLOCK_DIRS","TRUE","IDENTITY","x","clamp","v","min","max","src","y","distanceBetween","x1","y1","x2","y2","Math","abs","calcRadius","dirBetween","toX","toY","diffX","diffY","absX","absY","sign","setDefaults","obj","def","custom","dest","Object","keys","forEach","key","origKey","defValue","parts","split","length","shift","undefined","ERROR","current","Array","isArray","slice","message","Error","WARN","args","console","warn","eachChain","item","fn","index","next","addToChain","name","entry","removeFromChain","root","prev","a","b","pct","dx","dy","floor","dir","x0","y0","findIndex","result","push","diff","steps","c","last","step","currentXValue","maxXValue","sin","PI","omit","map","t","trim","includes","updated","copy","clear","nullify","clone","assignField","field","val","search","concat","fields","data","f","member","_default","arg","some","av","arr","reduce","count","chain","RANDOM_CONFIG","make","random","bind","lotteryDrawArray","rand","frequencies","i","maxFreq","randIndex","range","Random","[object Object]","this","_fn","opts","seed","cosmetic","value","Number","MAX_SAFE_INTEGER","number","lo","hi","sides","addend","total","mult","weights","entries","_","weight","lotteryDrawObject","list","values","fromIndex","toIndex","r","buf","arguments","n","shuffle","percent","outOf","clumps","numSides","Range","lower","upper","rng","_rng","clumped","config","JSON","stringify","RE","results","exec","parseInt","base","std","parseFloat","flags","N","flagObj","inverse","out","fl","join","u","startsWith","substring","flagName","flag","Utils.DIRS","CDIRS","Utils.CLOCK_DIRS","makeArray","l","fill","_formatGridValue","String","fromCharCode","charCodeAt","Grid","w","h","super","_width","_height","width","height","j","only4dirs","maxIndex","d","hasXY","col","radius","bounds","left","top","right","bottom","update","updateRect","updateCircle","findValue","replaceValue","from","match","fmtFn","dumpRect","Utils.clamp","output","line","padStart","log","bestLoc","bestDistance","dist","Utils.distanceBetween","chance","deterministic","locationCount","k","candidateLocs","loc","testFn","arcCount","oldX","oldY","newX","newY","Utils.IDENTITY","GRID_CACHE","NumGrid","grid","pop","resize","indexOf","findValueMin","findValueMax","fillValue","eligibleValueMin","eligibleValueMax","fillCount","floodFillRange","closestMatchingLoc","validValue","randomMatchingLoc","matchingLocNear","least","targetValue","leastPositiveValue","matchValue","numberOfCells","matchFn","fillFn","floodFill","birthParameters","survivalParameters","nbCount","buffer2","alloc","didSomething","free","roundCount","minBlobWidth","minBlobHeight","maxBlobWidth","maxBlobHeight","percentSeeded","blobNumber","blobSize","topBlobNumber","topBlobSize","topBlobMinX","topBlobMinY","topBlobMaxX","topBlobMaxY","blobWidth","blobHeight","foundACellThisLine","round","_cellularAutomataRound","destGrid","srcGrid","srcToDestX","srcToDestY","s","destX","destY","isOpen","solutionDir","oppX","oppY","fnOpen","onto","commands","KEYMAP","EVENTS","DEAD_EVENTS","LAST_CLICK","KEYPRESS","MOUSEMOVE","CLICK","TICK","MOUSEUP","CONTROL_CODES","CURRENT_HANDLER","PAUSED","async","dispatchEvent","ev","km","command","type","code","keypress","call","Utils.WARN","recycleEvent","keyCodeDirection","lowerKey","toLowerCase","mouse","nextEvent","ms","Utils.TRUE","done","elapsed","e","Promise","resolve","dt","nextKeyOrClick","pause","id","keymap","first","unshift","shiftKey","ctrlKey","altKey","metaKey","toUpperCase","clientX","clientY","buttons","setTimeout","running","strategy","_startX","_startY","_maxRadius","_isBlocked","isBlocked","_calcRadius","Utils.calcRadius","_setVisible","setVisible","_hasXY","maxRadius","castLight","row","startSlope","endSlope","xx","xy","yx","yy","currentX","currentY","outerSlope","innerSlope","maxSlope","nextStart","blocked","deltaY","minSlope","deltaX","bright","NO_PATH","makeCostLink","distance","cost","getLink","links","isBoundaryXY","batchOutput","distanceMap","dirs","linkIndex","link","eightWays","head","front","diagCost","way1","way1index","way2","way2index","DIJKSTRA_MAP","nextStep","useDiagonals","bestScore","bestDir","destinationX","destinationY","costMap","Grid.makeArray","maxDistance","setDistance","originX","originY","closestDistance","lowestMapScore","locX","locY","getClosestValidLocationOnMap","path","Listener","context","once","addListener","event","TypeError","listener","Utils.addToChain","removeListener","Utils.eachChain","matches","Utils.removeFromChain","clearEvent","apply"],"mappings":"gPAWO,MAAMA,EAAO,CAChB,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,EAAE,GAAI,GACN,EAAE,EAAG,IAeIC,EAAa,CACtB,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,GAAI,GACN,EAAE,EAAG,GACL,EAAE,EAAG,IAGF,SAASC,IACZ,OAAO,EAWJ,SAASC,EAASC,GACrB,OAAOA,EASJ,SAASC,EAAMC,EAAGC,EAAKC,GAC1B,OAAIF,EAAIC,EACGA,EACPD,EAAIE,EACGA,EACJF,EAEJ,SAASF,EAAEK,GAEd,OAAOA,EAAIL,GAAKK,EAAI,IAAM,EAEvB,SAASC,EAAED,GAEd,OAAOA,EAAIC,GAAKD,EAAI,IAAM,EAwBvB,SAASE,EAAgBC,EAAIC,EAAIC,EAAIC,GACxC,MAAMX,EAAIY,KAAKC,IAAIL,EAAKE,GAClBJ,EAAIM,KAAKC,IAAIJ,EAAKE,GAExB,OAAOX,EAAIM,EAAI,GADHM,KAAKT,IAAIH,EAAGM,GAMrB,SAASQ,EAAWd,EAAGM,GAC1B,OAAOC,EAAgB,EAAG,EAAGP,EAAGM,GAE7B,SAASS,EAAWf,EAAGM,EAAGU,EAAKC,GAClC,IAAIC,EAAQF,EAAMhB,EACdmB,EAAQF,EAAMX,EAClB,GAAIY,GAASC,EAAO,CAChB,MAAMC,EAAOR,KAAKC,IAAIK,GAChBG,EAAOT,KAAKC,IAAIM,GAClBC,GAAQ,EAAIC,EACZF,EAAQ,EAEHE,GAAQ,EAAID,IACjBF,EAAQ,GAGhB,MAAO,CAACN,KAAKU,KAAKJ,GAAQN,KAAKU,KAAKH,IA4GjC,SAASI,EAAYC,EAAKC,EAAKC,EAAS,MAC3C,IAAIC,EACJC,OAAOC,KAAKJ,GAAKK,SAASC,IACtB,MAAMC,EAAUD,EAChB,IAAIE,EAAWR,EAAIM,GACnBJ,EAAOH,EAEP,MAAMU,EAAQH,EAAII,MAAM,KACxB,KAAOD,EAAME,OAAS,GAClBL,EAAMG,EAAMG,aACMC,IAAdX,EAAKI,GACLJ,EAAOA,EAAKI,GAAO,GAEO,iBAAdJ,EAAKI,GACjBQ,EAAM,2DAA6DP,GAGnEL,EAAOA,EAAKI,GAGpBA,EAAMG,EAAMG,QACZ,IAAIG,EAAUb,EAAKI,GAEfL,GAAUA,EAAOC,EAAMI,EAAKS,EAASP,SAGpBK,IAAZE,IACY,OAAbP,EACAN,EAAKI,GAAO,KAEPU,MAAMC,QAAQT,GACnBN,EAAKI,GAAOE,EAASU,QAGrBhB,EAAKI,GAAOE,MA8CrB,SAASM,EAAMK,GAClB,MAAM,IAAIC,MAAMD,GAEb,SAASE,KAAQC,GACpBC,QAAQC,QAAQF,GAuCb,SAASG,EAAUC,EAAMC,GAC5B,IAAIC,EAAQ,EACZ,KAAOF,GAAM,CACT,MAAMG,EAAOH,EAAKG,KAClBF,EAAGD,EAAME,KACTF,EAAOG,EAEX,OAAOD,EAEJ,SAASE,EAAW/B,EAAKgC,EAAMC,GAGlC,OAFAA,EAAMH,KAAO9B,EAAIgC,IAAS,KAC1BhC,EAAIgC,GAAQC,GACL,EAEJ,SAASC,EAAgBlC,EAAKgC,EAAMC,GACvC,MAAME,EAAOnC,EAAIgC,GACjB,GAAIG,IAASF,EAGT,OAFAjC,EAAIgC,GAAQC,EAAMH,MAAQ,KAC1BG,EAAMH,KAAO,MACN,EAEN,IAAKK,EACN,OAAO,EAEN,CACD,IAAIC,EAAOD,EACPnB,EAAUoB,EAAKN,KACnB,KAAOd,GAAWA,IAAYiB,GAC1BG,EAAOpB,EACPA,EAAUoB,EAAKN,KAEnB,GAAId,IAAYiB,EAGZ,OAFAG,EAAKN,KAAOd,EAAQc,MAAQ,KAC5BG,EAAMH,KAAO,MACN,EAGf,OAAO,6CAxXiB,KACV,QACG,OACD,OACA,WACI,aACE,YACD,UACF,oBAehB,0BAIA,WACH,OAAO,OAEJ,WACH,OAAO,QAEJ,WACH,OAAO,qCA2BJ,SAAgB3B,EAAMtB,GACzBsB,EAAK3B,EAAIA,EAAEK,GACXsB,EAAKrB,EAAIA,EAAED,UAER,SAAesB,EAAMtB,GACxBsB,EAAK3B,GAAKA,EAAEK,GACZsB,EAAKrB,GAAKA,EAAED,aAET,SAAkBsB,EAAMtB,GAC3B,OAAOsB,EAAK3B,GAAKA,EAAEK,IAAQsB,EAAKrB,GAAKA,EAAED,WAEpC,SAAgBwD,EAAGC,EAAGC,GACrBA,EAAM,IACNA,GAAY,KAEhBA,EAAM9D,EAAM8D,EAAK,EAAG,GACpB,MAAMC,EAAKhE,EAAE8D,GAAK9D,EAAE6D,GACdI,EAAK3D,EAAEwD,GAAKxD,EAAEuD,GAGpB,MAAO,CAFI7D,EAAE6D,GAAKjD,KAAKsD,MAAMF,EAAKD,GACvBzD,EAAEuD,GAAKjD,KAAKsD,MAAMD,EAAKF,sCAS/B,SAAwBF,EAAGC,GAC9B,OAAOvD,EAAgBP,EAAE6D,GAAIvD,EAAEuD,GAAI7D,EAAE8D,GAAIxD,EAAEwD,yCAoBxC,SAAmBD,EAAGC,GACzB,OAAO/C,EAAWf,EAAE6D,GAAIvD,EAAEuD,GAAI7D,EAAE8D,GAAIxD,EAAEwD,cAEnC,SAAkBK,GACrB,MAAMC,EAAKpE,EAAEmE,GACPE,EAAK/D,EAAE6D,GACb,OAAOvE,EAAK0E,WAAWT,GAAMA,EAAE,IAAMO,GAAMP,EAAE,IAAMQ,mBAEhD,SAAuBR,EAAGC,GAC7B,OAAID,EAAE,GAAKC,EAAE,IAAM,GAEfD,EAAE,GAAKC,EAAE,IAAM,aAIhB,SAAmBD,EAAGC,GACzB,OAAOD,EAAE,IAAMC,EAAE,IAAMD,EAAE,IAAMC,EAAE,cAE9B,SAAmBK,GACtB,MAAMI,EAAS,CAACJ,GAahB,OAZc,GAAVA,EAAI,IACJI,EAAOC,KAAK,CAAC,EAAGL,EAAI,KACpBI,EAAOC,KAAK,EAAE,EAAGL,EAAI,MAEN,GAAVA,EAAI,IACTI,EAAOC,KAAK,CAACL,EAAI,GAAI,IACrBI,EAAOC,KAAK,CAACL,EAAI,IAAK,MAGtBI,EAAOC,KAAK,CAACL,EAAI,GAAI,IACrBI,EAAOC,KAAK,CAAC,EAAGL,EAAI,MAEjBI,cAEJ,SAAoBV,EAAGC,EAAGV,GAC7B,MAAMgB,EAAKpE,EAAE6D,GACPQ,EAAK/D,EAAEuD,GACPY,EAAO,CAACzE,EAAE8D,GAAKM,EAAI9D,EAAEwD,GAAKO,GAC1BK,EAAQ9D,KAAKC,IAAI4D,EAAK,IAAM7D,KAAKC,IAAI4D,EAAK,IAC1CE,EAAI,CAAC,EAAG,GACRC,EAAO,CAAC,MAAO,OACrB,IAAK,IAAIC,EAAO,EAAGA,GAAQH,IAASG,EAChCF,EAAE,GAAKP,EAAKxD,KAAKsD,MAAOO,EAAK,GAAKI,EAAQH,GAC1CC,EAAE,GAAKN,EAAKzD,KAAKsD,MAAOO,EAAK,GAAKI,EAAQH,GACtCC,EAAE,IAAMC,EAAK,IAAMD,EAAE,IAAMC,EAAK,IAChCxB,EAAGuB,EAAE,GAAIA,EAAE,IAEfC,EAAK,GAAKD,EAAE,GACZC,EAAK,GAAKD,EAAE,yBAKb,SAA8BG,EAAeC,GAChD,OAAOnE,KAAKsD,MAAM,IAAMtD,KAAKoE,IAAKpE,KAAKqE,GAAKH,EAAiBC,oBAqC1D,SAAwBG,EAAMvD,EAAMtB,GACnB,iBAAT6E,IACPA,EAAOA,EAAK/C,MAAM,SAASgD,KAAKC,GAAMA,EAAEC,UAE5CzD,OAAOC,KAAKxB,GAAKyB,SAASC,IAClBmD,EAAKI,SAASvD,IAxC1B,SAAqBJ,EAAMtB,EAAK0B,GAC5B,MAAMS,EAAUb,EAAKI,GACfwD,EAAUlF,EAAI0B,GAChBS,GAAWA,EAAQgD,MAAQD,EAC3B/C,EAAQgD,KAAKD,GAER/C,GAAWA,EAAQiD,QAAUF,EAClC/C,EAAQiD,QAEHjD,GAAWA,EAAQkD,UAAYH,EACpC/C,EAAQkD,UAEHH,GAAWA,EAAQI,MACxBhE,EAAKI,GAAOwD,EAAQI,QAEfJ,GAAW9C,MAAMC,QAAQ6C,GAC9B5D,EAAKI,GAAOwD,EAAQ5C,QAEfH,GAAWC,MAAMC,QAAQF,GAC9BA,EAAQJ,OAAS,EAGjBT,EAAKI,GAAOwD,EAoBZK,CAAYjE,EAAMtB,EAAK0B,kBAGxB,SAAoBP,EAAKqE,EAAOC,QAChBxD,IAAfd,EAAIqE,KACJrE,EAAIqE,GAASC,+BA6Cd,SAAsBtE,EAAKC,GAuB9B,OAAOF,EAAYC,EAAKC,GAtBxB,SAAgBE,EAAMI,EAAKS,EAASP,GAChC,QAAIF,EAAIgE,OAAO,aAAe,KAEzBvD,EAGsB,iBAAXA,EACZA,EAAUA,EAAQL,MAAM,QAAQgD,KAAKC,GAAMA,EAAEC,SAEvC5C,MAAMC,QAAQF,KACpBA,EAAU,CAACA,IANXA,EAAU,GAQU,iBAAbP,EACPA,EAAWA,EAASE,MAAM,QAAQgD,KAAKC,GAAMA,EAAEC,SAEzC5C,MAAMC,QAAQT,KACpBA,EAAW,CAACA,IAGhBN,EAAKI,GAAOE,EAAS+D,OAAOxD,IACrB,YAIR,SAAchB,KAAQyE,GACzB,MAAMC,EAAO,GAOb,OANAD,EAAOnE,SAASqE,IACZ,MAAMjG,EAAIsB,EAAI2E,QACJ7D,IAANpC,IACAgG,EAAKC,GAAKjG,MAGXgG,eAEJ,SAAqB1E,GACxBI,OAAOC,KAAKL,GAAKM,SAASC,GAASP,EAAIO,QAAOO,2BAQ3C,SAAgBd,EAAK4E,EAAQC,GAChC,MAAMnG,EAAIsB,EAAI4E,GACd,YAAU9D,IAANpC,EACOmG,EACJnG,YAEJ,SAAkB2F,KAAU9C,GAC/B,IAAK,IAAIuD,KAAOvD,EAAM,CAClB,GAAmB,iBAARuD,GAAoB7D,MAAMC,QAAQ4D,GACzC,OAAOA,EAEX,QAAmBhE,IAAfgE,EAAIT,GACJ,OAAOS,EAAIT,qBAKhB,SAAyBhC,EAAGC,GAC/B,OAAOD,EAAE0C,MAAMC,GAAO1C,EAAEwB,SAASkB,UAE9B,SAAaC,GAChB,OAAOA,EAAIC,QAAO,CAAC7C,EAAGC,IAAMD,EAAIC,iBAE7B,SAAqBH,GACxB,IAAIgD,EAAQ,EACZ,KAAOhD,GACHgD,GAAS,EACThD,EAAOA,EAAKL,KAEhB,OAAOqD,iBAEJ,SAAuBC,EAAOnD,GACjC,KAAOmD,GAASA,IAAUnD,GACtBmD,EAAQA,EAAMtD,KAElB,OAAOsD,IAAUnD,+CCtWrB,MAAMoD,EAAgB,CAClBC,KAAM,IACKlG,KAAKmG,OAAOC,KAAKpG,OAGhC,SAASqG,EAAiBC,EAAMC,GAC5B,IAAIC,EAAGC,EAASC,EAEhB,IADAD,EAAU,EACLD,EAAI,EAAGA,EAAID,EAAY/E,OAAQgF,IAChCC,GAAWF,EAAYC,GAE3B,GAAIC,GAAW,EAEX,OADArE,QAAQC,KAAK,gCAAiCkE,EAAaA,EAAY/E,QAChE,EAGX,IADAkF,EAAYJ,EAAKK,MAAM,EAAGF,EAAU,GAC/BD,EAAI,EAAGA,EAAID,EAAY/E,OAAQgF,IAAK,CACrC,GAAID,EAAYC,GAAKE,EACjB,OAAOF,EAGPE,GAAaH,EAAYC,GAIjC,OADApE,QAAQC,KAAK,uBAAwBkE,EAAaA,EAAY/E,QACvD,EAQJ,MAAMoF,EACTC,cACIC,KAAKC,IAAMd,EAAcC,OAE7BW,iBAAiBG,GACb,GAAIA,EAAKd,KAAM,CACX,GAAyB,mBAAdc,EAAKd,KACZ,MAAM,IAAIjE,MAAM,6CACpB,GAAgC,mBAArB+E,EAAKd,KAAK,OACjB,MAAM,IAAIjE,MAAM,iFACpBgE,EAAcC,KAAOc,EAAKd,KAC1BC,EAAOc,OACPC,EAASD,QAGjBJ,KAAK3B,GACD4B,KAAKC,IAAMd,EAAcC,KAAKhB,GAElC2B,QACI,OAAOC,KAAKC,MAEhBF,QACI,OAAOC,KAAKK,QAEhBN,OAAOrH,EAAM,GAET,OADAA,EAAMA,GAAO4H,OAAOC,iBACbrH,KAAKsD,MAAMwD,KAAKC,MAAQvH,GAEnCqH,IAAIrH,EAAM,GACN,OAAOsH,KAAKQ,OAAO9H,GAEvBqH,MAAMU,EAAIC,GACN,GAAIA,GAAMD,EACN,OAAOC,EACX,MAAM3D,EAAO2D,EAAKD,EAAK,EACvB,OAAOA,EAAKT,KAAKQ,OAAOzD,GAE5BgD,KAAKd,EAAO0B,EAAOC,EAAS,GACxB,IAAIC,EAAQ,EACRC,EAAO,EACP7B,EAAQ,IACRA,GAASA,EACT6B,GAAQ,GAEZF,EAASA,GAAU,EACnB,IAAK,IAAIlB,EAAI,EAAGA,EAAIT,IAASS,EACzBmB,GAASb,KAAKH,MAAM,EAAGc,GAG3B,OADAE,GAASC,EACFD,EAAQD,EAEnBb,SAASgB,GACL,OAAIhG,MAAMC,QAAQ+F,GACPxB,EAAiBS,KAAMe,GA3D1C,SAA2BvB,EAAMuB,GAC7B,MAAMC,EAAU9G,OAAO8G,QAAQD,GACzBtB,EAAcuB,EAAQvD,KAAI,EAAEwD,EAAGC,KAAYA,IAEjD,OAAOF,EADOzB,EAAiBC,EAAMC,IACf,GAyDX0B,CAAkBnB,KAAMe,GAEnChB,KAAKqB,GAID,OAHKrG,MAAMC,QAAQoG,KACfA,EAAOlH,OAAOmH,OAAOD,IAElBA,EAAKpB,KAAKH,MAAM,EAAGuB,EAAK1G,OAAS,IAE5CqF,IAAIjG,GACA,OAAOkG,KAAKvE,KAAKvB,OAAOC,KAAKL,IAEjCiG,QAAQqB,EAAME,EAAY,EAAGC,EAAU,GAKnC,IAAI7B,EAAG8B,EAAGC,EAGV,IAPwB,GAApBC,UAAUhH,SACV6G,EAAUD,EACVA,EAAY,GAGhBC,EAAUA,GAAWH,EAAK1G,OAErBgF,EADL4B,EAAYA,GAAa,EACL5B,EAAI6B,EAAS7B,IAC7B8B,EAAIxB,KAAKH,MAAMyB,EAAWC,EAAU,GAChC7B,GAAK8B,IACLC,EAAML,EAAKI,GACXJ,EAAKI,GAAKJ,EAAK1B,GACf0B,EAAK1B,GAAK+B,GAGlB,OAAOL,EAEXrB,SAAS4B,GACL,MAAMP,EAAO,GACb,IAAK,IAAI1B,EAAI,EAAGA,EAAIiC,EAAGjC,IACnB0B,EAAK1B,GAAKA,EAEd,OAAOM,KAAK4B,QAAQR,GAExBrB,OAAO8B,EAASC,EAAQ,KACpB,QAAID,GAAW,KAEXA,GAAWC,GAER9B,KAAKQ,OAAOsB,GAASD,GAIhC9B,QAAQU,EAAIC,EAAIqB,GACZ,GAAIrB,GAAMD,EACN,OAAOA,EAEX,GAAIsB,GAAU,EACV,OAAO/B,KAAKH,MAAMY,EAAIC,GAE1B,IAAIhB,EAAGmB,EAAQ,EAAGmB,EAAW9I,KAAKsD,OAAOkE,EAAKD,GAAMsB,GACpD,IAAKrC,EAAI,EAAGA,GAAKgB,EAAKD,GAAMsB,EAAQrC,IAChCmB,GAASb,KAAKH,MAAM,EAAGmC,EAAW,GAEtC,KAAOtC,EAAIqC,EAAQrC,IACfmB,GAASb,KAAKH,MAAM,EAAGmC,GAE3B,OAAOnB,EAAQJ,SAGVpB,EAAS,IAAIS,EACbM,EAAW,IAAIN,ECtJrB,MAAMmC,EACTlC,YAAYmC,EAAOC,EAAQ,EAAGJ,EAAS,EAAGK,GACtCpC,KAAKqC,KAAOD,GAAO/C,EACftE,MAAMC,QAAQkH,IACdH,EAASG,EAAM,GACfC,EAAQD,EAAM,GACdA,EAAQA,EAAM,IAETA,aAAiBD,IACtBF,EAASG,EAAMH,OACfI,EAAQD,EAAMxB,GACdwB,EAAQA,EAAMzB,IAEd0B,EAAQD,KACPC,EAAOD,GAAS,CAACA,EAAOC,IAE7BnC,KAAKS,GAAKyB,GAAS,EACnBlC,KAAKU,GAAKyB,GAASnC,KAAKS,GACxBT,KAAK+B,OAASA,GAAU,EAE5BhC,QACI,OAAOC,KAAKqC,KAAKC,QAAQtC,KAAKS,GAAIT,KAAKU,GAAIV,KAAK+B,QAEpDhC,WACI,OAAIC,KAAKS,IAAMT,KAAKU,GACT,GAAKV,KAAKS,GAEd,GAAGT,KAAKS,MAAMT,KAAKU,yCAG3B,SAAc6B,EAAQH,GACzB,IAAKG,EACD,OAAO,IAAIN,EAAM,EAAG,EAAG,EAAGG,GAC9B,GAAIG,aAAkBN,EAClB,OAAOM,EAEX,GAAqB,mBAAVA,EACP,MAAM,IAAIpH,MAAM,uDACpB,GAAIoH,MAAAA,EACA,OAAO,IAAIN,EAAM,EAAG,EAAG,EAAGG,GAC9B,GAAqB,iBAAVG,EACP,OAAO,IAAIN,EAAMM,EAAQA,EAAQ,EAAGH,GAExC,IAAe,IAAXG,IAA8B,IAAXA,EACnB,MAAM,IAAIpH,MAAM,0BAA4BoH,GAChD,GAAIxH,MAAMC,QAAQuH,GACd,OAAO,IAAIN,EAAMM,EAAO,GAAIA,EAAO,GAAIA,EAAO,GAAIH,GAEtD,GAAsB,iBAAXG,EACP,MAAM,IAAIpH,MAAM,4CAA8CqH,KAAKC,UAAUF,IAEjF,GAAqB,GAAjBA,EAAO7H,OACP,OAAO,IAAIuH,EAAM,EAAG,EAAG,EAAGG,GAC9B,MAAMM,EAAK,iGACX,IAAIC,EACJ,KAAuC,QAA/BA,EAAUD,EAAGE,KAAKL,KAAmB,CACzC,GAAII,EAAQ,GAAI,CACZ,IAAI1D,EAAQqB,OAAOuC,SAASF,EAAQ,KAAO,EAC3C,MAAMhC,EAAQL,OAAOuC,SAASF,EAAQ,IAChC/B,EAASN,OAAOuC,SAASF,EAAQ,KAAO,EAG9C,OAAO,IAAIV,EAFGrB,EAAS3B,EACT2B,EAAS3B,EAAQ0B,EACA1B,EAAOmD,GAErC,GAAIO,EAAQ,IAAMA,EAAQ,GAAI,CAC/B,MAAMlK,EAAM6H,OAAOuC,SAASF,EAAQ,IAC9BjK,EAAM4H,OAAOuC,SAASF,EAAQ,IAC9BZ,EAASzB,OAAOuC,SAASF,EAAQ,IACvC,OAAO,IAAIV,EAAMxJ,EAAKC,EAAKqJ,EAAQK,GAElC,GAAIO,EAAQ,IAAMA,EAAQ,GAAI,CAC/B,MAAMG,EAAOxC,OAAOuC,SAASF,EAAQ,IAC/BI,EAAMzC,OAAOuC,SAASF,EAAQ,IACpC,OAAO,IAAIV,EAAMa,EAAO,EAAIC,EAAKD,EAAO,EAAIC,EAAK,EAAGX,GAEnD,GAAIO,EAAQ,GAAI,CACjB,MAAMnK,EAAI8H,OAAO0C,WAAWL,EAAQ,IACpC,OAAO,IAAIV,EAAMzJ,EAAGA,EAAG,EAAG4J,IAGlC,MAAM,IAAIjH,MAAM,uBAAyBoH,WCVhCU,EAAQ,4BArEd,SAAYC,GACf,OAAO,GAAKA,YAET,SAAkBC,EAAS9C,GAC9B,MAAM+C,EAAUlJ,OAAO8G,QAAQmC,GAASnE,QAAO,CAACqE,EAAKtH,KACjD,MAAO1B,EAAKgG,GAAStE,EAGrB,OAFIsE,IACAgD,EAAIhD,GAAShG,GACVgJ,IACR,IACGA,EAAM,GACZ,IAAK,IAAI1H,EAAQ,EAAGA,EAAQ,KAAMA,EAAO,CACrC,MAAM2H,EAAK,GAAK3H,EACZ0E,EAAQiD,GACRD,EAAIvG,KAAKsG,EAAQE,IAGzB,OAAOD,EAAIE,KAAK,aAEb,SAAczJ,KAAQuB,GACzB,IAAIwB,EAAS,EACb,IAAK,IAAIlB,EAAQ,EAAGA,EAAQN,EAAKX,SAAUiB,EAAO,CAC9C,IAAI0E,EAAQhF,EAAKM,QACHf,IAAVyF,IAEgB,iBAATA,GAIe,iBAAVA,IACZA,EAAQA,EACH5F,MAAM,QACNgD,KAAKC,GAAMA,EAAEC,SACbF,KAAK+F,IACN,MAAM7B,EAAIrB,OAAOuC,SAASW,GAC1B,OAAI7B,GAAK,EACEA,EACJ6B,MAGXzI,MAAMC,QAAQqF,IACdA,EAAMjG,SAAS5B,IACX,GAAgB,iBAALA,EAEP,IADAA,EAAIA,EAAEmF,QACA8F,WAAW,KAAM,CAEnB,MAAMhF,EAAI3E,EAAItB,EAAEkL,UAAU,IAC1B7G,IAAW4B,MAEV,CAED,MAAMA,EAAI3E,EAAItB,GACViG,IACA5B,GAAU4B,QAIP,IAANjG,EAELqE,EAAS,EAGTA,GAAUrE,MApClBqE,GAAUwD,GAyClB,OAAOxD,mBAGJ,SAAiB8G,EAAUC,GAE9B,OADAX,EAAMU,GAAYC,EACXA,ICxEX,MAAM1L,EAAO2L,EACPC,EAAQC,EACP,SAASC,EAAUC,EAAGvI,GACzB,QAAWd,IAAPc,EACA,OAAO,IAAIX,MAAMkJ,GAAGC,KAAK,GAC7BxI,EAAKA,QAAa,GAClB,MAAMqD,EAAM,IAAIhE,MAAMkJ,GACtB,IAAK,IAAIvE,EAAI,EAAGA,EAAIuE,IAAKvE,EACrBX,EAAIW,GAAKhE,EAAGgE,GAEhB,OAAOX,EAEX,SAASoF,EAAiB3L,GACtB,OAAU,IAANA,EACO,KAEI,IAANA,EACE,IAEFA,EAAI,GACF,GAAKA,EAEPA,EAAI,GACF4L,OAAOC,aAAa,IAAIC,WAAW,GAAK9L,EAAI,IAE9CA,EAAI,GACF4L,OAAOC,aAAa,IAAIC,WAAW,GAAK9L,EAAI,GAAK,IAEtC,iBAANA,EACLA,EAAE,GAGF,IAGR,MAAM+L,UAAaxJ,MACtBgF,YAAYyE,EAAGC,EAAGjM,GACdkM,MAAMF,GACN,IAAK,IAAIlM,EAAI,EAAGA,EAAIkM,IAAKlM,EAEjB0H,KAAK1H,GADQ,mBAANE,EACG,IAAIuC,MAAM0J,GACfP,KAAK,GACLzG,KAAI,CAACwD,EAAGvB,IAAMlH,EAAEF,EAAGoH,KAGd,IAAI3E,MAAM0J,GAAGP,KAAK1L,GAGpCwH,KAAK2E,OAASH,EACdxE,KAAK4E,QAAUH,EAEnBI,YACI,OAAO7E,KAAK2E,OAEhBG,aACI,OAAO9E,KAAK4E,QAGhB7E,QAAQrE,GACJ,IAAIgE,EAAGqF,EACP,IAAKrF,EAAI,EAAGA,EAAIM,KAAK6E,MAAOnF,IACxB,IAAKqF,EAAI,EAAGA,EAAI/E,KAAK8E,OAAQC,IACzBrJ,EAAGsE,KAAKN,GAAGqF,GAAIrF,EAAGqF,EAAG/E,MAIjCD,aAAazH,EAAGM,EAAG8C,EAAIsJ,GAAY,GAC/B,MAAMC,EAAWD,EAAY,EAAI,EACjC,IAAK,IAAIE,EAAI,EAAGA,EAAID,IAAYC,EAAG,CAC/B,MAAMzI,EAAMvE,EAAKgN,GACXxF,EAAIpH,EAAImE,EAAI,GACZsI,EAAInM,EAAI6D,EAAI,GACduD,KAAKmF,MAAMzF,EAAGqF,IACdrJ,EAAGsE,KAAKN,GAAGqF,GAAIrF,EAAGqF,EAAG/E,OAIjCD,QAAQzH,EAAGM,EAAG4L,EAAGC,EAAG/I,GAChB8I,EAAItL,KAAKT,IAAIuH,KAAK6E,MAAQvM,EAAGkM,GAC7BC,EAAIvL,KAAKT,IAAIuH,KAAK8E,OAASlM,EAAG6L,GAC9B,IAAK,IAAI/E,EAAIpH,EAAGoH,EAAIpH,EAAIkM,IAAK9E,EACzB,IAAK,IAAIqF,EAAInM,EAAGmM,EAAInM,EAAI6L,IAAKM,EACzBrJ,EAAGsE,KAAKN,GAAGqF,GAAIrF,EAAGqF,EAAG/E,MAKjCD,IAAIrE,GACA,OAAOgJ,MAAMjH,KAAI,CAAC2H,EAAK9M,IACZ8M,EAAI3H,KAAI,CAACjF,EAAGI,IAAM8C,EAAGlD,EAAGF,EAAGM,EAAGoH,UAG7CD,UAAUzH,EAAGM,EAAGyM,EAAQ3J,GACpB,IAAIgE,EAAGqF,EACP,IAAKrF,EAAIxG,KAAKR,IAAI,EAAGJ,EAAI+M,EAAS,GAAI3F,EAAIxG,KAAKT,IAAIuH,KAAK6E,MAAOvM,EAAI+M,EAAS,GAAI3F,IAC5E,IAAKqF,EAAI7L,KAAKR,IAAI,EAAGE,EAAIyM,EAAS,GAAIN,EAAI7L,KAAKT,IAAIuH,KAAK8E,OAAQlM,EAAIyM,EAAS,GAAIN,IACzE/E,KAAKmF,MAAMzF,EAAGqF,KACbrF,EAAIpH,IAAMoH,EAAIpH,IAAMyM,EAAInM,IAAMmM,EAAInM,GAAKyM,EAASA,EAASA,GAE1D3J,EAAGsE,KAAKN,GAAGqF,GAAIrF,EAAGqF,EAAG/E,MAKrCD,MAAMzH,EAAGM,GACL,OAAON,GAAK,GAAKM,GAAK,GAAKN,EAAI0H,KAAK6E,OAASjM,EAAIoH,KAAK8E,OAE1D/E,aAAazH,EAAGM,GACZ,OAAQoH,KAAKmF,MAAM7M,EAAGM,KACZ,GAALN,GAAUA,GAAK0H,KAAK6E,MAAQ,GAAU,GAALjM,GAAUA,GAAKoH,KAAK8E,OAAS,GAEvE/E,aACI,MAAMuF,EAAS,CAAEC,KAAMvF,KAAK6E,MAAOW,IAAKxF,KAAK8E,OAAQW,MAAO,EAAGC,OAAQ,GAavE,OAZA1F,KAAK5F,SAAQ,CAAC5B,EAAGkH,EAAGqF,KACXvM,IAED8M,EAAOC,KAAO7F,IACd4F,EAAOC,KAAO7F,GACd4F,EAAOG,MAAQ/F,IACf4F,EAAOG,MAAQ/F,GACf4F,EAAOE,IAAMT,IACbO,EAAOE,IAAMT,GACbO,EAAOI,OAASX,IAChBO,EAAOI,OAASX,OAEjBO,EAEXvF,OAAOrE,GACH,IAAIgE,EAAGqF,EACP,IAAKrF,EAAI,EAAGA,EAAIM,KAAK6E,MAAOnF,IACxB,IAAKqF,EAAI,EAAGA,EAAI/E,KAAK8E,OAAQC,IACzB/E,KAAKN,GAAGqF,GAAKrJ,EAAGsE,KAAKN,GAAGqF,GAAIrF,EAAGqF,EAAG/E,MAI9CD,WAAWzH,EAAGM,EAAGiM,EAAOC,EAAQpJ,GAC5B,IAAIgE,EAAGqF,EACP,IAAKrF,EAAIpH,EAAGoH,EAAIpH,EAAIuM,EAAOnF,IACvB,IAAKqF,EAAInM,EAAGmM,EAAInM,EAAIkM,EAAQC,IACpB/E,KAAKmF,MAAMzF,EAAGqF,KACd/E,KAAKN,GAAGqF,GAAKrJ,EAAGsE,KAAKN,GAAGqF,GAAIrF,EAAGqF,EAAG/E,OAKlDD,aAAazH,EAAGM,EAAGyM,EAAQ3J,GACvB,IAAIgE,EAAGqF,EACP,IAAKrF,EAAIxG,KAAKR,IAAI,EAAGJ,EAAI+M,EAAS,GAAI3F,EAAIxG,KAAKT,IAAIuH,KAAK6E,MAAOvM,EAAI+M,EAAS,GAAI3F,IAC5E,IAAKqF,EAAI7L,KAAKR,IAAI,EAAGE,EAAIyM,EAAS,GAAIN,EAAI7L,KAAKT,IAAIuH,KAAK8E,OAAQlM,EAAIyM,EAAS,GAAIN,IACzE/E,KAAKmF,MAAMzF,EAAGqF,KACbrF,EAAIpH,IAAMoH,EAAIpH,IAAMyM,EAAInM,IAAMmM,EAAInM,GAAKyM,EAASA,EAASA,IAE1DrF,KAAKN,GAAGqF,GAAKrJ,EAAGsE,KAAKN,GAAGqF,GAAIrF,EAAGqF,EAAG/E,OAMlDD,KAAKvH,GACD,MAAMkD,EAAkB,mBAANlD,EAAmBA,EAAI,IAAMA,EAC/CwH,KAAK2F,OAAOjK,GAEhBqE,SAASzH,EAAGM,EAAG4L,EAAGC,EAAGjM,GACjB,MAAMkD,EAAkB,mBAANlD,EAAmBA,EAAI,IAAMA,EAC/CwH,KAAK4F,WAAWtN,EAAGM,EAAG4L,EAAGC,EAAG/I,GAEhCqE,WAAWzH,EAAGM,EAAGyM,EAAQ7M,GACrB,MAAMkD,EAAkB,mBAANlD,EAAmBA,EAAI,IAAMA,EAC/CwH,KAAK6F,aAAavN,EAAGM,EAAGyM,EAAQ3J,GAEpCqE,QAAQ+F,EAAWC,GACf/F,KAAK2F,QAAQnN,GAAOA,GAAKsN,EAAYC,EAAevN,IAExDuH,KAAKiG,GAEDhG,KAAK2F,QAAO,CAAC1E,EAAGvB,EAAGqF,IAAMiB,EAAKtG,GAAGqF,KAErChF,MAAMkG,GACF,MAAMvK,EAAsB,mBAAVuK,EACZA,EACCzN,GAAMA,GAAKyN,EAClB,IAAIhH,EAAQ,EAKZ,OAJAe,KAAK5F,SAAQ,CAAC5B,EAAGkH,EAAGqF,KACZrJ,EAAGlD,EAAGkH,EAAGqF,EAAG/E,SACVf,KAEHA,EAEXc,KAAKmG,GACDlG,KAAKmG,SAAS,EAAG,EAAGnG,KAAK6E,MAAO7E,KAAK8E,OAAQoB,GAEjDnG,SAASwF,EAAMC,EAAKX,EAAOC,EAAQoB,GAC/B,IAAIxG,EAAGqF,EACPmB,EAAQA,GAAS/B,EACjBoB,EAAOa,EAAYb,EAAM,EAAGvF,KAAK6E,MAAQ,GACzCW,EAAMY,EAAYZ,EAAK,EAAGxF,KAAK8E,OAAS,GACxC,MAAMW,EAAQW,EAAYb,EAAOV,EAAO,EAAG7E,KAAK6E,MAAQ,GAClDa,EAASU,EAAYZ,EAAMV,EAAQ,EAAG9E,KAAK8E,OAAS,GAC1D,IAAIuB,EAAS,GACb,IAAKtB,EAAIS,EAAKT,GAAKW,EAAQX,IAAK,CAC5B,IAAIuB,GAAavB,EAAI,KAAKwB,SAAS,EAAG,KACtC,IAAK7G,EAAI6F,EAAM7F,GAAK+F,EAAO/F,IAAK,CACxBA,EAAI,IAAM,IACV4G,GAAQ,KAGZA,GAAQJ,EADElG,KAAKN,GAAGqF,GACDrF,EAAGqF,GAAG,GAE3BsB,EAAOvJ,KAAKwJ,GAEhBhL,QAAQkL,IAAIH,EAAO9C,KAAK,OAE5BxD,WAAWzH,EAAGM,EAAGyM,GACbrF,KAAKmG,SAAS7N,EAAI+M,EAAQzM,EAAIyM,EAAQ,EAAIA,EAAQ,EAAIA,GAE1DtF,mBAAmBzH,EAAGM,EAAG8C,GACrB,IAAI+K,EAAU,EAAE,GAAI,GAChBC,EAAe1G,KAAK6E,MAAQ7E,KAAK8E,OAerC,OAdA9E,KAAK5F,SAAQ,CAAC5B,EAAGkH,EAAGqF,KAChB,GAAIrJ,EAAGlD,EAAGkH,EAAGqF,EAAG/E,MAAO,CACnB,MAAM2G,EAAOC,EAAsBtO,EAAGM,EAAG8G,EAAGqF,GACxC4B,EAAOD,GACPD,EAAQ,GAAK/G,EACb+G,EAAQ,GAAK1B,EACb2B,EAAeC,GAEVA,GAAQD,GAAgBrH,EAAOwH,OAAO,MAC3CJ,EAAQ,GAAK/G,EACb+G,EAAQ,GAAK1B,OAIlB0B,EAEX1G,iBAAiBvH,GACb,MAAMkD,EAAkB,mBAANlD,EAAmBA,EAAK4F,GAAQA,GAAO5F,EACzD,IAAK,IAAIkH,EAAI,EAAGA,EAAIM,KAAK6E,QAASnF,EAC9B,IAAK,IAAIqF,EAAI,EAAGA,EAAI/E,KAAK8E,SAAUC,EAC/B,GAAIrJ,EAAGsE,KAAKN,GAAGqF,GAAIrF,EAAGqF,EAAG/E,MACrB,MAAO,CAACN,EAAGqF,GAIvB,MAAO,EAAE,GAAI,GAEjBhF,kBAAkBvH,EAAGsO,GAAgB,GACjC,IACIpH,EAAGqF,EAAGpJ,EADNoL,EAAgB,EAEpB,MAAMrL,EAAkB,mBAANlD,EAAmBA,EAAK4F,GAAQA,GAAO5F,EAOzD,GANAuO,EAAgB,EAChB/G,KAAK5F,SAAQ,CAAC5B,EAAGkH,EAAGqF,KACZrJ,EAAGlD,EAAGkH,EAAGqF,EAAG/E,OACZ+G,OAGa,GAAjBA,EACA,MAAO,EAAE,GAAI,GAQjB,IALIpL,EADKmL,EACG5N,KAAKsD,MAAMuK,EAAgB,GAG3B1H,EAAOQ,MAAM,EAAGkH,EAAgB,GAEvCrH,EAAI,EAAGA,EAAIM,KAAK6E,OAASlJ,GAAS,EAAG+D,IACtC,IAAKqF,EAAI,EAAGA,EAAI/E,KAAK8E,QAAUnJ,GAAS,EAAGoJ,IACvC,GAAIrJ,EAAGsE,KAAKN,GAAGqF,GAAIrF,EAAGqF,EAAG/E,MAAO,CAC5B,GAAa,GAATrE,EACA,MAAO,CAAC+D,EAAGqF,GAEfpJ,IAIZ,MAAO,EAAE,GAAI,GAEjBoE,gBAAgBzH,EAAGM,EAAGJ,EAAGsO,GAAgB,GACrC,IACIpH,EAAGqF,EAAGiC,EAAGC,EAAerH,EADxBsH,EAAM,EAAE,GAAI,GAEhB,MAAMxL,EAAkB,mBAANlD,EAAmBA,EAAK4F,GAAQA,GAAO5F,EAGzD,IAFAyO,EAAgB,EAEXD,EAAI,EAAGA,EAAI9N,KAAKR,IAAIsH,KAAK6E,MAAO7E,KAAK8E,UAAYmC,EAAeD,IACjE,IAAKtH,EAAIpH,EAAI0O,EAAGtH,GAAKpH,EAAI0O,EAAGtH,IACxB,IAAKqF,EAAInM,EAAIoO,EAAGjC,GAAKnM,EAAIoO,EAAGjC,IACpB/E,KAAKmF,MAAMzF,EAAGqF,KACbrF,GAAKpH,EAAI0O,GAAKtH,GAAKpH,EAAI0O,GAAKjC,GAAKnM,EAAIoO,GAAKjC,GAAKnM,EAAIoO,IACpDtL,EAAGsE,KAAKN,GAAGqF,GAAIrF,EAAGqF,EAAG/E,OACrBiH,IAKhB,GAAqB,GAAjBA,EACA,MAAO,EAAE,GAAI,GASjB,IALIrH,EADAkH,EACY,EAAI5N,KAAKsD,MAAMyK,EAAgB,GAG/B,EAAI5H,EAAOmB,OAAOyG,GAE7BD,EAAI,EAAGA,EAAI9N,KAAKR,IAAIsH,KAAK6E,MAAO7E,KAAK8E,QAASkC,IAC/C,IAAKtH,EAAIpH,EAAI0O,EAAGtH,GAAKpH,EAAI0O,EAAGtH,IACxB,IAAKqF,EAAInM,EAAIoO,EAAGjC,GAAKnM,EAAIoO,EAAGjC,IACxB,GAAI/E,KAAKmF,MAAMzF,EAAGqF,KACbrF,GAAKpH,EAAI0O,GAAKtH,GAAKpH,EAAI0O,GAAKjC,GAAKnM,EAAIoO,GAAKjC,GAAKnM,EAAIoO,IACpDtL,EAAGsE,KAAKN,GAAGqF,GAAIrF,EAAGqF,EAAG/E,OACF,KAAbJ,EAGF,OAFAsH,EAAI,GAAKxH,EACTwH,EAAI,GAAKnC,EACFmC,EAO3B,MAAO,EAAE,GAAI,GASjBnH,SAASzH,EAAGM,EAAGuO,GACX,IAAIC,EAAU3K,EAAK4K,EAAMC,EAAMC,EAAMC,EAIrC,IAFAL,EAASA,GAAUM,EACnBL,EAAW,EACN3K,EAAM,EAAGA,EAAMqH,EAAMpJ,OAAQ+B,IAC9B4K,EAAO/O,EAAIwL,GAAOrH,EAAM,GAAK,GAAG,GAChC6K,EAAO1O,EAAIkL,GAAOrH,EAAM,GAAK,GAAG,GAChC8K,EAAOjP,EAAIwL,EAAMrH,GAAK,GACtB+K,EAAO5O,EAAIkL,EAAMrH,GAAK,IAEjBuD,KAAKmF,MAAMoC,EAAMC,IAClBL,EAAOnH,KAAKuH,GAAMC,GAAOD,EAAMC,EAAMxH,SACpCA,KAAKmF,MAAMkC,EAAMC,IAASH,EAAOnH,KAAKqH,GAAMC,GAAOD,EAAMC,EAAMtH,QAChEoH,IAGR,OAAOlO,KAAKsD,MAAM4K,EAAW,IAGrC,MAAMM,EAAa,GASZ,MAAMC,UAAgBpD,EACzBxE,YAAYyE,EAAGC,EAAGjM,EAAI,GAClBkM,MAAMF,EAAGC,EAAGjM,GAEhBuH,aAAayE,EAAGC,EAAGjM,EAAI,GACnB,IAAKgM,IAAMC,EACP,MAAM,IAAItJ,MAAM,oDAGpB,IAAIyM,EAAOF,EAAWG,MACtB,OAAKD,GAILA,EAAKE,OAAOtD,EAAGC,EAAGjM,GACXoP,GAHI,IAAID,EAAQnD,EAAGC,EAAGjM,GAKjCuH,YAAY6H,GACR,GAAIA,EAAM,CACN,GAAIF,EAAWK,QAAQH,IAAS,EAC5B,OACJF,EAAW5K,KAAK8K,IAKxB7H,OAAO8E,EAAOC,EAAQtM,EAAI,GACtB,MAAMkD,EAAkB,mBAANlD,EAAmBA,EAAI,IAAMA,EAC/C,KAAOwH,KAAKtF,OAASmK,GACjB7E,KAAKlD,KAAK,IACdkD,KAAKtF,OAASmK,EACd,IAAIvM,EAAI,EACJM,EAAI,EACR,IAAKN,EAAI,EAAGA,EAAIuM,IAASvM,EAAG,CACxB,MAAM8M,EAAMpF,KAAK1H,GACjB,IAAKM,EAAI,EAAGA,EAAIkM,IAAUlM,EACtBwM,EAAIxM,GAAK8C,EAAGpD,EAAGM,GAEnBwM,EAAI1K,OAASoK,EAEjB9E,KAAK2E,OAASE,EACd7E,KAAK4E,QAAUE,OACAlK,IAAXoF,KAAK1H,IACL0H,KAAK1H,OAAIsC,EACToF,KAAKpH,OAAIgC,GAGjBmF,iBAAiBiI,EAAcC,EAAcC,GACzClI,KAAK2F,QAAQnN,GACLA,GAAKwP,GAAgBxP,GAAKyP,EACnBC,EAEJ1P,IAKfuH,eAAezH,EAAGM,EAAGuP,EAAmB,EAAGC,EAAmB,EAAGF,EAAY,GACzE,IAAIzL,EACA8K,EAAMC,EAAMa,EAAY,EAC5B,GAAIH,GAAaC,GAAoBD,GAAaE,EAC9C,MAAM,IAAIjN,MAAM,2BAGpB,IADA6E,KAAK1H,GAAGM,GAAKsP,EACRzL,EAAM,EAAGA,EAAM,EAAGA,IACnB8K,EAAOjP,EAAIJ,EAAKuE,GAAK,GACrB+K,EAAO5O,EAAIV,EAAKuE,GAAK,GACjBuD,KAAKmF,MAAMoC,EAAMC,IACjBxH,KAAKuH,GAAMC,IAASW,GACpBnI,KAAKuH,GAAMC,IAASY,IACpBC,GAAarI,KAAKsI,eAAef,EAAMC,EAAMW,EAAkBC,EAAkBF,IAGzF,OAAOG,EAEXtI,SACIC,KAAK2F,QAAQnN,GAAOA,EAAI,EAAI,IAEhCuH,oBAAoBzH,EAAGM,EAAGyH,EAAQ,GAC9B,OAAOL,KAAKuI,mBAAmBjQ,EAAGM,GAAIJ,GAAMA,GAAK6H,IAIrDN,mBAAmByI,EAAa,GAC5B,OAAOxI,KAAKyI,mBAAmBjQ,GAAMA,GAAKgQ,IAE9CzI,qBAAqBzH,EAAGM,EAAGkO,GAAgB,GACvC,OAAO9G,KAAK0I,gBAAgBpQ,EAAGM,GAAIJ,KAAQA,GAAGsO,GAElD/G,qBACI,IAAI4I,EAAQrI,OAAOC,iBAMnB,OALAP,KAAK5F,SAAS5B,IACNA,EAAI,GAAKA,EAAImQ,IACbA,EAAQnQ,MAGTmQ,EAEX5I,uBAAuB+G,GAAgB,GACnC,MAAM8B,EAAc5I,KAAK6I,qBACzB,OAAO7I,KAAKyI,mBAAmBjQ,GAAMA,GAAKoQ,GAAa9B,GAG3D/G,UAAUzH,EAAGM,EAAGkQ,EAAYZ,GACxB,IAAIzL,EACA8K,EAAMC,EAAMuB,EAAgB,EAChC,MAAMC,EAA+B,mBAAdF,EACjBA,EACCtQ,GAAMA,GAAKsQ,EACZG,EAA6B,mBAAbf,EAA0BA,EAAY,IAAMA,EAGlE,IAFAlI,KAAK1H,GAAGM,GAAKqQ,EAAOjJ,KAAK1H,GAAGM,GAAIN,EAAGM,EAAGoH,MAEjCvD,EAAM,EAAGA,EAAM,EAAGA,IACnB8K,EAAOjP,EAAIJ,EAAKuE,GAAK,GACrB+K,EAAO5O,EAAIV,EAAKuE,GAAK,GAChBuD,KAAKmF,MAAMoC,EAAMC,IAGlBwB,EAAQhJ,KAAKuH,GAAMC,GAAOD,EAAMC,EAAMxH,QAEtC+I,GAAiB/I,KAAKkJ,UAAU3B,EAAMC,EAAMwB,EAASC,IAG7D,OAAOF,EAEXhJ,uBAAuBoJ,EAA+BC,GAClD,IAAI1J,EAAGqF,EAAGsE,EAAS9B,EAAMC,EACrB/K,EACA6M,EACJA,EAAU3B,EAAQ4B,MAAMvJ,KAAK6E,MAAO7E,KAAK8E,QACzCwE,EAAQxL,KAAKkC,MACb,IAAIwJ,GAAe,EACnB,IAAK9J,EAAI,EAAGA,EAAIM,KAAK6E,MAAOnF,IACxB,IAAKqF,EAAI,EAAGA,EAAI/E,KAAK8E,OAAQC,IAAK,CAE9B,IADAsE,EAAU,EACL5M,EAAM,EAAGA,EAAMvE,EAAKwC,OAAQ+B,IAC7B8K,EAAO7H,EAAIxH,EAAKuE,GAAK,GACrB+K,EAAOzC,EAAI7M,EAAKuE,GAAK,GACjBuD,KAAKmF,MAAMoC,EAAMC,IAAS8B,EAAQ/B,GAAMC,IACxC6B,IAGHC,EAAQ5J,GAAGqF,IAAkC,KAA5BoE,EAAgBE,GAI7BC,EAAQ5J,GAAGqF,IAAqC,KAA/BqE,EAAmBC,KAIzCrJ,KAAKN,GAAGqF,GAAK,EACbyE,GAAe,IARfxJ,KAAKN,GAAGqF,GAAK,EACbyE,GAAe,GAY3B,OADA7B,EAAQ8B,KAAKH,GACNE,EAGXzJ,SAAS2J,EAAYC,EAAcC,EAAeC,EAAcC,EAAeC,EAAeZ,EAAiBC,GAC3G,IAAI1J,EAAGqF,EAAGiC,EACNgD,EAAYC,EAAUC,EAAeC,EACrCC,EAAaC,EAAaC,EAAaC,EAAaC,EAAWC,EAC/DC,EACAf,GAAgBE,IAChBF,EAAezQ,KAAKyR,MAAM,IAAOd,GACjCA,EAAe3Q,KAAKyR,MAAM,KAAOd,IAEjCD,GAAiBE,IACjBF,EAAgB1Q,KAAKyR,MAAM,IAAOb,GAClCA,EAAgB5Q,KAAKyR,MAAM,KAAOb,IAEtC,MAAMvE,EAAOrM,KAAKsD,OAAOwD,KAAK6E,MAAQgF,GAAgB,GAChDrE,EAAMtM,KAAKsD,OAAOwD,KAAK8E,OAASgF,GAAiB,GAEvD,EAAG,CAIC,IAFA9J,KAAKkE,KAAK,GAELxE,EAAI,EAAGA,EAAImK,EAAcnK,IAC1B,IAAKqF,EAAI,EAAGA,EAAI+E,EAAe/E,IAC3B/E,KAAKN,EAAI6F,GAAMR,EAAIS,GAAOnG,EAAOwH,OAAOkD,GAAiB,EAAI,EAIrE,IAAK/C,EAAI,EAAGA,EAAI0C,EAAY1C,IACnBhH,KAAK4K,uBAAuBzB,EAAiBC,KAC9CpC,EAAI0C,GAYZ,IARAS,EAAc,EACdD,EAAgB,EAChBE,EAAcpK,KAAK6E,MACnByF,EAAc,EACdD,EAAcrK,KAAK8E,OACnByF,EAAc,EAEdP,EAAa,EACRtK,EAAI,EAAGA,EAAIM,KAAK6E,MAAOnF,IACxB,IAAKqF,EAAI,EAAGA,EAAI/E,KAAK8E,OAAQC,IACP,GAAd/E,KAAKN,GAAGqF,KAGRkF,EAAWjK,KAAKkJ,UAAUxJ,EAAGqF,EAAG,EAAGiF,GAC/BC,EAAWE,IAEXA,EAAcF,EACdC,EAAgBF,GAEpBA,KAMZ,IAAKtK,EAAI,EAAGA,EAAIM,KAAK6E,MAAOnF,IAAK,CAE7B,IADAgL,GAAqB,EAChB3F,EAAI,EAAGA,EAAI/E,KAAK8E,OAAQC,IACzB,GAAI/E,KAAKN,GAAGqF,IAAMmF,EAAe,CAC7BQ,GAAqB,EACrB,MAGJA,IACIhL,EAAI0K,IACJA,EAAc1K,GAEdA,EAAI4K,IACJA,EAAc5K,IAK1B,IAAKqF,EAAI,EAAGA,EAAI/E,KAAK8E,OAAQC,IAAK,CAE9B,IADA2F,GAAqB,EAChBhL,EAAI,EAAGA,EAAIM,KAAK6E,MAAOnF,IACxB,GAAIM,KAAKN,GAAGqF,IAAMmF,EAAe,CAC7BQ,GAAqB,EACrB,MAGJA,IACI3F,EAAIsF,IACJA,EAActF,GAEdA,EAAIwF,IACJA,EAAcxF,IAI1ByF,EAAYF,EAAcF,EAAc,EACxCK,EAAaF,EAAcF,EAAc,QACpCG,EAAYb,GACjBc,EAAab,GACI,GAAjBM,GAEJ,IAAKxK,EAAI,EAAGA,EAAIM,KAAK6E,MAAOnF,IACxB,IAAKqF,EAAI,EAAGA,EAAI/E,KAAK8E,OAAQC,IACrB/E,KAAKN,GAAGqF,IAAMmF,EACdlK,KAAKN,GAAGqF,GAAK,EAGb/E,KAAKN,GAAGqF,GAAK,EAKzB,MAAO,CACHzM,EAAG8R,EACHxR,EAAGyR,EACHxF,MAAO2F,EACP1F,OAAQ2F,IAKb,MAAMlB,EAAQ5B,EAAQ4B,MAAMjK,KAAKqI,GAC3B8B,EAAO9B,EAAQ8B,KAAKnK,KAAKqI,0EAC/B,SAAcnD,EAAGC,EAAGjM,GACvB,YAAUoC,IAANpC,EACO,IAAImP,EAAQnD,EAAGC,EAAG,GACZ,iBAANjM,EACA,IAAImP,EAAQnD,EAAGC,EAAGjM,GACtB,IAAI+L,EAAKC,EAAGC,EAAGjM,cAEnB,SAAmBqS,EAAUC,EAASC,EAAYC,EAAY3K,GACjE,MAAM3E,EAAsB,mBAAV2E,EACZA,EACA,CAACY,EAAGgK,EAAG3O,EAAIC,IAAQsO,EAASvO,GAAIC,GAAM8D,GAAS4K,EACrDH,EAAQ1Q,SAAQ,CAAC6C,EAAGyC,EAAGqF,KACnB,MAAMmG,EAAQxL,EAAIqL,EACZI,EAAQpG,EAAIiG,EACbH,EAAS1F,MAAM+F,EAAOC,IAEtBlO,GAELvB,EAAGmP,EAASK,GAAOC,GAAQlO,EAAGiO,EAAOC,EAAOzL,EAAGqF,EAAG8F,EAAUC,2BAO7D,SAA6BlD,EAAMtP,EAAGM,EAAGwS,GAC5C,IAAI3O,EAAK4O,EACL9D,EAAMC,EAAM8D,EAAMC,EACtB,MAAMC,EAA2B,mBAAXJ,EAChBA,EACC5S,GAAMA,GAAK4S,EAElB,IADAC,GJxoBwB,EIyoBnB5O,EAAM,EAAGA,EAAM,EAAGA,IAKnB,GAJA8K,EAAOjP,EAAIJ,EAAKuE,GAAK,GACrB+K,EAAO5O,EAAIV,EAAKuE,GAAK,GACrB6O,EAAOhT,EAAIJ,EAAKuE,GAAK,GACrB8O,EAAO3S,EAAIV,EAAKuE,GAAK,GACjBmL,EAAKzC,MAAMmG,EAAMC,IACjB3D,EAAKzC,MAAMoC,EAAMC,IACjBgE,EAAO5D,EAAK0D,GAAMC,GAAOD,EAAMC,EAAM3D,GAAO,CAE5C,IJlpBgB,GIkpBZyD,EAEA,OJppBY,EIspBhBA,EAAc5O,EAGtB,OAAO4O,gBAGJ,SAAsBI,EAAMtP,EAAGC,GAClCA,EAAIA,GAAKqP,EACTA,EAAK9F,QAAO,CAAC1E,EAAGvB,EAAGqF,IAAM5I,EAAEuD,GAAGqF,IAAM3I,EAAEsD,GAAGqF,YAGtC,SAAe0G,EAAMtP,EAAGC,GAC3BA,EAAIA,GAAKqP,EACTA,EAAK9F,QAAO,CAAC1E,EAAGvB,EAAGqF,IAAM3I,EAAEsD,GAAGqF,IAAM5I,EAAEuD,GAAGqF,OCvrBlC2G,EAAW,GAItB,IAAIC,EAAS,GACb,MAAMC,EAAS,GACTC,EAAc,GACdC,EAAa,CAAExT,GAAI,EAAGM,GAAI,GACnBmT,EAAW,WACXC,EAAY,YACZC,EAAQ,QACRC,EAAO,OACPC,EAAU,UACjBC,EAAgB,CAClB,YACA,aACA,cACA,eACA,UACA,WACA,WACA,aAEJ,IAAIC,EAAkB,KAClBC,EAAS,KA2DNC,eAAeC,EAAcC,EAAIC,GACpC,IAAI7P,EACA8P,EA8BJ,MA5BkB,mBADlBD,EAAKA,GAAMf,GAEPgB,EAAUD,EAELD,EAAGhQ,IACRkQ,EAAUD,EAAGjQ,IAERgQ,EAAGG,OAASb,EAEjBY,EAAUD,EAAGD,EAAGpS,MAAQqS,EAAGD,EAAGI,OAASH,EAAGI,SAErCJ,EAAGD,EAAGG,QACXD,EAAUD,EAAGD,EAAGG,OAEhBD,IACuB,mBAAZA,EACP9P,QAAe8P,EAAQI,KAAKL,EAAID,GAE3Bf,EAASiB,GACd9P,QAAe6O,EAASiB,GAASF,GAGjCO,EAAW,qBAAuBL,IAGtC,SAAUD,IAAkB,IAAZA,EAAG9Q,OACnBiB,GAAS,GAEboQ,EAAaR,GACN5P,EAEX,SAASoQ,EAAaR,GAClBZ,EAAY/O,KAAK2P,GAqDd,SAASS,EAAiB7S,GAC7B,MAAM8S,EAAW9S,EAAI+S,cACrB,MAAiB,YAAbD,EACO,CAAC,GAAI,GAEM,cAAbA,EACE,CAAC,EAAG,GAEO,cAAbA,EACE,EAAE,EAAG,GAEM,eAAbA,EACE,CAAC,EAAG,GAER,KAMJ,IAAIE,EAAQ,CAAE/U,GAAI,EAAGM,GAAI,GA8CzB,SAAS0U,GAAUC,EAAItH,GAC1BA,EAAQA,GAASuH,EACjB,IAYIC,EAZAC,EAAU,EACd,KAAO9B,EAAOlR,QAAQ,CAClB,MAAMiT,EAAI/B,EAAOjR,QAKjB,GAJIgT,EAAEf,OAASZ,IACXqB,EAAM/U,EAAIqV,EAAErV,EACZ+U,EAAMzU,EAAI+U,EAAE/U,GAEZqN,EAAM0H,GACN,OAAOC,QAAQC,QAAQF,GAE3BV,EAAaU,GAMjB,YAHW/S,IAAP2S,IACAA,GAAM,GAEA,GAANA,EACOK,QAAQC,QAAQ,OACvBxB,EACA/Q,QAAQC,KAAK,iCAERqQ,EAAOlR,QACZY,QAAQC,KAAK,8CAEjB8Q,EAAmBsB,IAKf,GAJIA,EAAEf,OAASZ,IACXqB,EAAM/U,EAAIqV,EAAErV,EACZ+U,EAAMzU,EAAI+U,EAAE/U,GAEZ+U,EAAEf,OAASV,GAAQqB,EAAK,GAExB,GADAG,GAAWC,EAAEG,GACTJ,EAAUH,EACV,YAGH,IAAKtH,EAAM0H,GACZ,OACJtB,EAAkB,KAClBsB,EAAEG,GAAKJ,EACPD,EAAKE,IAEF,IAAIC,SAASC,GAAaJ,EAAOI,KAkBrCtB,eAAewB,GAAeR,EAAIvE,GASrC,YARWpO,IAAP2S,IACAA,GAAM,GACVvE,EAAUA,GAAWwE,EAMdF,GAAUC,GALjB,SAAeI,GACX,OAAIA,EAAEf,OAASb,GAAY4B,EAAEf,OAASX,IAE/BjD,EAAQ2E,MAIhBpB,eAAeyB,GAAMT,GACxB,MAAMI,QAAUI,GAAeR,GAC/B,OAAOI,GAAKA,EAAEf,OAASV,+CAtTpB,SAAoB+B,EAAIvS,GAC3BgQ,EAASuC,GAAMvS,6DAuBZ,SAAmBwS,GACtBvC,EAASuC,aAEN,WACH,OAAOtC,EAAOlR,oBAEX,WACH,KAAOkR,EAAOlR,QAAQ,CAClB,MAAM+R,EAAKb,EAAOjR,QAClBkR,EAAY/O,KAAK2P,eAGlB,SAAmBA,GAItB,GAHIH,GACAhR,QAAQkL,IAAI,eAAgBiG,EAAGG,MAE/BhB,EAAOlR,OAAQ,CACf,MAAMwC,EAAO0O,EAAOA,EAAOlR,OAAS,GACpC,GAAIwC,EAAK0P,OAASH,EAAGG,MACb1P,EAAK0P,OAASZ,EAId,OAHA9O,EAAK5E,EAAImU,EAAGnU,EACZ4E,EAAKtE,EAAI6T,EAAG7T,OACZqU,EAAaR,GAMzB,GAAIA,EAAGG,OAASX,EAAO,CACnB,GAAIH,EAAWxT,GAAKmU,EAAGnU,GAAKwT,EAAWlT,GAAK6T,EAAG7T,EAE3C,YADAqU,EAAaR,GAGjBX,EAAWxT,EAAImU,EAAGnU,EAClBwT,EAAWlT,EAAI6T,EAAG7T,OAEjB,GAAI6T,EAAGG,MAAQT,EAIhB,OAHAL,EAAWxT,GAAK,EAChBwT,EAAWlT,GAAK,OAChBqU,EAAaR,GAGjB,GAAIJ,EACAA,EAAgBI,QAEf,GAAIA,EAAGG,OAASV,EAAM,CACvB,MAAMiC,EAAQvC,EAAO,GACrB,GAAIuC,GAASA,EAAMvB,OAASV,EAGxB,OAFAiC,EAAML,IAAMrB,EAAGqB,QACfb,EAAaR,GAGjBb,EAAOwC,QAAQ3B,QAGfb,EAAO9O,KAAK2P,kCAyCb,SAAuBqB,GAC1B,MAAMrB,EAAKZ,EAAYhE,OAAS,GAYhC,OAXA4E,EAAG4B,UAAW,EACd5B,EAAG6B,SAAU,EACb7B,EAAG8B,QAAS,EACZ9B,EAAG+B,SAAU,EACb/B,EAAGG,KAAOV,EACVO,EAAGpS,IAAM,KACToS,EAAGI,KAAO,KACVJ,EAAGnU,GAAK,EACRmU,EAAG7T,GAAK,EACR6T,EAAGhQ,IAAM,KACTgQ,EAAGqB,GAAKA,EACDrB,gBAGJ,SAAsBkB,GACzB,IAAItT,EAAMsT,EAAEtT,IACRwS,EAAOc,EAAEd,KAAKO,cACdO,EAAEU,WACFhU,EAAMA,EAAIoU,cACV5B,EAAOA,EAAK4B,eAEZd,EAAEW,UACFjU,EAAM,IAAMA,EACZwS,EAAO,IAAMA,GAEbc,EAAEa,UACFnU,EAAM,IAAMA,EACZwS,EAAO,IAAMA,GAEbc,EAAEY,SACF1B,EAAO,IAAMA,GAEjB,MAAMJ,EAAKZ,EAAYhE,OAAS,GAchC,OAbA4E,EAAG4B,SAAWV,EAAEU,SAChB5B,EAAG6B,QAAUX,EAAEW,QACf7B,EAAG8B,OAASZ,EAAEY,OACd9B,EAAG+B,QAAUb,EAAEa,QACf/B,EAAGG,KAAOb,EACVU,EAAGpS,IAAMA,EACToS,EAAGI,KAAOA,EACVJ,EAAGnU,GAAK,EACRmU,EAAG7T,GAAK,EACR6T,EAAGiC,SAAW,EACdjC,EAAGkC,SAAW,EACdlC,EAAGhQ,IAAMyQ,EAAiBS,EAAEd,MAC5BJ,EAAGqB,GAAK,EACDrB,qCAkBJ,SAAwBkB,GAC3B,OAAOvB,EAAcxO,SAAS+P,EAAEd,8BAI7B,SAAwBc,EAAGrV,EAAGM,GACjC,MAAM6T,EAAKZ,EAAYhE,OAAS,GAiBhC,OAhBA4E,EAAG4B,SAAWV,EAAEU,SAChB5B,EAAG6B,QAAUX,EAAEW,QACf7B,EAAG8B,OAASZ,EAAEY,OACd9B,EAAG+B,QAAUb,EAAEa,QACf/B,EAAGG,KAAOe,EAAEf,KACRe,EAAEiB,SAAsB,YAAXjB,EAAEf,OACfH,EAAGG,KAAOX,GAEdQ,EAAGpS,IAAM,KACToS,EAAGI,KAAO,KACVJ,EAAGnU,EAAIA,EACPmU,EAAG7T,EAAIA,EACP6T,EAAGiC,QAAUf,EAAEe,QACfjC,EAAGkC,QAAUhB,EAAEgB,QACflC,EAAGhQ,IAAM,KACTgQ,EAAGqB,GAAK,EACDrB,eAGJ,WACCH,IAEJA,EAASD,EACTA,EAAkB,oBAGf,WACH,GAAKC,IAEDD,GACA/Q,QAAQC,KAAK,8BAEjB8Q,EAAkBC,EAClBA,EAAS,KAELV,EAAOlR,QAAU2R,GAAiB,CAClC,MAAMsB,EAAI/B,EAAOjR,QAEjB0R,EAAgBsB,yBAkDjBpB,eAAsBgB,EAAK,GAC9B,IAAIE,EAEJ,OADAoB,YAAW,IAAMpB,KAAQF,GAClB,IAAIK,SAASC,GAAaJ,EAAOI,kBAErCtB,eAA4BgB,EAAItH,GASnC,YARWrL,IAAP2S,IACAA,GAAM,GACVtH,EAAQA,GAASuH,EAMVF,GAAUC,GALjB,SAAqBI,GACjB,OAAIA,EAAEf,OAASb,GAER9F,EAAM0H,6CAmBd,WACH,OAAOK,GAAM,WAEVzB,eAAoB2B,GACvB,IAAIY,GAAU,EACd,KAAOA,GAAS,CACZ,MAAMrC,QAAWa,KACbb,SAAaD,EAAcC,EAAIyB,KAC/BY,GAAU,iCChUf,MACH/O,YAAYgP,GACR/O,KAAKgP,SAAW,EAChBhP,KAAKiP,SAAW,EAChBjP,KAAKkP,WAAa,IAClBlP,KAAKmP,WAAaJ,EAASK,UAC3BpP,KAAKqP,YAAcN,EAAS3V,YAAckW,EAC1CtP,KAAKuP,YAAcR,EAASS,WAC5BxP,KAAKyP,OAASV,EAAS5J,OAASqI,EAEpCzN,UAAUzH,EAAGM,EAAG8W,GACZ1P,KAAKuP,YAAYjX,EAAGM,EAAG,GACvBoH,KAAKgP,QAAU1W,EACf0H,KAAKiP,QAAUrW,EACfoH,KAAKkP,WAAaQ,EAAY,EAE9B,IAAK,IAAIhQ,EAAI,EAAGA,EAAI,IAAKA,EAAG,CACxB,MAAMwF,EAAIrB,EAAWnE,GACrBM,KAAK2P,UAAU,EAAG,EAAK,EAAK,EAAGzK,EAAE,GAAIA,EAAE,GAAI,GAC3ClF,KAAK2P,UAAU,EAAG,EAAK,EAAKzK,EAAE,GAAI,EAAG,EAAGA,EAAE,KAIlDnF,UAAU6P,EAAKC,EAAYC,EAAUC,EAAIC,EAAIC,EAAIC,GAC7C,GAAIN,GAAO5P,KAAKkP,WAEZ,OAEJ,GAAIW,EAAaC,EAEb,OAGJ,IAGIK,EAAUC,EAAUC,EAAYC,EAAYC,EAH5CC,EAAYX,EACZY,GAAU,EACVC,GAAUd,EAC4Ce,EAAW,EACrE,IAAK,IAAIC,GAAUhB,EAAKgB,GAAU,EAAGA,IAAU,CAO3C,GANAT,EAAWjX,KAAKsD,MAAMwD,KAAKgP,QAAU4B,EAASb,EAAKW,EAASV,GAC5DI,EAAWlX,KAAKsD,MAAMwD,KAAKiP,QAAU2B,EAASX,EAAKS,EAASR,GAC5DG,GAAcO,EAAS,KAAQF,EAAS,IACxCJ,GAAcM,EAAS,KAAQF,EAAS,IACxCH,EAAWK,GAAUF,EAAS,IAC9BC,GAAYC,EAAS,IAAOF,GACvB1Q,KAAKyP,OAAOU,EAAUC,GAAW,CAClCK,GAAU,EAEV,SAGJ,GAAIZ,EAAac,EAAU,CACvBF,EAAUzQ,KAAKmP,WAAWgB,EAAUC,GACpC,SAEC,GAAIN,EAAWS,EAChB,MAGJ,MAAMlL,EAASrF,KAAKqP,YAAYuB,EAAQF,GACxC,GAAIrL,EAASrF,KAAKkP,WAAY,CAC1B,MAAM2B,EAAS,EAAIxL,EAASrF,KAAKkP,WACjClP,KAAKuP,YAAYY,EAAUC,EAAUS,GAGzC,GAAIJ,EAAS,CAET,GAAIzQ,KAAKmP,WAAWgB,EAAUC,GAAW,CAGrCI,EAAYF,EACZ,SAGAG,GAAU,OAIVzQ,KAAKmP,WAAWgB,EAAUC,IAAaR,EAAM5P,KAAKkP,aAGlDuB,GAAU,EACVzQ,KAAK2P,UAAUC,EAAM,EAAGY,EAAWH,EAAYN,EAAIC,EAAIC,EAAIC,GAC3DM,EAAYF,GAInBG,GACDzQ,KAAK2P,UAAUC,EAAM,EAAGY,EAAWV,EAAUC,EAAIC,EAAIC,EAAIC,MCrF9D,MAGMY,GAAU,IACvB,SAASC,GAAarR,GAClB,MAAO,CACHsR,SAAU,EACVC,KAAM,EACNtV,MAAO+D,EACP6F,KAAM,KACNE,MAAO,MAYf,SAASyL,GAAQzT,EAAKnF,EAAGM,GACrB,OAAO6E,EAAI0T,MAAM7Y,EAAImF,EAAIoH,MAAQjM,GAErC,MAAMV,GAAO2L,EA6Gb,SAASuN,GAAa5S,EAAMlG,EAAGM,GAC3B,OAAIN,GAAK,GAAKM,GAAK,IAEfN,GAAKkG,EAAK9D,OAAS,GAAK9B,GAAK4F,EAAK,GAAG9D,OAAS,GA+DtD,SAAS2W,GAAY5T,EAAK6T,GACtB,IAAI5R,EAAGqF,EAGP,IAlLJ,SAAgBtH,GACZ,IAAIhB,EAAK8U,EACLC,EACAjM,EAAO,KAAME,EAAQ,KAAMgM,EAAO,KACtCF,EAAO9T,EAAIiU,UAAY,EAAI,EAC3B,IAAIC,EAAOlU,EAAImU,MAAMnM,MAErB,IADAhI,EAAImU,MAAMnM,MAAQ,KACH,MAARkM,GAAc,CACjB,IAAKlV,EAAM,EAAGA,EAAM8U,EAAM9U,IAAO,CAE7B,GADA+U,EAAYG,EAAKhW,OAASzD,GAAKuE,GAAK,GAAKgB,EAAIoH,MAAQ3M,GAAKuE,GAAK,IAC3D+U,EAAY,GAAKA,GAAa/T,EAAIoH,MAAQpH,EAAIqH,OAC9C,SAGJ,GAFA2M,EAAOhU,EAAI0T,MAAMK,GAEbC,EAAKR,KAAO,EACZ,SACJ,IAAIY,EAAW,EACf,GAAIpV,GAAO,EAAG,CAEV,IAAIqV,EAAMC,EAAWC,EAAMC,EAE3B,GAHAJ,EAAW,MAEXE,EAAYJ,EAAKhW,MAAQzD,GAAKuE,GAAK,GAC/BsV,EAAY,GAAKA,GAAatU,EAAIoH,MAAQpH,EAAIqH,OAC9C,SAEJ,GADAmN,EAAYN,EAAKhW,MAAQ8B,EAAIoH,MAAQ3M,GAAKuE,GAAK,GAC3CwV,EAAY,GAAKA,GAAaxU,EAAIoH,MAAQpH,EAAIqH,OAC9C,SAGJ,GAFAgN,EAAOrU,EAAI0T,MAAMY,GACjBC,EAAOvU,EAAI0T,MAAMc,IApDN,GAqDPH,EAAKb,OArDE,GAqDqBe,EAAKf,KACjC,SAER,GAAIU,EAAKX,SAAWS,EAAKR,KAAOY,EAAWJ,EAAKT,SAAU,CAUtD,IATAS,EAAKT,SAAWW,EAAKX,SAAWS,EAAKR,KAAOY,EAG1B,MAAdJ,EAAKhM,QACLgM,EAAKhM,MAAMF,KAAOkM,EAAKlM,MACV,MAAbkM,EAAKlM,OACLkM,EAAKlM,KAAKE,MAAQgM,EAAKhM,OAC3BF,EAAOoM,EACPlM,EAAQkM,EAAKlM,MACG,MAATA,GAAiBA,EAAMuL,SAAWS,EAAKT,UAC1CzL,EAAOE,EACPA,EAAQA,EAAMA,MAEN,MAARF,IACAA,EAAKE,MAAQgM,GACjBA,EAAKhM,MAAQA,EACbgM,EAAKlM,KAAOA,EACC,MAATE,IACAA,EAAMF,KAAOkM,IAGzBhM,EAAQkM,EAAKlM,MACbkM,EAAKpM,KAAO,KACZoM,EAAKlM,MAAQ,KACbkM,EAAOlM,GAwHXE,CAAOlI,GAEFiC,EAAI,EAAGA,EAAIjC,EAAIoH,MAAOnF,IACvB,IAAKqF,EAAI,EAAGA,EAAItH,EAAIqH,OAAQC,IACxBuM,EAAY5R,GAAGqF,GAAKmM,GAAQzT,EAAKiC,EAAGqF,GAAGiM,SAInD,IAAIkB,GA2HG,SAASC,GAASb,EAAahZ,EAAGM,EAAGwW,EAAWgD,GAAe,GAClE,IAAI7K,EAAMC,EAAM6K,EACZ5V,EAAK6V,EACL7B,EAIJ,IAFA4B,EAAY,EACZC,GPlUwB,EOmUnB7V,EAAM,EAAGA,GAAO2V,EAAe,EAAI,KAAM3V,EAC1C8K,EAAOjP,EAAIuL,EAAWpH,GAAK,GAC3B+K,EAAO5O,EAAIiL,EAAWpH,GAAK,GAC3BgU,EAAUrB,EAAU7H,EAAMC,EAAMlP,EAAGM,EAAG0Y,IACjCb,GAAWa,EAAYhZ,GAAGM,GAAK0Y,EAAY/J,GAAMC,GAAQ6K,IAC1DC,EAAU7V,EACV4V,EAAYf,EAAYhZ,GAAGM,GAAK0Y,EAAY/J,GAAMC,IAG1D,OAAO3D,EAAWyO,IAAY,uCA7VR,eACC,UACJ,iCAwRhB,SAA4BhB,EAAaiB,EAAcC,EAAcC,EAASf,GAAY,GAC7F,MAAM7M,EAAQyM,EAAY5W,OACpBoK,EAASwM,EAAY,GAAG5W,OA/QlC,IAAyB8J,EAAGC,EAuRxB,IAAI/E,EAAGqF,EACP,MARKmN,IACDA,GAAarN,MAAQA,GACrBqN,GAAapN,OAASA,KAlRLN,EAmRcK,EAnRXJ,EAmRkBK,EAAtCoN,GAlRG,CACHR,WAAW,EACXE,MAAOb,IAAc,GACrBI,MAAOuB,EAAelO,EAAIC,GAAI/E,GAAMqR,GAAarR,KACjDmF,MAAOL,EACPM,OAAQL,IA+QZyN,GAAarN,MAAQA,EACrBqN,GAAapN,OAASA,EAEjBpF,EAAI,EAAGA,EAAImF,EAAOnF,IACnB,IAAKqF,EAAI,EAAGA,EAAID,EAAQC,IACpBmM,GAAQgB,GAAcxS,EAAGqF,GAAGkM,KAAOG,GAAaqB,EAAS/S,EAAGqF,IAtS7C,EAwST0N,EAAQ/S,GAAGqF,IApN7B,SAAetH,EAAKkV,EAAajB,GAC7B,IAAIhS,EAGJ,IAFAjC,EAAIiU,UAAYA,EAChBjU,EAAImU,MAAMnM,MAAQ,KACb/F,EAAI,EAAGA,EAAIjC,EAAIoH,MAAQpH,EAAIqH,OAAQpF,IACpCjC,EAAI0T,MAAMzR,GAAGsR,SAAW2B,EACxBlV,EAAI0T,MAAMzR,GAAG6F,KAAO9H,EAAI0T,MAAMzR,GAAG+F,MAAQ,KAiN7C1H,CAAMmU,GAAcpB,GAASY,GA1MjC,SAAqBjU,EAAKnF,EAAGM,EAAGoY,GAC5B,IAAIzL,EAAME,EAAOgM,EACjB,GAAInZ,EAAI,GAAKM,EAAI,GAAKN,EAAImF,EAAIoH,MAAQ,GAAKjM,EAAI6E,EAAIqH,OAAS,IACxD2M,EAAOP,GAAQzT,EAAKnF,EAAGM,GACnB6Y,EAAKT,SAAWA,GAAU,CAQ1B,IAPAS,EAAKT,SAAWA,EACE,MAAdS,EAAKhM,QACLgM,EAAKhM,MAAMF,KAAOkM,EAAKlM,MACV,MAAbkM,EAAKlM,OACLkM,EAAKlM,KAAKE,MAAQgM,EAAKhM,OAC3BF,EAAO9H,EAAImU,MACXnM,EAAQhI,EAAImU,MAAMnM,MACF,MAATA,GAAiBA,EAAMuL,SAAWS,EAAKT,UAC1CzL,EAAOE,EACPA,EAAQA,EAAMA,MAElBgM,EAAKhM,MAAQA,EACbgM,EAAKlM,KAAOA,EACZA,EAAKE,MAAQgM,EACA,MAAThM,IACAA,EAAMF,KAAOkM,IAuLzBmB,CAAYV,GAAcK,EAAcC,EAAc,GACtDnB,GAAYa,GAAcZ,wBA4EvB,SAAiBA,EAAauB,EAASC,EAAS1D,GAEnD,IAAI9W,EAAIua,EACJja,EAAIka,EACJ9V,EAAQ,EACZ,GAAIsU,EAAYhZ,GAAGM,GAAK,GAAK0Y,EAAYhZ,GAAGM,IAAMkY,GAAS,CACvD,MAAM5J,EAjCd,SAAsCoK,EAAahZ,EAAGM,GAClD,IAAI8G,EAAGqF,EAAG4B,EAAMoM,EAAiBC,EAC7BC,GAAQ,EACRC,GAAQ,EACZ,MAAMrO,EAAQyM,EAAY5W,OACpBoK,EAASwM,EAAY,GAAG5W,OAG9B,IAFAqY,EAAkB,IAClBC,EAAiB,IACZtT,EAAI,EAAGA,EAAImF,EAAQ,EAAGnF,IACvB,IAAKqF,EAAI,EAAGA,EAAID,EAAS,EAAGC,IACpBuM,EAAY5R,GAAGqF,IAAM,GAAKuM,EAAY5R,GAAGqF,GAAK+L,KAC9CnK,GAAQjH,EAAIpH,IAAMoH,EAAIpH,IAAMyM,EAAInM,IAAMmM,EAAInM,IACtC+N,EAAOoM,GACNpM,GAAQoM,GAAmBzB,EAAY5R,GAAGqF,GAAKiO,KAChDC,EAAOvT,EACPwT,EAAOnO,EACPgO,EAAkBpM,EAClBqM,EAAiB1B,EAAY5R,GAAGqF,KAKhD,OAAIkO,GAAQ,EACD,CAACA,EAAMC,GACX,KASSC,CAA6B7B,EAAahZ,EAAGM,GACrDsO,IACA5O,EAAI4O,EAAI,GACRtO,EAAIsO,EAAI,IAGhB,MAAMkM,EAAO,CAAC,CAAC9a,EAAGM,IAClB,IAAI6D,EACJ,GACIA,EAAM0V,GAASb,EAAahZ,EAAGM,EAAGwW,GAAW,GACzC3S,IACAnE,GAAKmE,EAAI,GACT7D,GAAK6D,EAAI,GAGT2W,EAAKtW,KAAK,CAACxE,EAAGM,IACdoE,WAGCP,GACT,OAAOO,EAAQoW,EAAO,OCpZnB,MAAMC,GAOTtT,YAAYrE,EAAI4X,EAASC,GAAO,GAC5BvT,KAAKtE,GAAKA,EACVsE,KAAKsT,QAAUA,GAAW,KAC1BtT,KAAKuT,KAAOA,IAAQ,EACpBvT,KAAKpE,KAAO,KAShBmE,QAAQrE,EAAI4X,EAASC,GACjB,QAAQvT,KAAKtE,KAAOA,QACNd,IAAT2Y,GAAsBA,GAAQvT,KAAKuT,MAClCD,GAAWtT,KAAKsT,UAAYA,IAG1C,IAAI1H,GAAS,GAUN,SAAS4H,GAAYC,EAAO/X,EAAI4X,EAASC,GAAO,GACnD,GAAkB,mBAAP7X,EACP,MAAM,IAAIgY,UAAU,mCAExB,MAAMC,EAAW,IAAIN,GAAS3X,EAAI4X,GAAW,KAAMC,GAEnD,OADAK,EAAiBhI,GAAQ6H,EAAOE,GACzBA,EAoCJ,SAASE,GAAeJ,EAAO/X,EAAI4X,EAASC,GAAO,GACjD3H,GAAO6H,KAEP/X,EAILoY,EAAgBlI,GAAO6H,IAAS3Z,IAC5B,MAAMmK,EAAInK,EACNmK,EAAE8P,QAAQrY,EAAI4X,EAASC,IACvBS,EAAsBpI,GAAQ6H,EAAOxP,MANzCgQ,GAAWR,IA4BZ,SAASQ,GAAWR,GACvB7H,GAAO6H,GAAS,0DA1Db,SAAYA,EAAO/X,EAAI4X,EAASC,GAAO,GAC1C,OAAOC,GAAYC,EAAO/X,EAAI4X,EAASC,SAWpC,SAAcE,EAAO/X,EAAI4X,GAC5B,OAAOE,GAAYC,EAAO/X,EAAI4X,GAAS,0BAoCpC,SAAaG,EAAO/X,EAAI4X,EAASC,GAAO,GAC3CM,GAAeJ,EAAO/X,EAAI4X,EAASC,qCAiBhC,SAA4BE,GAC3BA,EACI7H,GAAO6H,IACPQ,GAAWR,GAGf7H,GAAS,SAWVW,kBAAuBlR,GAC1B,MAAMoY,EAAQpY,EAAK,GACnB,IAAKuQ,GAAO6H,GACR,OAAO,EACX,IAAIE,EAAW/H,GAAO6H,GACtB,KAAOE,GAAU,CACb,IAAI/X,EAAO+X,EAAS/X,KAChB+X,EAASJ,MACTS,EAAsBpI,GAAQ6H,EAAOE,SACnCA,EAASjY,GAAGwY,MAAMP,EAASL,QAASjY,GAC1CsY,EAAW/X,EAEf,OAAO,mCCvIO"}