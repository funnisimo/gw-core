{"version":3,"file":"gw-core.min.js","sources":["../js/utils.js","../js/random.js","../js/range.js","../js/flag.js","../js/grid.js","../js/gw.js"],"sourcesContent":["/**\n * GW.utils\n * @module utils\n */\n// DIRS are organized clockwise\n// - first 4 are arrow directions\n//   >> rotate 90 degrees clockwise ==>> newIndex = (oldIndex + 1) % 4\n//   >> opposite direction ==>> oppIndex = (index + 2) % 4\n// - last 4 are diagonals\n//   >> rotate 90 degrees clockwise ==>> newIndex = 4 + (oldIndex + 1) % 4;\n//   >> opposite diagonal ==>> newIndex = 4 + (index + 2) % 4;\nexport const DIRS = [[0, 1], [1, 0], [0, -1], [-1, 0], [1, 1], [1, -1], [-1, -1], [-1, 1]];\nexport const NO_DIRECTION = -1;\nexport const UP = 0;\nexport const RIGHT = 1;\nexport const DOWN = 2;\nexport const LEFT = 3;\nexport const RIGHT_UP = 4;\nexport const RIGHT_DOWN = 5;\nexport const LEFT_DOWN = 6;\nexport const LEFT_UP = 7;\n// CLOCK DIRS are organized clockwise, starting at UP\n// >> opposite = (index + 4) % 8\n// >> 90 degrees rotate right = (index + 2) % 8\n// >> 90 degrees rotate left = (8 + index - 2) % 8\nexport const CLOCK_DIRS = [[0, 1], [1, 1], [1, 0], [1, -1], [0, -1], [-1, -1], [-1, 0], [-1, 1]];\nexport function NOOP() { }\nexport function TRUE() { return true; }\nexport function FALSE() { return false; }\nexport function ONE() { return 1; }\nexport function ZERO() { return 0; }\nexport function IDENTITY(x) { return x; }\n/**\n * clamps a value between min and max (inclusive)\n * @param v {Number} the value to clamp\n * @param min {Number} the minimum value\n * @param max {Number} the maximum value\n * @returns {Number} the clamped value\n */\nexport function clamp(v, min, max) {\n    if (v < min)\n        return min;\n    if (v > max)\n        return max;\n    return v;\n}\nexport function x(src) {\n    // @ts-ignore\n    return src.x || src[0] || 0;\n}\nexport function y(src) {\n    // @ts-ignore\n    return src.y || src[1] || 0;\n}\nexport function copyXY(dest, src) {\n    dest.x = x(src);\n    dest.y = y(src);\n}\nexport function addXY(dest, src) {\n    dest.x += x(src);\n    dest.y += y(src);\n}\nexport function equalsXY(dest, src) {\n    return (dest.x == x(src)) && (dest.y == y(src));\n}\nexport function lerpXY(a, b, pct) {\n    if (pct > 1) {\n        pct = pct / 100;\n    }\n    pct = clamp(pct, 0, 1);\n    const dx = x(b) - x(a);\n    const dy = y(b) - y(a);\n    const x2 = x(a) + Math.floor(dx * pct);\n    const y2 = y(a) + Math.floor(dy * pct);\n    return [x2, y2];\n}\nexport function distanceBetween(x1, y1, x2, y2) {\n    const x = Math.abs(x1 - x2);\n    const y = Math.abs(y1 - y2);\n    const min = Math.min(x, y);\n    return x + y - (0.6 * min);\n}\nexport function distanceFromTo(a, b) {\n    return distanceBetween(x(a), y(a), x(b), y(b));\n}\nexport function calcRadius(x, y) {\n    return distanceBetween(0, 0, x, y);\n}\nexport function dirBetween(x, y, toX, toY) {\n    let diffX = toX - x;\n    let diffY = toY - y;\n    if (diffX && diffY) {\n        const absX = Math.abs(diffX);\n        const absY = Math.abs(diffY);\n        if (absX >= 2 * absY) {\n            diffY = 0;\n        }\n        else if (absY >= 2 * absX) {\n            diffX = 0;\n        }\n    }\n    return [Math.sign(diffX), Math.sign(diffY)];\n}\nexport function dirFromTo(a, b) {\n    return dirBetween(x(a), y(a), x(b), y(b));\n}\nexport function dirIndex(dir) {\n    const x0 = x(dir);\n    const y0 = y(dir);\n    return DIRS.findIndex((a) => a[0] == x0 && a[1] == y0);\n}\nexport function isOppositeDir(a, b) {\n    if (a[0] + b[0] != 0)\n        return false;\n    if (a[1] + b[1] != 0)\n        return false;\n    return true;\n}\nexport function isSameDir(a, b) {\n    return a[0] == b[0] && a[1] == b[1];\n}\nexport function dirSpread(dir) {\n    const result = [dir];\n    if (dir[0] == 0) {\n        result.push([1, dir[1]]);\n        result.push([-1, dir[1]]);\n    }\n    else if (dir[1] == 0) {\n        result.push([dir[0], 1]);\n        result.push([dir[0], -1]);\n    }\n    else {\n        result.push([dir[0], 0]);\n        result.push([0, dir[1]]);\n    }\n    return result;\n}\nexport function stepFromTo(a, b, fn) {\n    const x0 = x(a);\n    const y0 = y(a);\n    const diff = [x(b) - x0, y(b) - y0];\n    const steps = Math.abs(diff[0]) + Math.abs(diff[1]);\n    const c = [0, 0];\n    const last = [99999, 99999];\n    for (let step = 0; step <= steps; ++step) {\n        c[0] = x0 + Math.floor(diff[0] * step / steps);\n        c[1] = y0 + Math.floor(diff[1] * step / steps);\n        if (c[0] != last[0] || c[1] != last[1]) {\n            fn(c[0], c[1]);\n        }\n        last[0] = c[0];\n        last[1] = c[1];\n    }\n}\n// Draws the smooth gradient that appears on a button when you hover over or depress it.\n// Returns the percentage by which the current tile should be averaged toward a hilite color.\nexport function smoothHiliteGradient(currentXValue, maxXValue) {\n    return Math.floor(100 * Math.sin(Math.PI * currentXValue / (maxXValue)));\n}\nfunction assignField(dest, src, key) {\n    const current = dest[key];\n    const updated = src[key];\n    if (current && current.copy && updated) {\n        current.copy(updated);\n    }\n    else if (current && current.clear && !updated) {\n        current.clear();\n    }\n    else if (current && current.nullify && !updated) {\n        current.nullify();\n    }\n    else if (updated && updated.clone) {\n        dest[key] = updated.clone(); // just use same object (shallow copy)\n    }\n    else if (updated && Array.isArray(updated)) {\n        dest[key] = updated.slice();\n    }\n    else if (current && Array.isArray(current)) {\n        current.length = 0;\n    }\n    else {\n        dest[key] = updated;\n    }\n}\n// export function copyObject(dest, src) {\n//   Object.keys(dest).forEach( (key) => {\n//     assignField(dest, src, key);\n//   });\n// }\n// export function assignObject(dest, src) {\n//   Object.keys(src).forEach( (key) => {\n//     assignField(dest, src, key);\n//   });\n// }\nexport function assignOmitting(omit, dest, src) {\n    if (typeof omit === 'string') {\n        omit = omit.split(/[,|]/g).map((t) => t.trim());\n    }\n    Object.keys(src).forEach((key) => {\n        if (omit.includes(key))\n            return;\n        assignField(dest, src, key);\n    });\n}\nexport function setDefault(obj, field, val) {\n    if (obj[field] === undefined) {\n        obj[field] = val;\n    }\n}\nexport function setDefaults(obj, def, custom = null) {\n    let dest;\n    Object.keys(def).forEach((key) => {\n        const origKey = key;\n        let defValue = def[key];\n        dest = obj;\n        // allow for => 'stats.health': 100\n        const parts = key.split('.');\n        while (parts.length > 1) {\n            key = parts.shift();\n            if (dest[key] === undefined) {\n                dest = dest[key] = {};\n            }\n            else if (typeof dest[key] !== 'object') {\n                ERROR('Trying to set default member on non-object config item: ' + origKey);\n            }\n            else {\n                dest = dest[key];\n            }\n        }\n        key = parts.shift();\n        let current = dest[key];\n        // console.log('def - ', key, current, defValue, obj, dest);\n        if (custom && custom(dest, key, current, defValue)) {\n            // do nothing\n        }\n        else if (current === undefined) {\n            if (defValue === null) {\n                dest[key] = null;\n            }\n            else if (Array.isArray(defValue)) {\n                dest[key] = defValue.slice();\n            }\n            else if (typeof defValue === 'object') {\n                dest[key] = defValue; // Object.assign({}, defValue); -- this breaks assigning a Color object as a default...\n            }\n            else {\n                dest[key] = defValue;\n            }\n        }\n    });\n}\nexport function kindDefaults(obj, def) {\n    function custom(dest, key, current, defValue) {\n        if (key.search(/[fF]lags$/) < 0)\n            return false;\n        if (!current) {\n            current = [];\n        }\n        else if (typeof current == 'string') {\n            current = current.split(/[,|]/).map((t) => t.trim());\n        }\n        else if (!Array.isArray(current)) {\n            current = [current];\n        }\n        if (typeof defValue === 'string') {\n            defValue = defValue.split(/[,|]/).map((t) => t.trim());\n        }\n        else if (!Array.isArray(defValue)) {\n            defValue = [defValue];\n        }\n        // console.log('flags', key, defValue, current);\n        dest[key] = defValue.concat(current);\n        return true;\n    }\n    return setDefaults(obj, def, custom);\n}\nexport function pick(obj, ...fields) {\n    const data = {};\n    fields.forEach((f) => {\n        const v = obj[f];\n        if (v !== undefined) {\n            data[f] = v;\n        }\n    });\n    return data;\n}\nexport function clearObject(obj) {\n    Object.keys(obj).forEach((key) => obj[key] = undefined);\n}\nexport function ERROR(message) {\n    throw new Error(message);\n}\nexport function WARN(...args) {\n    console.warn(...args);\n}\nexport function getOpt(obj, member, _default) {\n    const v = obj[member];\n    if (v === undefined)\n        return _default;\n    return v;\n}\nexport function firstOpt(field, ...args) {\n    for (let arg of args) {\n        if (typeof arg !== 'object' || Array.isArray(arg)) {\n            return arg;\n        }\n        if (arg[field] !== undefined) {\n            return arg[field];\n        }\n    }\n    return undefined;\n}\nexport function arraysIntersect(a, b) {\n    return a.some((av) => b.includes(av));\n}\nexport function sum(arr) {\n    return arr.reduce((a, b) => a + b);\n}\nexport function chainLength(root) {\n    let count = 0;\n    while (root) {\n        count += 1;\n        root = root.next;\n    }\n    return count;\n}\nexport function chainIncludes(chain, entry) {\n    while (chain && chain !== entry) {\n        chain = chain.next;\n    }\n    return (chain === entry);\n}\nexport function eachChain(item, fn) {\n    let index = 0;\n    while (item) {\n        const next = item.next;\n        fn(item, index++);\n        item = next;\n    }\n    return index; // really count\n}\nexport function addToChain(obj, name, entry) {\n    entry.next = obj[name] || null;\n    obj[name] = entry;\n    return true;\n}\nexport function removeFromChain(obj, name, entry) {\n    const root = obj[name];\n    if (root === entry) {\n        obj[name] = entry.next || null;\n        entry.next = null;\n        return true;\n    }\n    else if (!root) {\n        return false;\n    }\n    else {\n        let prev = root;\n        let current = prev.next;\n        while (current && current !== entry) {\n            prev = current;\n            current = prev.next;\n        }\n        if (current === entry) {\n            prev.next = current.next || null;\n            entry.next = null;\n            return true;\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=utils.js.map","const RANDOM_CONFIG = {\n    make: () => { return Math.random.bind(Math); }\n};\nexport function configure(opts) {\n    if (opts.make) {\n        if (typeof opts.make !== 'function')\n            throw new Error('Random make parameter must be a function.');\n        if (typeof opts.make(12345) !== 'function')\n            throw new Error('Random make function must accept a numeric seed and return a random function.');\n        RANDOM_CONFIG.make = opts.make;\n        random.seed();\n        cosmetic.seed();\n    }\n}\nfunction lotteryDrawArray(rand, frequencies) {\n    let i, maxFreq, randIndex;\n    maxFreq = 0;\n    for (i = 0; i < frequencies.length; i++) {\n        maxFreq += frequencies[i];\n    }\n    if (maxFreq <= 0) {\n        console.warn('Lottery Draw - no frequencies', frequencies, frequencies.length);\n        return 0;\n    }\n    randIndex = rand.range(0, maxFreq - 1);\n    for (i = 0; i < frequencies.length; i++) {\n        if (frequencies[i] > randIndex) {\n            return i;\n        }\n        else {\n            randIndex -= frequencies[i];\n        }\n    }\n    console.warn('Lottery Draw failed.', frequencies, frequencies.length);\n    return 0;\n}\nfunction lotteryDrawObject(rand, weights) {\n    const entries = Object.entries(weights);\n    const frequencies = entries.map(([_, weight]) => weight);\n    const index = lotteryDrawArray(rand, frequencies);\n    return entries[index][0];\n}\nexport class Random {\n    constructor() {\n        this._fn = RANDOM_CONFIG.make();\n    }\n    seed(val) {\n        this._fn = RANDOM_CONFIG.make(val);\n    }\n    value() { return this._fn(); }\n    float() { return this.value(); }\n    number(max = 0) {\n        max = max || Number.MAX_SAFE_INTEGER;\n        return Math.floor(this._fn() * max);\n    }\n    int(max = 0) { return this.number(max); }\n    range(lo, hi) {\n        if (hi <= lo)\n            return hi;\n        const diff = (hi - lo) + 1;\n        return lo + (this.number(diff));\n    }\n    dice(count, sides, addend = 0) {\n        let total = 0;\n        let mult = 1;\n        if (count < 0) {\n            count = -count;\n            mult = -1;\n        }\n        addend = addend || 0;\n        for (let i = 0; i < count; ++i) {\n            total += this.range(1, sides);\n        }\n        total *= mult;\n        return total + addend;\n    }\n    weighted(weights) {\n        if (Array.isArray(weights)) {\n            return lotteryDrawArray(this, weights);\n        }\n        return lotteryDrawObject(this, weights);\n    }\n    item(list) {\n        if (!Array.isArray(list)) {\n            list = Object.values(list);\n        }\n        return list[this.range(0, list.length - 1)];\n    }\n    key(obj) {\n        return this.item(Object.keys(obj));\n    }\n    shuffle(list, fromIndex = 0, toIndex = 0) {\n        if (arguments.length == 2) {\n            toIndex = fromIndex;\n            fromIndex = 0;\n        }\n        let i, r, buf;\n        toIndex = toIndex || list.length;\n        fromIndex = fromIndex || 0;\n        for (i = fromIndex; i < toIndex; i++) {\n            r = this.range(fromIndex, toIndex - 1);\n            if (i != r) {\n                buf = list[r];\n                list[r] = list[i];\n                list[i] = buf;\n            }\n        }\n        return list;\n    }\n    sequence(n) {\n        const list = [];\n        for (let i = 0; i < n; i++) {\n            list[i] = i;\n        }\n        return this.shuffle(list);\n    }\n    chance(percent, outOf = 100) {\n        if (percent <= 0)\n            return false;\n        if (percent >= outOf)\n            return true;\n        return (this.range(0, outOf - 1) < percent);\n    }\n    // Get a random int between lo and hi, inclusive, with probability distribution\n    // affected by clumps.\n    clumped(lo, hi, clumps) {\n        if (hi <= lo) {\n            return lo;\n        }\n        if (clumps <= 1) {\n            return this.range(lo, hi);\n        }\n        let i, total = 0, numSides = Math.floor((hi - lo) / clumps);\n        for (i = 0; i < (hi - lo) % clumps; i++) {\n            total += this.range(0, numSides + 1);\n        }\n        for (; i < clumps; i++) {\n            total += this.range(0, numSides);\n        }\n        return (total + lo);\n    }\n}\nexport const random = new Random();\nexport const cosmetic = new Random();\n//# sourceMappingURL=random.js.map","import { random } from './random';\nexport class Range {\n    constructor(lower, upper = 0, clumps = 1, rng) {\n        this._rng = rng || random;\n        if (Array.isArray(lower)) {\n            clumps = lower[2];\n            upper = lower[1];\n            lower = lower[0];\n        }\n        else if (lower instanceof Range) {\n            clumps = lower.clumps;\n            upper = lower.hi;\n            lower = lower.lo;\n        }\n        if (upper < lower) {\n            [upper, lower] = [lower, upper];\n        }\n        this.lo = lower || 0;\n        this.hi = upper || this.lo;\n        this.clumps = clumps || 1;\n    }\n    value() {\n        return this._rng.clumped(this.lo, this.hi, this.clumps);\n    }\n    toString() {\n        if (this.lo >= this.hi) {\n            return '' + this.lo;\n        }\n        return `${this.lo}-${this.hi}`;\n    }\n}\nexport function make(config, rng) {\n    if (!config)\n        return new Range(0, 0, 0, rng);\n    if (config instanceof Range)\n        return config; // you can supply a custom range object\n    // if (config.value) return config;  // calc or damage\n    if (typeof config == 'function')\n        throw new Error('Custom range functions not supported - extend Range');\n    if (config === undefined || config === null)\n        return new Range(0, 0, 0, rng);\n    if (typeof config == 'number')\n        return new Range(config, config, 1, rng);\n    // @ts-ignore\n    if (config === true || config === false)\n        throw new Error('Invalid random config: ' + config);\n    if (Array.isArray(config)) {\n        return new Range(config[0], config[1], config[2], rng);\n    }\n    if (typeof config !== 'string') {\n        throw new Error('Calculations must be strings.  Received: ' + JSON.stringify(config));\n    }\n    if (config.length == 0)\n        return new Range(0, 0, 0, rng);\n    const RE = /^(?:([+-]?\\d*)[Dd](\\d+)([+-]?\\d*)|([+-]?\\d+)-(\\d+):?(\\d+)?|([+-]?\\d+)~(\\d+)|([+-]?\\d+\\.?\\d*))/g;\n    let results;\n    while ((results = RE.exec(config)) !== null) {\n        if (results[2]) {\n            let count = Number.parseInt(results[1]) || 1;\n            const sides = Number.parseInt(results[2]);\n            const addend = Number.parseInt(results[3]) || 0;\n            const lower = addend + count;\n            const upper = addend + (count * sides);\n            return new Range(lower, upper, count, rng);\n        }\n        else if (results[4] && results[5]) {\n            const min = Number.parseInt(results[4]);\n            const max = Number.parseInt(results[5]);\n            const clumps = Number.parseInt(results[6]);\n            return new Range(min, max, clumps, rng);\n        }\n        else if (results[7] && results[8]) {\n            const base = Number.parseInt(results[7]);\n            const std = Number.parseInt(results[8]);\n            return new Range(base - 2 * std, base + 2 * std, 3, rng);\n        }\n        else if (results[9]) {\n            const v = Number.parseFloat(results[9]);\n            return new Range(v, v, 1, rng);\n        }\n    }\n    throw new Error('Not a valid range - ' + config);\n}\n//# sourceMappingURL=range.js.map","///////////////////////////////////\n// FLAG\nexport function fl(N) { return (1 << N); }\nexport function toString(flagObj, value) {\n    const inverse = Object.entries(flagObj).reduce((out, entry) => {\n        const [key, value] = entry;\n        if (value)\n            out[value] = key;\n        return out;\n    }, []);\n    const out = [];\n    for (let index = 0; index < 32; ++index) {\n        const fl = (1 << index);\n        if (value & fl) {\n            out.push(inverse[fl]);\n        }\n    }\n    return out.join(' | ');\n}\nexport function from(obj, ...args) {\n    let result = 0;\n    for (let index = 0; index < args.length; ++index) {\n        let value = args[index];\n        if (value === undefined)\n            continue;\n        if (typeof value == 'number') {\n            result |= value;\n            continue; // next\n        }\n        else if (typeof value === 'string') {\n            value = value.split(/[,|]/).map((t) => t.trim()).map((u) => {\n                const n = Number.parseInt(u);\n                if (n >= 0)\n                    return n;\n                return u;\n            });\n        }\n        if (Array.isArray(value)) {\n            value.forEach((v) => {\n                if (typeof v == 'string') {\n                    v = v.trim();\n                    if (v.startsWith('!')) {\n                        // @ts-ignore\n                        const f = obj[v.substring(1)];\n                        result &= ~f;\n                    }\n                    else {\n                        // @ts-ignore\n                        const f = obj[v];\n                        if (f) {\n                            result |= f;\n                        }\n                    }\n                }\n                else if (v === 0) { // to allow clearing flags when extending objects\n                    result = 0;\n                }\n                else {\n                    result |= v;\n                }\n            });\n        }\n    }\n    return result;\n}\nexport const flags = {};\nexport function install(flagName, flag) {\n    flags[flagName] = flag;\n    return flag;\n}\n//# sourceMappingURL=flag.js.map","import { random } from './random';\nimport * as Utils from './utils';\nconst GRID_CACHE = [];\nconst DIRS = Utils.DIRS;\nconst CDIRS = Utils.CLOCK_DIRS;\nexport function makeArray(l, fn) {\n    fn = fn || (() => 0);\n    const arr = new Array(l);\n    for (let i = 0; i < l; ++i) {\n        arr[i] = fn(i);\n    }\n    return arr;\n}\nexport class Grid extends Array {\n    constructor(w, h, v) {\n        v = v || 0;\n        const fn = (typeof v === 'function') ? v : (() => v);\n        super(w);\n        for (let i = 0; i < w; ++i) {\n            this[i] = makeArray(h, (j) => fn(i, j));\n            ;\n        }\n        this._width = w;\n        this._height = h;\n    }\n    get width() { return this._width; }\n    get height() { return this._height; }\n    resize(width, height, value) {\n        const fn = (typeof value === 'function') ? value : (() => value);\n        while (this.length < width)\n            this.push([]);\n        let x = 0;\n        let y = 0;\n        for (x = 0; x < width; ++x) {\n            const col = this[x];\n            for (y = 0; y < Math.min(height, col.length); ++y) {\n                col[y] = fn(col[y]);\n            }\n            while (col.length < height)\n                col.push(fn());\n        }\n        this._width = width;\n        this._height = height;\n        if (this.x !== undefined) {\n            this.x = undefined;\n            this.y = undefined;\n        }\n        return this;\n    }\n    // @ts-ignore\n    forEach(fn) {\n        let i, j;\n        for (i = 0; i < this.width; i++) {\n            for (j = 0; j < this.height; j++) {\n                fn(this[i][j], i, j, this);\n            }\n        }\n    }\n    eachNeighbor(x, y, fn, only4dirs = false) {\n        const maxIndex = only4dirs ? 4 : 8;\n        for (let d = 0; d < maxIndex; ++d) {\n            const dir = DIRS[d];\n            const i = x + dir[0];\n            const j = y + dir[1];\n            if (this.hasXY(i, j)) {\n                fn(this[i][j], i, j, this);\n            }\n        }\n    }\n    forRect(x, y, w, h, fn) {\n        w = Math.min(this.width - x, w);\n        h = Math.min(this.height - y, h);\n        for (let i = x; i < x + w; ++i) {\n            for (let j = y; j < y + h; ++j) {\n                fn(this[i][j], i, j, this);\n            }\n        }\n    }\n    // @ts-ignore\n    map(fn) {\n        return super.map((col, x) => {\n            return col.map((v, y) => fn(v, x, y, this));\n        });\n    }\n    forCircle(x, y, radius, fn) {\n        let i, j;\n        for (i = Math.max(0, x - radius - 1); i < Math.min(this.width, x + radius + 1); i++) {\n            for (j = Math.max(0, y - radius - 1); j < Math.min(this.height, y + radius + 1); j++) {\n                if (this.hasXY(i, j) && (((i - x) * (i - x) + (j - y) * (j - y)) < radius * radius + radius)) { // + radius softens the circle\n                    fn(this[i][j], i, j, this);\n                }\n            }\n        }\n    }\n    hasXY(x, y) {\n        return x >= 0 && y >= 0 && x < this.width && y < this.height;\n    }\n    isBoundaryXY(x, y) {\n        return this.hasXY(x, y) && ((x == 0) || (x == this.width - 1) || (y == 0) || (y == this.height - 1));\n    }\n    calcBounds() {\n        const bounds = { left: this.width, top: this.height, right: 0, bottom: 0 };\n        this.forEach((v, i, j) => {\n            if (!v)\n                return;\n            if (bounds.left > i)\n                bounds.left = i;\n            if (bounds.right < i)\n                bounds.right = i;\n            if (bounds.top > j)\n                bounds.top = j;\n            if (bounds.bottom < j)\n                bounds.bottom = j;\n        });\n        return bounds;\n    }\n    update(fn) {\n        let i, j;\n        for (i = 0; i < this.width; i++) {\n            for (j = 0; j < this.height; j++) {\n                this[i][j] = fn(this[i][j], i, j, this);\n            }\n        }\n    }\n    updateRect(x, y, width, height, fn) {\n        let i, j;\n        for (i = x; i < x + width; i++) {\n            for (j = y; j < y + height; j++) {\n                if (this.hasXY(i, j)) {\n                    this[i][j] = fn(this[i][j], i, j, this);\n                }\n            }\n        }\n    }\n    updateCircle(x, y, radius, fn) {\n        let i, j;\n        for (i = Math.max(0, x - radius - 1); i < Math.min(this.width, x + radius + 1); i++) {\n            for (j = Math.max(0, y - radius - 1); j < Math.min(this.height, y + radius + 1); j++) {\n                if (this.hasXY(i, j) && (((i - x) * (i - x) + (j - y) * (j - y)) < radius * radius + radius)) { // + radius softens the circle\n                    this[i][j] = fn(this[i][j], i, j, this);\n                }\n            }\n        }\n    }\n    // @ts-ignore\n    fill(v = 1) {\n        const fn = (typeof v === 'function') ? v : (() => v);\n        this.update(fn);\n    }\n    fillRect(x, y, w, h, v = 1) {\n        const fn = (typeof v === 'function') ? v : (() => v);\n        this.updateRect(x, y, w, h, fn);\n    }\n    fillCircle(x, y, radius, v = 1) {\n        const fn = (typeof v === 'function') ? v : (() => v);\n        this.updateCircle(x, y, radius, fn);\n    }\n    replace(findValue, replaceValue) {\n        this.update((v) => (v == findValue) ? replaceValue : v);\n    }\n    copy(from) {\n        // TODO - check width, height?\n        this.update((_, i, j) => from[i][j]);\n    }\n    count(match) {\n        const fn = (typeof match === 'function') ? match : ((v) => v == match);\n        let count = 0;\n        this.forEach((v, i, j) => { if (fn(v, i, j, this))\n            ++count; });\n        return count;\n    }\n    dump(fmtFn) {\n        dumpRect(this, 0, 0, this.width, this.height, fmtFn);\n    }\n    closestMatchingXY(x, y, fn) {\n        let bestLoc = [-1, -1];\n        let bestDistance = this.width + this.height;\n        this.forEach((v, i, j) => {\n            if (fn(v, i, j, this)) {\n                const dist = Utils.distanceBetween(x, y, i, j);\n                if (dist < bestDistance) {\n                    bestLoc[0] = i;\n                    bestLoc[1] = j;\n                    bestDistance = dist;\n                }\n                else if (dist == bestDistance && random.chance(50)) {\n                    bestLoc[0] = i;\n                    bestLoc[1] = j;\n                }\n            }\n        });\n        return bestLoc;\n    }\n    firstMatchingXY(v) {\n        const fn = (typeof v === 'function') ? v : ((c) => v == c);\n        for (let i = 0; i < this.width; ++i) {\n            for (let j = 0; j < this.height; ++j) {\n                if (fn(this[i][j], i, j, this)) {\n                    return [i, j];\n                }\n            }\n        }\n        return [-1, -1];\n    }\n    randomMatchingXY(v, deterministic = false) {\n        let locationCount = 0;\n        let i, j, index;\n        const fn = (typeof v === 'function') ? v : ((c) => v == c);\n        locationCount = 0;\n        this.forEach((v, i, j) => {\n            if (fn(v, i, j, this)) {\n                locationCount++;\n            }\n        });\n        if (locationCount == 0) {\n            return [-1, -1];\n        }\n        else if (deterministic) {\n            index = Math.floor(locationCount / 2);\n        }\n        else {\n            index = random.range(0, locationCount - 1);\n        }\n        for (i = 0; i < this.width && index >= 0; i++) {\n            for (j = 0; j < this.height && index >= 0; j++) {\n                if (fn(this[i][j], i, j, this)) {\n                    if (index == 0) {\n                        return [i, j];\n                    }\n                    index--;\n                }\n            }\n        }\n        return [-1, -1];\n    }\n    matchingXYNear(x, y, v, deterministic = false) {\n        let loc = [];\n        let i, j, k, candidateLocs, randIndex;\n        const fn = (typeof v === 'function') ? v : ((n) => n == v);\n        candidateLocs = 0;\n        // count up the number of candidate locations\n        for (k = 0; k < Math.max(this.width, this.height) && !candidateLocs; k++) {\n            for (i = x - k; i <= x + k; i++) {\n                for (j = y - k; j <= y + k; j++) {\n                    if (this.hasXY(i, j)\n                        && (i == x - k || i == x + k || j == y - k || j == y + k)\n                        && fn(this[i][j], i, j, this)) {\n                        candidateLocs++;\n                    }\n                }\n            }\n        }\n        if (candidateLocs == 0) {\n            return null;\n        }\n        // and pick one\n        if (deterministic) {\n            randIndex = 1 + Math.floor(candidateLocs / 2);\n        }\n        else {\n            randIndex = 1 + random.number(candidateLocs);\n        }\n        for (k = 0; k < Math.max(this.width, this.height); k++) {\n            for (i = x - k; i <= x + k; i++) {\n                for (j = y - k; j <= y + k; j++) {\n                    if (this.hasXY(i, j)\n                        && (i == x - k || i == x + k || j == y - k || j == y + k)\n                        && fn(this[i][j], i, j, this)) {\n                        if (--randIndex == 0) {\n                            loc[0] = i;\n                            loc[1] = j;\n                            return loc;\n                        }\n                    }\n                }\n            }\n        }\n        // brogueAssert(false);\n        return null; // should never reach this point\n    }\n    // Rotates around the cell, counting up the number of distinct strings of neighbors with the same test result in a single revolution.\n    //\t\tZero means there are no impassable tiles adjacent.\n    //\t\tOne means it is adjacent to a wall.\n    //\t\tTwo means it is in a hallway or something similar.\n    //\t\tThree means it is the center of a T-intersection or something similar.\n    //\t\tFour means it is in the intersection of two hallways.\n    //\t\tFive or more means there is a bug.\n    arcCount(x, y, testFn) {\n        let arcCount, dir, oldX, oldY, newX, newY;\n        // brogueAssert(grid.hasXY(x, y));\n        testFn = testFn || Utils.IDENTITY;\n        arcCount = 0;\n        for (dir = 0; dir < CDIRS.length; dir++) {\n            oldX = x + CDIRS[(dir + 7) % 8][0];\n            oldY = y + CDIRS[(dir + 7) % 8][1];\n            newX = x + CDIRS[dir][0];\n            newY = y + CDIRS[dir][1];\n            // Counts every transition from passable to impassable or vice-versa on the way around the cell:\n            if ((this.hasXY(newX, newY) && testFn(this[newX][newY], newX, newY, this))\n                != (this.hasXY(oldX, oldY) && testFn(this[oldX][oldY], oldX, oldY, this))) {\n                arcCount++;\n            }\n        }\n        return Math.floor(arcCount / 2); // Since we added one when we entered a wall and another when we left.\n    }\n}\nexport function make(w, h, v) {\n    return new Grid(w, h, v);\n}\n// @ts-ignore\nlet GRID_ACTIVE_COUNT = 0;\n// @ts-ignore\nlet GRID_ALLOC_COUNT = 0;\n// @ts-ignore\nlet GRID_CREATE_COUNT = 0;\n// @ts-ignore\nlet GRID_FREE_COUNT = 0;\n// mallocing two-dimensional arrays! dun dun DUN!\nexport function alloc(w, h, v = 0) {\n    w = w || 100;\n    h = h || 34;\n    v = v || 0;\n    ++GRID_ACTIVE_COUNT;\n    ++GRID_ALLOC_COUNT;\n    let grid = GRID_CACHE.pop();\n    if (!grid) {\n        ++GRID_CREATE_COUNT;\n        return make(w, h, v);\n    }\n    return grid.resize(w, h, v);\n}\n// Grid.alloc = alloc;\nexport function free(grid) {\n    if (grid) {\n        GRID_CACHE.push(grid);\n        ++GRID_FREE_COUNT;\n        --GRID_ACTIVE_COUNT;\n    }\n}\n// Grid.free = free;\n// function gridMapCellsInCircle(grid, x, y, radius, fn) {\n//     let i, j;\n//\n// \t\t// let maxRadius = Math.ceil(radius);\n// \t\tconst results = [];\n//\n// \t\t// const maxW = Math.max(x, grid.width - x - 1);\n// \t\t// const maxH = Math.max(y, grid.height - y - 1);\n// \t\t// maxRadius = Math.min(maxRadius, maxW + maxH);\n//\n//     // for (i = Math.max(0, x - maxRadius - 1); i < Math.min(grid.width, x + maxRadius + 1); i++) {\n//     //     for (j = Math.max(0, y - maxRadius - 1); j < Math.min(grid.height, y + maxRadius + 1); j++) {\n// \t\tfor (i = Math.max(0, x - radius - 1); i < Math.min(grid.width, x + radius + 1); i++) {\n//         for (j = Math.max(0, y - radius - 1); j < Math.min(grid.height, y + radius + 1); j++) {\n//             if ((i-x)*(i-x) + (j-y)*(j-y) < radius * radius + radius) {\t// + radius softens the circle\n//                 results.push(fn(grid[i][j], i, j));\n//             }\n//         }\n//     }\n// \t\treturn results;\n// }\n//\n// Grid.mapCellsInCircle = gridMapCellsInCircle;\nexport function dump(grid, fmtFn) {\n    dumpRect(grid, 0, 0, grid.width, grid.height, fmtFn);\n}\n// Grid.dump = dump;\nfunction _formatGridValue(v) {\n    if (v === false) {\n        return ' ';\n    }\n    else if (v === true) {\n        return 'T';\n    }\n    else if (v < 10) {\n        return '' + v;\n    }\n    else if (v < 36) {\n        return String.fromCharCode('a'.charCodeAt(0) + v - 10);\n    }\n    else if (v < 62) {\n        return String.fromCharCode('A'.charCodeAt(0) + v - 10 - 26);\n    }\n    else if (typeof v === 'string') {\n        return v[0];\n    }\n    else {\n        return '#';\n    }\n}\nexport function dumpRect(grid, left, top, width, height, fmtFn) {\n    let i, j;\n    fmtFn = fmtFn || _formatGridValue;\n    left = Utils.clamp(left, 0, grid.width - 2);\n    top = Utils.clamp(top, 0, grid.height - 2);\n    const right = Utils.clamp(left + width, 1, grid.width - 1);\n    const bottom = Utils.clamp(top + height, 1, grid.height - 1);\n    let output = [];\n    for (j = top; j <= bottom; j++) {\n        let line = ('' + j + ']').padStart(3, ' ');\n        for (i = left; i <= right; i++) {\n            if (i % 10 == 0) {\n                line += ' ';\n            }\n            const v = grid[i][j];\n            line += fmtFn(v, i, j)[0];\n        }\n        output.push(line);\n    }\n    console.log(output.join('\\n'));\n}\n// Grid.dumpRect = dumpRect;\nexport function dumpAround(grid, x, y, radius) {\n    dumpRect(grid, x - radius, y - radius, 2 * radius, 2 * radius);\n}\n// Grid.dumpAround = dumpAround;\nexport function findAndReplace(grid, findValueMin, findValueMax, fillValue) {\n    grid.update((v) => {\n        if (v >= findValueMin && v <= findValueMax) {\n            return fillValue;\n        }\n        return v;\n    });\n}\n// Grid.findAndReplace = findAndReplace;\n// Flood-fills the grid from (x, y) along cells that are within the eligible range.\n// Returns the total count of filled cells.\nexport function floodFillRange(grid, x, y, eligibleValueMin = 0, eligibleValueMax = 0, fillValue = 0) {\n    let dir;\n    let newX, newY, fillCount = 1;\n    if (fillValue >= eligibleValueMin && fillValue <= eligibleValueMax) {\n        throw new Error('Invalid grid flood fill');\n    }\n    grid[x][y] = fillValue;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        if (grid.hasXY(newX, newY)\n            && grid[newX][newY] >= eligibleValueMin\n            && grid[newX][newY] <= eligibleValueMax) {\n            fillCount += floodFillRange(grid, newX, newY, eligibleValueMin, eligibleValueMax, fillValue);\n        }\n    }\n    return fillCount;\n}\n// Grid.floodFillRange = floodFillRange;\nexport function invert(grid) {\n    grid.update((v) => !v);\n}\n// Grid.invert = invert;\nexport function intersection(onto, a, b) {\n    b = b || onto;\n    onto.update((_, i, j) => a[i][j] && b[i][j]);\n}\n// Grid.intersection = intersection;\nexport function unite(onto, a, b) {\n    b = b || onto;\n    onto.update((_, i, j) => b[i][j] || a[i][j]);\n}\n// Grid.unite = unite;\nexport function closestLocationWithValue(grid, x, y, value = 0) {\n    return grid.closestMatchingXY(x, y, (v) => v == value);\n}\n// Grid.closestLocationWithValue = closestLocationWithValue;\n// Takes a grid as a mask of valid locations, chooses one randomly and returns it as (x, y).\n// If there are no valid locations, returns (-1, -1).\nexport function randomLocationWithValue(grid, validValue) {\n    return grid.randomMatchingXY((v) => v == validValue);\n}\n// Grid.randomLocationWithValue = randomLocationWithValue;\nexport function getQualifyingLocNear(grid, x, y, deterministic = false) {\n    return grid.matchingXYNear(x, y, ((v) => !!v), deterministic);\n}\n// Grid.getQualifyingLocNear = getQualifyingLocNear;\nexport function leastPositiveValue(grid) {\n    let least = Number.MAX_SAFE_INTEGER;\n    grid.forEach((v) => {\n        if (v > 0 && (v < least)) {\n            least = v;\n        }\n    });\n    return least;\n}\n// Grid.leastPositiveValue = leastPositiveValue;\n// Finds the lowest positive number in a grid, chooses one location with that number randomly and returns it as (x, y).\n// If there are no valid locations, returns (-1, -1).\nexport function randomLeastPositiveLocation(grid, deterministic = false) {\n    const targetValue = leastPositiveValue(grid);\n    return grid.randomMatchingXY(((v) => v == targetValue), deterministic);\n}\n// Grid.randomLeastPositiveLocation = randomLeastPositiveLocation;\n// Marks a cell as being a member of blobNumber, then recursively iterates through the rest of the blob\nexport function floodFill(grid, x, y, matchValue, fillValue) {\n    let dir;\n    let newX, newY, numberOfCells = 1;\n    const matchFn = (typeof matchValue == 'function') ? matchValue : ((v) => v == matchValue);\n    const fillFn = (typeof fillValue == 'function') ? fillValue : (() => fillValue);\n    grid[x][y] = fillFn(grid[x][y], x, y, grid);\n    // Iterate through the four cardinal neighbors.\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        if (!grid.hasXY(newX, newY)) {\n            continue;\n        }\n        if (matchFn(grid[newX][newY], newX, newY, grid)) { // If the neighbor is an unmarked region cell,\n            numberOfCells += floodFill(grid, newX, newY, matchFn, fillFn); // then recurse.\n        }\n    }\n    return numberOfCells;\n}\n// Grid.floodFill = floodFill;\nexport function offsetZip(destGrid, srcGrid, srcToDestX, srcToDestY, value) {\n    const fn = (typeof value === 'function') ? value : ((_, s, dx, dy) => destGrid[dx][dy] = value || s);\n    srcGrid.forEach((c, i, j) => {\n        const destX = i + srcToDestX;\n        const destY = j + srcToDestY;\n        if (!destGrid.hasXY(destX, destY))\n            return;\n        if (!c)\n            return;\n        fn(destGrid[destX][destY], c, destX, destY, i, j, destGrid, srcGrid);\n    });\n}\n// Grid.offsetZip = offsetZip;\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(grid, x, y, isOpen = 1) {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n    const fnOpen = (typeof isOpen === 'function') ? isOpen : ((v, _x, _y, _grid) => v == isOpen);\n    solutionDir = Utils.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (grid.hasXY(oppX, oppY)\n            && grid.hasXY(newX, newY)\n            && fnOpen(grid[oppX][oppY], oppX, oppY, grid)) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != Utils.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return Utils.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\n// Grid.directionOfDoorSite = directionOfDoorSite;\nfunction cellularAutomataRound(grid, birthParameters /* char[9] */, survivalParameters /* char[9] */) {\n    let i, j, nbCount, newX, newY;\n    let dir;\n    let buffer2;\n    buffer2 = alloc(grid.width, grid.height, 0);\n    buffer2.copy(grid); // Make a backup of grid in buffer2, so that each generation is isolated.\n    let didSomething = false;\n    for (i = 0; i < grid.width; i++) {\n        for (j = 0; j < grid.height; j++) {\n            nbCount = 0;\n            for (dir = 0; dir < DIRS.length; dir++) {\n                newX = i + DIRS[dir][0];\n                newY = j + DIRS[dir][1];\n                if (grid.hasXY(newX, newY)\n                    && buffer2[newX][newY]) {\n                    nbCount++;\n                }\n            }\n            if (!buffer2[i][j] && birthParameters[nbCount] == 't') {\n                grid[i][j] = 1; // birth\n                didSomething = true;\n            }\n            else if (buffer2[i][j] && survivalParameters[nbCount] == 't') {\n                // survival\n            }\n            else {\n                grid[i][j] = 0; // death\n                didSomething = true;\n            }\n        }\n    }\n    free(buffer2);\n    return didSomething;\n}\n// Loads up **grid with the results of a cellular automata simulation.\nexport function fillBlob(grid, roundCount, minBlobWidth, minBlobHeight, maxBlobWidth, maxBlobHeight, percentSeeded, birthParameters, survivalParameters) {\n    let i, j, k;\n    let blobNumber, blobSize, topBlobNumber, topBlobSize;\n    let topBlobMinX, topBlobMinY, topBlobMaxX, topBlobMaxY, blobWidth, blobHeight;\n    let foundACellThisLine;\n    if (minBlobWidth >= maxBlobWidth) {\n        minBlobWidth = Math.round(0.75 * maxBlobWidth);\n        maxBlobWidth = Math.round(1.25 * maxBlobWidth);\n    }\n    if (minBlobHeight >= maxBlobHeight) {\n        minBlobHeight = Math.round(0.75 * maxBlobHeight);\n        maxBlobHeight = Math.round(1.25 * maxBlobHeight);\n    }\n    const left = Math.floor((grid.width - maxBlobWidth) / 2);\n    const top = Math.floor((grid.height - maxBlobHeight) / 2);\n    // Generate blobs until they satisfy the minBlobWidth and minBlobHeight restraints\n    do {\n        // Clear buffer.\n        grid.fill(0);\n        // Fill relevant portion with noise based on the percentSeeded argument.\n        for (i = 0; i < maxBlobWidth; i++) {\n            for (j = 0; j < maxBlobHeight; j++) {\n                grid[i + left][j + top] = (random.chance(percentSeeded) ? 1 : 0);\n            }\n        }\n        // Some iterations of cellular automata\n        for (k = 0; k < roundCount; k++) {\n            if (!cellularAutomataRound(grid, birthParameters, survivalParameters)) {\n                k = roundCount; // cellularAutomataRound did not make any changes\n            }\n        }\n        // Now to measure the result. These are best-of variables; start them out at worst-case values.\n        topBlobSize = 0;\n        topBlobNumber = 0;\n        topBlobMinX = grid.width;\n        topBlobMaxX = 0;\n        topBlobMinY = grid.height;\n        topBlobMaxY = 0;\n        // Fill each blob with its own number, starting with 2 (since 1 means floor), and keeping track of the biggest:\n        blobNumber = 2;\n        for (i = 0; i < grid.width; i++) {\n            for (j = 0; j < grid.height; j++) {\n                if (grid[i][j] == 1) { // an unmarked blob\n                    // Mark all the cells and returns the total size:\n                    blobSize = floodFill(grid, i, j, 1, blobNumber);\n                    if (blobSize > topBlobSize) { // if this blob is a new record\n                        topBlobSize = blobSize;\n                        topBlobNumber = blobNumber;\n                    }\n                    blobNumber++;\n                }\n            }\n        }\n        // Figure out the top blob's height and width:\n        // First find the max & min x:\n        for (i = 0; i < grid.width; i++) {\n            foundACellThisLine = false;\n            for (j = 0; j < grid.height; j++) {\n                if (grid[i][j] == topBlobNumber) {\n                    foundACellThisLine = true;\n                    break;\n                }\n            }\n            if (foundACellThisLine) {\n                if (i < topBlobMinX) {\n                    topBlobMinX = i;\n                }\n                if (i > topBlobMaxX) {\n                    topBlobMaxX = i;\n                }\n            }\n        }\n        // Then the max & min y:\n        for (j = 0; j < grid.height; j++) {\n            foundACellThisLine = false;\n            for (i = 0; i < grid.width; i++) {\n                if (grid[i][j] == topBlobNumber) {\n                    foundACellThisLine = true;\n                    break;\n                }\n            }\n            if (foundACellThisLine) {\n                if (j < topBlobMinY) {\n                    topBlobMinY = j;\n                }\n                if (j > topBlobMaxY) {\n                    topBlobMaxY = j;\n                }\n            }\n        }\n        blobWidth = (topBlobMaxX - topBlobMinX) + 1;\n        blobHeight = (topBlobMaxY - topBlobMinY) + 1;\n    } while (blobWidth < minBlobWidth\n        || blobHeight < minBlobHeight\n        || topBlobNumber == 0);\n    // Replace the winning blob with 1's, and everything else with 0's:\n    for (i = 0; i < grid.width; i++) {\n        for (j = 0; j < grid.height; j++) {\n            if (grid[i][j] == topBlobNumber) {\n                grid[i][j] = 1;\n            }\n            else {\n                grid[i][j] = 0;\n            }\n        }\n    }\n    // Populate the returned variables.\n    return { x: topBlobMinX, y: topBlobMinY, width: blobWidth, height: blobHeight };\n}\n// Grid.fillBlob = fillBlob;\n//# sourceMappingURL=grid.js.map","import * as utils_1 from './utils';\nexport { utils_1 as utils };\nimport * as range_1 from './range';\nexport { range_1 as range };\nimport * as flag_1 from './flag';\nexport { flag_1 as flag };\nimport * as grid_1 from './grid';\nexport { grid_1 as grid };\nexport { flags } from './flag';\nexport { cosmetic, random } from './random';\nimport * as Random from './random';\nimport * as Range from './range';\nimport * as Grid from './grid';\nexport function configure(config) {\n    if (config.random) {\n        Random.configure(config.random);\n    }\n}\nexport var types = {\n    Random: Random.Random,\n    Range: Range.Range,\n    Grid: Grid.Grid,\n};\n//# sourceMappingURL=gw.js.map"],"names":["DIRS","CLOCK_DIRS","IDENTITY","x","clamp","v","min","max","src","y","distanceBetween","x1","y1","x2","y2","Math","abs","dirBetween","toX","toY","diffX","diffY","absX","absY","sign","setDefaults","obj","def","custom","dest","Object","keys","forEach","key","origKey","defValue","parts","split","length","shift","undefined","ERROR","current","Array","isArray","slice","message","Error","a","b","pct","dx","dy","floor","dir","x0","y0","findIndex","result","push","fn","diff","steps","c","last","step","currentXValue","maxXValue","sin","PI","omit","map","t","trim","includes","updated","copy","clear","nullify","clone","assignField","field","val","search","concat","fields","data","f","args","console","warn","member","_default","arg","some","av","arr","reduce","root","count","next","chain","entry","item","index","name","prev","RANDOM_CONFIG","make","random","bind","lotteryDrawArray","rand","frequencies","i","maxFreq","randIndex","range","Random","[object Object]","this","_fn","value","Number","MAX_SAFE_INTEGER","number","lo","hi","sides","addend","total","mult","weights","entries","_","weight","lotteryDrawObject","list","values","fromIndex","toIndex","r","buf","arguments","n","shuffle","percent","outOf","clumps","numSides","cosmetic","Range","lower","upper","rng","_rng","clumped","config","JSON","stringify","RE","results","exec","parseInt","base","std","parseFloat","flags","N","flagObj","inverse","out","fl","join","u","startsWith","substring","flagName","flag","GRID_CACHE","Utils.DIRS","CDIRS","Utils.CLOCK_DIRS","makeArray","l","Grid","w","h","super","j","_width","_height","width","height","col","only4dirs","maxIndex","d","hasXY","radius","bounds","left","top","right","bottom","update","updateRect","updateCircle","findValue","replaceValue","from","match","fmtFn","dumpRect","bestLoc","bestDistance","dist","Utils.distanceBetween","chance","deterministic","locationCount","k","candidateLocs","loc","testFn","arcCount","oldX","oldY","newX","newY","Utils.IDENTITY","alloc","grid","pop","resize","free","_formatGridValue","String","fromCharCode","charCodeAt","Utils.clamp","output","line","padStart","log","leastPositiveValue","least","floodFill","matchValue","fillValue","numberOfCells","matchFn","fillFn","cellularAutomataRound","birthParameters","survivalParameters","nbCount","buffer2","didSomething","findValueMin","findValueMax","floodFillRange","eligibleValueMin","eligibleValueMax","fillCount","onto","closestMatchingXY","validValue","randomMatchingXY","matchingXYNear","targetValue","destGrid","srcGrid","srcToDestX","srcToDestY","s","destX","destY","isOpen","solutionDir","oppX","oppY","fnOpen","_x","_y","_grid","roundCount","minBlobWidth","minBlobHeight","maxBlobWidth","maxBlobHeight","percentSeeded","blobNumber","blobSize","topBlobNumber","topBlobSize","topBlobMinX","topBlobMinY","topBlobMaxX","topBlobMaxY","blobWidth","blobHeight","foundACellThisLine","round","fill","types","Random.Random","Range.Range","Grid.Grid","opts","seed","Random.configure"],"mappings":"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"}