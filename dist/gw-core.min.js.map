{"version":3,"file":"gw-core.min.js","sources":["../js/utils.js","../js/random.js","../js/range.js","../js/flag.js","../js/grid.js","../js/gw.js"],"sourcesContent":["/**\n * GW.utils\n * @module utils\n */\n// DIRS are organized clockwise\n// - first 4 are arrow directions\n//   >> rotate 90 degrees clockwise ==>> newIndex = (oldIndex + 1) % 4\n//   >> opposite direction ==>> oppIndex = (index + 2) % 4\n// - last 4 are diagonals\n//   >> rotate 90 degrees clockwise ==>> newIndex = 4 + (oldIndex + 1) % 4;\n//   >> opposite diagonal ==>> newIndex = 4 + (index + 2) % 4;\nexport const DIRS = [\n    [0, 1],\n    [1, 0],\n    [0, -1],\n    [-1, 0],\n    [1, 1],\n    [1, -1],\n    [-1, -1],\n    [-1, 1],\n];\nexport const NO_DIRECTION = -1;\nexport const UP = 0;\nexport const RIGHT = 1;\nexport const DOWN = 2;\nexport const LEFT = 3;\nexport const RIGHT_UP = 4;\nexport const RIGHT_DOWN = 5;\nexport const LEFT_DOWN = 6;\nexport const LEFT_UP = 7;\n// CLOCK DIRS are organized clockwise, starting at UP\n// >> opposite = (index + 4) % 8\n// >> 90 degrees rotate right = (index + 2) % 8\n// >> 90 degrees rotate left = (8 + index - 2) % 8\nexport const CLOCK_DIRS = [\n    [0, 1],\n    [1, 1],\n    [1, 0],\n    [1, -1],\n    [0, -1],\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n];\nexport function NOOP() { }\nexport function TRUE() {\n    return true;\n}\nexport function FALSE() {\n    return false;\n}\nexport function ONE() {\n    return 1;\n}\nexport function ZERO() {\n    return 0;\n}\nexport function IDENTITY(x) {\n    return x;\n}\n/**\n * clamps a value between min and max (inclusive)\n * @param v {Number} the value to clamp\n * @param min {Number} the minimum value\n * @param max {Number} the maximum value\n * @returns {Number} the clamped value\n */\nexport function clamp(v, min, max) {\n    if (v < min)\n        return min;\n    if (v > max)\n        return max;\n    return v;\n}\nexport function x(src) {\n    // @ts-ignore\n    return src.x || src[0] || 0;\n}\nexport function y(src) {\n    // @ts-ignore\n    return src.y || src[1] || 0;\n}\nexport function copyXY(dest, src) {\n    dest.x = x(src);\n    dest.y = y(src);\n}\nexport function addXY(dest, src) {\n    dest.x += x(src);\n    dest.y += y(src);\n}\nexport function equalsXY(dest, src) {\n    return dest.x == x(src) && dest.y == y(src);\n}\nexport function lerpXY(a, b, pct) {\n    if (pct > 1) {\n        pct = pct / 100;\n    }\n    pct = clamp(pct, 0, 1);\n    const dx = x(b) - x(a);\n    const dy = y(b) - y(a);\n    const x2 = x(a) + Math.floor(dx * pct);\n    const y2 = y(a) + Math.floor(dy * pct);\n    return [x2, y2];\n}\nexport function distanceBetween(x1, y1, x2, y2) {\n    const x = Math.abs(x1 - x2);\n    const y = Math.abs(y1 - y2);\n    const min = Math.min(x, y);\n    return x + y - 0.6 * min;\n}\nexport function distanceFromTo(a, b) {\n    return distanceBetween(x(a), y(a), x(b), y(b));\n}\nexport function calcRadius(x, y) {\n    return distanceBetween(0, 0, x, y);\n}\nexport function dirBetween(x, y, toX, toY) {\n    let diffX = toX - x;\n    let diffY = toY - y;\n    if (diffX && diffY) {\n        const absX = Math.abs(diffX);\n        const absY = Math.abs(diffY);\n        if (absX >= 2 * absY) {\n            diffY = 0;\n        }\n        else if (absY >= 2 * absX) {\n            diffX = 0;\n        }\n    }\n    return [Math.sign(diffX), Math.sign(diffY)];\n}\nexport function dirFromTo(a, b) {\n    return dirBetween(x(a), y(a), x(b), y(b));\n}\nexport function dirIndex(dir) {\n    const x0 = x(dir);\n    const y0 = y(dir);\n    return DIRS.findIndex((a) => a[0] == x0 && a[1] == y0);\n}\nexport function isOppositeDir(a, b) {\n    if (a[0] + b[0] != 0)\n        return false;\n    if (a[1] + b[1] != 0)\n        return false;\n    return true;\n}\nexport function isSameDir(a, b) {\n    return a[0] == b[0] && a[1] == b[1];\n}\nexport function dirSpread(dir) {\n    const result = [dir];\n    if (dir[0] == 0) {\n        result.push([1, dir[1]]);\n        result.push([-1, dir[1]]);\n    }\n    else if (dir[1] == 0) {\n        result.push([dir[0], 1]);\n        result.push([dir[0], -1]);\n    }\n    else {\n        result.push([dir[0], 0]);\n        result.push([0, dir[1]]);\n    }\n    return result;\n}\nexport function stepFromTo(a, b, fn) {\n    const x0 = x(a);\n    const y0 = y(a);\n    const diff = [x(b) - x0, y(b) - y0];\n    const steps = Math.abs(diff[0]) + Math.abs(diff[1]);\n    const c = [0, 0];\n    const last = [99999, 99999];\n    for (let step = 0; step <= steps; ++step) {\n        c[0] = x0 + Math.floor((diff[0] * step) / steps);\n        c[1] = y0 + Math.floor((diff[1] * step) / steps);\n        if (c[0] != last[0] || c[1] != last[1]) {\n            fn(c[0], c[1]);\n        }\n        last[0] = c[0];\n        last[1] = c[1];\n    }\n}\n// Draws the smooth gradient that appears on a button when you hover over or depress it.\n// Returns the percentage by which the current tile should be averaged toward a hilite color.\nexport function smoothHiliteGradient(currentXValue, maxXValue) {\n    return Math.floor(100 * Math.sin((Math.PI * currentXValue) / maxXValue));\n}\nfunction assignField(dest, src, key) {\n    const current = dest[key];\n    const updated = src[key];\n    if (current && current.copy && updated) {\n        current.copy(updated);\n    }\n    else if (current && current.clear && !updated) {\n        current.clear();\n    }\n    else if (current && current.nullify && !updated) {\n        current.nullify();\n    }\n    else if (updated && updated.clone) {\n        dest[key] = updated.clone(); // just use same object (shallow copy)\n    }\n    else if (updated && Array.isArray(updated)) {\n        dest[key] = updated.slice();\n    }\n    else if (current && Array.isArray(current)) {\n        current.length = 0;\n    }\n    else {\n        dest[key] = updated;\n    }\n}\n// export function copyObject(dest, src) {\n//   Object.keys(dest).forEach( (key) => {\n//     assignField(dest, src, key);\n//   });\n// }\n// export function assignObject(dest, src) {\n//   Object.keys(src).forEach( (key) => {\n//     assignField(dest, src, key);\n//   });\n// }\nexport function assignOmitting(omit, dest, src) {\n    if (typeof omit === \"string\") {\n        omit = omit.split(/[,|]/g).map((t) => t.trim());\n    }\n    Object.keys(src).forEach((key) => {\n        if (omit.includes(key))\n            return;\n        assignField(dest, src, key);\n    });\n}\nexport function setDefault(obj, field, val) {\n    if (obj[field] === undefined) {\n        obj[field] = val;\n    }\n}\nexport function setDefaults(obj, def, custom = null) {\n    let dest;\n    Object.keys(def).forEach((key) => {\n        const origKey = key;\n        let defValue = def[key];\n        dest = obj;\n        // allow for => 'stats.health': 100\n        const parts = key.split(\".\");\n        while (parts.length > 1) {\n            key = parts.shift();\n            if (dest[key] === undefined) {\n                dest = dest[key] = {};\n            }\n            else if (typeof dest[key] !== \"object\") {\n                ERROR(\"Trying to set default member on non-object config item: \" + origKey);\n            }\n            else {\n                dest = dest[key];\n            }\n        }\n        key = parts.shift();\n        let current = dest[key];\n        // console.log('def - ', key, current, defValue, obj, dest);\n        if (custom && custom(dest, key, current, defValue)) {\n            // do nothing\n        }\n        else if (current === undefined) {\n            if (defValue === null) {\n                dest[key] = null;\n            }\n            else if (Array.isArray(defValue)) {\n                dest[key] = defValue.slice();\n            }\n            else if (typeof defValue === \"object\") {\n                dest[key] = defValue; // Object.assign({}, defValue); -- this breaks assigning a Color object as a default...\n            }\n            else {\n                dest[key] = defValue;\n            }\n        }\n    });\n}\nexport function kindDefaults(obj, def) {\n    function custom(dest, key, current, defValue) {\n        if (key.search(/[fF]lags$/) < 0)\n            return false;\n        if (!current) {\n            current = [];\n        }\n        else if (typeof current == \"string\") {\n            current = current.split(/[,|]/).map((t) => t.trim());\n        }\n        else if (!Array.isArray(current)) {\n            current = [current];\n        }\n        if (typeof defValue === \"string\") {\n            defValue = defValue.split(/[,|]/).map((t) => t.trim());\n        }\n        else if (!Array.isArray(defValue)) {\n            defValue = [defValue];\n        }\n        // console.log('flags', key, defValue, current);\n        dest[key] = defValue.concat(current);\n        return true;\n    }\n    return setDefaults(obj, def, custom);\n}\nexport function pick(obj, ...fields) {\n    const data = {};\n    fields.forEach((f) => {\n        const v = obj[f];\n        if (v !== undefined) {\n            data[f] = v;\n        }\n    });\n    return data;\n}\nexport function clearObject(obj) {\n    Object.keys(obj).forEach((key) => (obj[key] = undefined));\n}\nexport function ERROR(message) {\n    throw new Error(message);\n}\nexport function WARN(...args) {\n    console.warn(...args);\n}\nexport function getOpt(obj, member, _default) {\n    const v = obj[member];\n    if (v === undefined)\n        return _default;\n    return v;\n}\nexport function firstOpt(field, ...args) {\n    for (let arg of args) {\n        if (typeof arg !== \"object\" || Array.isArray(arg)) {\n            return arg;\n        }\n        if (arg[field] !== undefined) {\n            return arg[field];\n        }\n    }\n    return undefined;\n}\nexport function arraysIntersect(a, b) {\n    return a.some((av) => b.includes(av));\n}\nexport function sum(arr) {\n    return arr.reduce((a, b) => a + b);\n}\nexport function chainLength(root) {\n    let count = 0;\n    while (root) {\n        count += 1;\n        root = root.next;\n    }\n    return count;\n}\nexport function chainIncludes(chain, entry) {\n    while (chain && chain !== entry) {\n        chain = chain.next;\n    }\n    return chain === entry;\n}\nexport function eachChain(item, fn) {\n    let index = 0;\n    while (item) {\n        const next = item.next;\n        fn(item, index++);\n        item = next;\n    }\n    return index; // really count\n}\nexport function addToChain(obj, name, entry) {\n    entry.next = obj[name] || null;\n    obj[name] = entry;\n    return true;\n}\nexport function removeFromChain(obj, name, entry) {\n    const root = obj[name];\n    if (root === entry) {\n        obj[name] = entry.next || null;\n        entry.next = null;\n        return true;\n    }\n    else if (!root) {\n        return false;\n    }\n    else {\n        let prev = root;\n        let current = prev.next;\n        while (current && current !== entry) {\n            prev = current;\n            current = prev.next;\n        }\n        if (current === entry) {\n            prev.next = current.next || null;\n            entry.next = null;\n            return true;\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=utils.js.map","const RANDOM_CONFIG = {\n    make: () => {\n        return Math.random.bind(Math);\n    },\n};\nexport function configure(opts) {\n    if (opts.make) {\n        if (typeof opts.make !== \"function\")\n            throw new Error(\"Random make parameter must be a function.\");\n        if (typeof opts.make(12345) !== \"function\")\n            throw new Error(\"Random make function must accept a numeric seed and return a random function.\");\n        RANDOM_CONFIG.make = opts.make;\n        random.seed();\n        cosmetic.seed();\n    }\n}\nfunction lotteryDrawArray(rand, frequencies) {\n    let i, maxFreq, randIndex;\n    maxFreq = 0;\n    for (i = 0; i < frequencies.length; i++) {\n        maxFreq += frequencies[i];\n    }\n    if (maxFreq <= 0) {\n        console.warn(\"Lottery Draw - no frequencies\", frequencies, frequencies.length);\n        return 0;\n    }\n    randIndex = rand.range(0, maxFreq - 1);\n    for (i = 0; i < frequencies.length; i++) {\n        if (frequencies[i] > randIndex) {\n            return i;\n        }\n        else {\n            randIndex -= frequencies[i];\n        }\n    }\n    console.warn(\"Lottery Draw failed.\", frequencies, frequencies.length);\n    return 0;\n}\nfunction lotteryDrawObject(rand, weights) {\n    const entries = Object.entries(weights);\n    const frequencies = entries.map(([_, weight]) => weight);\n    const index = lotteryDrawArray(rand, frequencies);\n    return entries[index][0];\n}\nexport class Random {\n    constructor() {\n        this._fn = RANDOM_CONFIG.make();\n    }\n    seed(val) {\n        this._fn = RANDOM_CONFIG.make(val);\n    }\n    value() {\n        return this._fn();\n    }\n    float() {\n        return this.value();\n    }\n    number(max = 0) {\n        max = max || Number.MAX_SAFE_INTEGER;\n        return Math.floor(this._fn() * max);\n    }\n    int(max = 0) {\n        return this.number(max);\n    }\n    range(lo, hi) {\n        if (hi <= lo)\n            return hi;\n        const diff = hi - lo + 1;\n        return lo + this.number(diff);\n    }\n    dice(count, sides, addend = 0) {\n        let total = 0;\n        let mult = 1;\n        if (count < 0) {\n            count = -count;\n            mult = -1;\n        }\n        addend = addend || 0;\n        for (let i = 0; i < count; ++i) {\n            total += this.range(1, sides);\n        }\n        total *= mult;\n        return total + addend;\n    }\n    weighted(weights) {\n        if (Array.isArray(weights)) {\n            return lotteryDrawArray(this, weights);\n        }\n        return lotteryDrawObject(this, weights);\n    }\n    item(list) {\n        if (!Array.isArray(list)) {\n            list = Object.values(list);\n        }\n        return list[this.range(0, list.length - 1)];\n    }\n    key(obj) {\n        return this.item(Object.keys(obj));\n    }\n    shuffle(list, fromIndex = 0, toIndex = 0) {\n        if (arguments.length == 2) {\n            toIndex = fromIndex;\n            fromIndex = 0;\n        }\n        let i, r, buf;\n        toIndex = toIndex || list.length;\n        fromIndex = fromIndex || 0;\n        for (i = fromIndex; i < toIndex; i++) {\n            r = this.range(fromIndex, toIndex - 1);\n            if (i != r) {\n                buf = list[r];\n                list[r] = list[i];\n                list[i] = buf;\n            }\n        }\n        return list;\n    }\n    sequence(n) {\n        const list = [];\n        for (let i = 0; i < n; i++) {\n            list[i] = i;\n        }\n        return this.shuffle(list);\n    }\n    chance(percent, outOf = 100) {\n        if (percent <= 0)\n            return false;\n        if (percent >= outOf)\n            return true;\n        return this.range(0, outOf - 1) < percent;\n    }\n    // Get a random int between lo and hi, inclusive, with probability distribution\n    // affected by clumps.\n    clumped(lo, hi, clumps) {\n        if (hi <= lo) {\n            return lo;\n        }\n        if (clumps <= 1) {\n            return this.range(lo, hi);\n        }\n        let i, total = 0, numSides = Math.floor((hi - lo) / clumps);\n        for (i = 0; i < (hi - lo) % clumps; i++) {\n            total += this.range(0, numSides + 1);\n        }\n        for (; i < clumps; i++) {\n            total += this.range(0, numSides);\n        }\n        return total + lo;\n    }\n}\nexport const random = new Random();\nexport const cosmetic = new Random();\n//# sourceMappingURL=random.js.map","import { random } from \"./random\";\nexport class Range {\n    constructor(lower, upper = 0, clumps = 1, rng) {\n        this._rng = rng || random;\n        if (Array.isArray(lower)) {\n            clumps = lower[2];\n            upper = lower[1];\n            lower = lower[0];\n        }\n        else if (lower instanceof Range) {\n            clumps = lower.clumps;\n            upper = lower.hi;\n            lower = lower.lo;\n        }\n        if (upper < lower) {\n            [upper, lower] = [lower, upper];\n        }\n        this.lo = lower || 0;\n        this.hi = upper || this.lo;\n        this.clumps = clumps || 1;\n    }\n    value() {\n        return this._rng.clumped(this.lo, this.hi, this.clumps);\n    }\n    toString() {\n        if (this.lo >= this.hi) {\n            return \"\" + this.lo;\n        }\n        return `${this.lo}-${this.hi}`;\n    }\n}\nexport function make(config, rng) {\n    if (!config)\n        return new Range(0, 0, 0, rng);\n    if (config instanceof Range)\n        return config; // you can supply a custom range object\n    // if (config.value) return config;  // calc or damage\n    if (typeof config == \"function\")\n        throw new Error(\"Custom range functions not supported - extend Range\");\n    if (config === undefined || config === null)\n        return new Range(0, 0, 0, rng);\n    if (typeof config == \"number\")\n        return new Range(config, config, 1, rng);\n    // @ts-ignore\n    if (config === true || config === false)\n        throw new Error(\"Invalid random config: \" + config);\n    if (Array.isArray(config)) {\n        return new Range(config[0], config[1], config[2], rng);\n    }\n    if (typeof config !== \"string\") {\n        throw new Error(\"Calculations must be strings.  Received: \" + JSON.stringify(config));\n    }\n    if (config.length == 0)\n        return new Range(0, 0, 0, rng);\n    const RE = /^(?:([+-]?\\d*)[Dd](\\d+)([+-]?\\d*)|([+-]?\\d+)-(\\d+):?(\\d+)?|([+-]?\\d+)~(\\d+)|([+-]?\\d+\\.?\\d*))/g;\n    let results;\n    while ((results = RE.exec(config)) !== null) {\n        if (results[2]) {\n            let count = Number.parseInt(results[1]) || 1;\n            const sides = Number.parseInt(results[2]);\n            const addend = Number.parseInt(results[3]) || 0;\n            const lower = addend + count;\n            const upper = addend + count * sides;\n            return new Range(lower, upper, count, rng);\n        }\n        else if (results[4] && results[5]) {\n            const min = Number.parseInt(results[4]);\n            const max = Number.parseInt(results[5]);\n            const clumps = Number.parseInt(results[6]);\n            return new Range(min, max, clumps, rng);\n        }\n        else if (results[7] && results[8]) {\n            const base = Number.parseInt(results[7]);\n            const std = Number.parseInt(results[8]);\n            return new Range(base - 2 * std, base + 2 * std, 3, rng);\n        }\n        else if (results[9]) {\n            const v = Number.parseFloat(results[9]);\n            return new Range(v, v, 1, rng);\n        }\n    }\n    throw new Error(\"Not a valid range - \" + config);\n}\n//# sourceMappingURL=range.js.map","///////////////////////////////////\n// FLAG\nexport function fl(N) {\n    return 1 << N;\n}\nexport function toString(flagObj, value) {\n    const inverse = Object.entries(flagObj).reduce((out, entry) => {\n        const [key, value] = entry;\n        if (value)\n            out[value] = key;\n        return out;\n    }, []);\n    const out = [];\n    for (let index = 0; index < 32; ++index) {\n        const fl = 1 << index;\n        if (value & fl) {\n            out.push(inverse[fl]);\n        }\n    }\n    return out.join(\" | \");\n}\nexport function from(obj, ...args) {\n    let result = 0;\n    for (let index = 0; index < args.length; ++index) {\n        let value = args[index];\n        if (value === undefined)\n            continue;\n        if (typeof value == \"number\") {\n            result |= value;\n            continue; // next\n        }\n        else if (typeof value === \"string\") {\n            value = value\n                .split(/[,|]/)\n                .map((t) => t.trim())\n                .map((u) => {\n                const n = Number.parseInt(u);\n                if (n >= 0)\n                    return n;\n                return u;\n            });\n        }\n        if (Array.isArray(value)) {\n            value.forEach((v) => {\n                if (typeof v == \"string\") {\n                    v = v.trim();\n                    if (v.startsWith(\"!\")) {\n                        // @ts-ignore\n                        const f = obj[v.substring(1)];\n                        result &= ~f;\n                    }\n                    else {\n                        // @ts-ignore\n                        const f = obj[v];\n                        if (f) {\n                            result |= f;\n                        }\n                    }\n                }\n                else if (v === 0) {\n                    // to allow clearing flags when extending objects\n                    result = 0;\n                }\n                else {\n                    result |= v;\n                }\n            });\n        }\n    }\n    return result;\n}\nexport const flags = {};\nexport function install(flagName, flag) {\n    flags[flagName] = flag;\n    return flag;\n}\n//# sourceMappingURL=flag.js.map","import { random } from \"./random\";\nimport * as Utils from \"./utils\";\nconst DIRS = Utils.DIRS;\nconst CDIRS = Utils.CLOCK_DIRS;\nexport function makeArray(l, fn) {\n    if (fn === undefined)\n        return new Array(l).fill(0);\n    fn = fn || (() => 0);\n    const arr = new Array(l);\n    for (let i = 0; i < l; ++i) {\n        arr[i] = fn(i);\n    }\n    return arr;\n}\nfunction _formatGridValue(v) {\n    if (v === false) {\n        return \" \";\n    }\n    else if (v === true) {\n        return \"T\";\n    }\n    else if (v < 10) {\n        return \"\" + v;\n    }\n    else if (v < 36) {\n        return String.fromCharCode(\"a\".charCodeAt(0) + v - 10);\n    }\n    else if (v < 62) {\n        return String.fromCharCode(\"A\".charCodeAt(0) + v - 10 - 26);\n    }\n    else if (typeof v === \"string\") {\n        return v[0];\n    }\n    else {\n        return \"#\";\n    }\n}\nexport class Grid extends Array {\n    constructor(w, h, v) {\n        super(w);\n        for (let x = 0; x < w; ++x) {\n            if (typeof v === \"function\") {\n                this[x] = new Array(h)\n                    .fill(0)\n                    .map((_, i) => v(x, i));\n            }\n            else {\n                this[x] = new Array(h).fill(v);\n            }\n        }\n        this._width = w;\n        this._height = h;\n        // @ts-ignore\n        this.type = v.constructor.name;\n    }\n    get width() {\n        return this._width;\n    }\n    get height() {\n        return this._height;\n    }\n    resize(width, height, v) {\n        const fn = typeof v === \"function\" ? v : () => v;\n        while (this.length < width)\n            this.push([]);\n        let x = 0;\n        let y = 0;\n        for (x = 0; x < width; ++x) {\n            const col = this[x];\n            for (y = 0; y < Math.min(height, col.length); ++y) {\n                col[y] = fn(x, y);\n            }\n            while (col.length < height) {\n                col.push(fn(x, col.length));\n            }\n        }\n        this._width = width;\n        this._height = height;\n        if (this.x !== undefined) {\n            this.x = undefined;\n            this.y = undefined;\n        }\n    }\n    // @ts-ignore\n    forEach(fn) {\n        let i, j;\n        for (i = 0; i < this.width; i++) {\n            for (j = 0; j < this.height; j++) {\n                fn(this[i][j], i, j, this);\n            }\n        }\n    }\n    eachNeighbor(x, y, fn, only4dirs = false) {\n        const maxIndex = only4dirs ? 4 : 8;\n        for (let d = 0; d < maxIndex; ++d) {\n            const dir = DIRS[d];\n            const i = x + dir[0];\n            const j = y + dir[1];\n            if (this.hasXY(i, j)) {\n                fn(this[i][j], i, j, this);\n            }\n        }\n    }\n    forRect(x, y, w, h, fn) {\n        w = Math.min(this.width - x, w);\n        h = Math.min(this.height - y, h);\n        for (let i = x; i < x + w; ++i) {\n            for (let j = y; j < y + h; ++j) {\n                fn(this[i][j], i, j, this);\n            }\n        }\n    }\n    // @ts-ignore\n    map(fn) {\n        return super.map((col, x) => {\n            return col.map((v, y) => fn(v, x, y, this));\n        });\n    }\n    forCircle(x, y, radius, fn) {\n        let i, j;\n        for (i = Math.max(0, x - radius - 1); i < Math.min(this.width, x + radius + 1); i++) {\n            for (j = Math.max(0, y - radius - 1); j < Math.min(this.height, y + radius + 1); j++) {\n                if (this.hasXY(i, j) &&\n                    (i - x) * (i - x) + (j - y) * (j - y) < radius * radius + radius) {\n                    // + radius softens the circle\n                    fn(this[i][j], i, j, this);\n                }\n            }\n        }\n    }\n    hasXY(x, y) {\n        return x >= 0 && y >= 0 && x < this.width && y < this.height;\n    }\n    isBoundaryXY(x, y) {\n        return (this.hasXY(x, y) &&\n            (x == 0 || x == this.width - 1 || y == 0 || y == this.height - 1));\n    }\n    calcBounds() {\n        const bounds = { left: this.width, top: this.height, right: 0, bottom: 0 };\n        this.forEach((v, i, j) => {\n            if (!v)\n                return;\n            if (bounds.left > i)\n                bounds.left = i;\n            if (bounds.right < i)\n                bounds.right = i;\n            if (bounds.top > j)\n                bounds.top = j;\n            if (bounds.bottom < j)\n                bounds.bottom = j;\n        });\n        return bounds;\n    }\n    update(fn) {\n        let i, j;\n        for (i = 0; i < this.width; i++) {\n            for (j = 0; j < this.height; j++) {\n                this[i][j] = fn(this[i][j], i, j, this);\n            }\n        }\n    }\n    updateRect(x, y, width, height, fn) {\n        let i, j;\n        for (i = x; i < x + width; i++) {\n            for (j = y; j < y + height; j++) {\n                if (this.hasXY(i, j)) {\n                    this[i][j] = fn(this[i][j], i, j, this);\n                }\n            }\n        }\n    }\n    updateCircle(x, y, radius, fn) {\n        let i, j;\n        for (i = Math.max(0, x - radius - 1); i < Math.min(this.width, x + radius + 1); i++) {\n            for (j = Math.max(0, y - radius - 1); j < Math.min(this.height, y + radius + 1); j++) {\n                if (this.hasXY(i, j) &&\n                    (i - x) * (i - x) + (j - y) * (j - y) < radius * radius + radius) {\n                    // + radius softens the circle\n                    this[i][j] = fn(this[i][j], i, j, this);\n                }\n            }\n        }\n    }\n    // @ts-ignore\n    fill(v) {\n        const fn = typeof v === \"function\" ? v : () => v;\n        this.update(fn);\n    }\n    fillRect(x, y, w, h, v) {\n        const fn = typeof v === \"function\" ? v : () => v;\n        this.updateRect(x, y, w, h, fn);\n    }\n    fillCircle(x, y, radius, v) {\n        const fn = typeof v === \"function\" ? v : () => v;\n        this.updateCircle(x, y, radius, fn);\n    }\n    replace(findValue, replaceValue) {\n        this.update((v) => (v == findValue ? replaceValue : v));\n    }\n    copy(from) {\n        // TODO - check width, height?\n        this.update((_, i, j) => from[i][j]);\n    }\n    count(match) {\n        const fn = typeof match === \"function\"\n            ? match\n            : (v) => v == match;\n        let count = 0;\n        this.forEach((v, i, j) => {\n            if (fn(v, i, j, this))\n                ++count;\n        });\n        return count;\n    }\n    dump(fmtFn) {\n        this.dumpRect(0, 0, this.width, this.height, fmtFn);\n    }\n    dumpRect(left, top, width, height, fmtFn) {\n        let i, j;\n        fmtFn = fmtFn || _formatGridValue;\n        left = Utils.clamp(left, 0, this.width - 2);\n        top = Utils.clamp(top, 0, this.height - 2);\n        const right = Utils.clamp(left + width, 1, this.width - 1);\n        const bottom = Utils.clamp(top + height, 1, this.height - 1);\n        let output = [];\n        for (j = top; j <= bottom; j++) {\n            let line = (\"\" + j + \"]\").padStart(3, \" \");\n            for (i = left; i <= right; i++) {\n                if (i % 10 == 0) {\n                    line += \" \";\n                }\n                const v = this[i][j];\n                line += fmtFn(v, i, j)[0];\n            }\n            output.push(line);\n        }\n        console.log(output.join(\"\\n\"));\n    }\n    dumpAround(x, y, radius) {\n        this.dumpRect(x - radius, y - radius, 2 * radius, 2 * radius);\n    }\n    closestMatchingLoc(x, y, fn) {\n        let bestLoc = [-1, -1];\n        let bestDistance = this.width + this.height;\n        this.forEach((v, i, j) => {\n            if (fn(v, i, j, this)) {\n                const dist = Utils.distanceBetween(x, y, i, j);\n                if (dist < bestDistance) {\n                    bestLoc[0] = i;\n                    bestLoc[1] = j;\n                    bestDistance = dist;\n                }\n                else if (dist == bestDistance && random.chance(50)) {\n                    bestLoc[0] = i;\n                    bestLoc[1] = j;\n                }\n            }\n        });\n        return bestLoc;\n    }\n    firstMatchingLoc(v) {\n        const fn = typeof v === \"function\" ? v : (val) => val == v;\n        for (let i = 0; i < this.width; ++i) {\n            for (let j = 0; j < this.height; ++j) {\n                if (fn(this[i][j], i, j, this)) {\n                    return [i, j];\n                }\n            }\n        }\n        return [-1, -1];\n    }\n    randomMatchingLoc(v, deterministic = false) {\n        let locationCount = 0;\n        let i, j, index;\n        const fn = typeof v === \"function\" ? v : (val) => val == v;\n        locationCount = 0;\n        this.forEach((v, i, j) => {\n            if (fn(v, i, j, this)) {\n                locationCount++;\n            }\n        });\n        if (locationCount == 0) {\n            return [-1, -1];\n        }\n        else if (deterministic) {\n            index = Math.floor(locationCount / 2);\n        }\n        else {\n            index = random.range(0, locationCount - 1);\n        }\n        for (i = 0; i < this.width && index >= 0; i++) {\n            for (j = 0; j < this.height && index >= 0; j++) {\n                if (fn(this[i][j], i, j, this)) {\n                    if (index == 0) {\n                        return [i, j];\n                    }\n                    index--;\n                }\n            }\n        }\n        return [-1, -1];\n    }\n    matchingLocNear(x, y, v, deterministic = false) {\n        let loc = [-1, -1];\n        let i, j, k, candidateLocs, randIndex;\n        const fn = typeof v === \"function\" ? v : (val) => val == v;\n        candidateLocs = 0;\n        // count up the number of candidate locations\n        for (k = 0; k < Math.max(this.width, this.height) && !candidateLocs; k++) {\n            for (i = x - k; i <= x + k; i++) {\n                for (j = y - k; j <= y + k; j++) {\n                    if (this.hasXY(i, j) &&\n                        (i == x - k || i == x + k || j == y - k || j == y + k) &&\n                        fn(this[i][j], i, j, this)) {\n                        candidateLocs++;\n                    }\n                }\n            }\n        }\n        if (candidateLocs == 0) {\n            return [-1, -1];\n        }\n        // and pick one\n        if (deterministic) {\n            randIndex = 1 + Math.floor(candidateLocs / 2);\n        }\n        else {\n            randIndex = 1 + random.number(candidateLocs);\n        }\n        for (k = 0; k < Math.max(this.width, this.height); k++) {\n            for (i = x - k; i <= x + k; i++) {\n                for (j = y - k; j <= y + k; j++) {\n                    if (this.hasXY(i, j) &&\n                        (i == x - k || i == x + k || j == y - k || j == y + k) &&\n                        fn(this[i][j], i, j, this)) {\n                        if (--randIndex == 0) {\n                            loc[0] = i;\n                            loc[1] = j;\n                            return loc;\n                        }\n                    }\n                }\n            }\n        }\n        // brogueAssert(false);\n        return [-1, -1]; // should never reach this point\n    }\n    // Rotates around the cell, counting up the number of distinct strings of neighbors with the same test result in a single revolution.\n    //\t\tZero means there are no impassable tiles adjacent.\n    //\t\tOne means it is adjacent to a wall.\n    //\t\tTwo means it is in a hallway or something similar.\n    //\t\tThree means it is the center of a T-intersection or something similar.\n    //\t\tFour means it is in the intersection of two hallways.\n    //\t\tFive or more means there is a bug.\n    arcCount(x, y, testFn) {\n        let arcCount, dir, oldX, oldY, newX, newY;\n        // brogueAssert(grid.hasXY(x, y));\n        testFn = testFn || Utils.IDENTITY;\n        arcCount = 0;\n        for (dir = 0; dir < CDIRS.length; dir++) {\n            oldX = x + CDIRS[(dir + 7) % 8][0];\n            oldY = y + CDIRS[(dir + 7) % 8][1];\n            newX = x + CDIRS[dir][0];\n            newY = y + CDIRS[dir][1];\n            // Counts every transition from passable to impassable or vice-versa on the way around the cell:\n            if ((this.hasXY(newX, newY) &&\n                testFn(this[newX][newY], newX, newY, this)) !=\n                (this.hasXY(oldX, oldY) && testFn(this[oldX][oldY], oldX, oldY, this))) {\n                arcCount++;\n            }\n        }\n        return Math.floor(arcCount / 2); // Since we added one when we entered a wall and another when we left.\n    }\n}\nconst GRID_CACHE = [];\n// @ts-ignore\nlet GRID_ACTIVE_COUNT = 0;\n// @ts-ignore\nlet GRID_ALLOC_COUNT = 0;\n// @ts-ignore\nlet GRID_CREATE_COUNT = 0;\n// @ts-ignore\nlet GRID_FREE_COUNT = 0;\nexport class NumGrid extends Grid {\n    static alloc(w, h, v = 0) {\n        ++GRID_ACTIVE_COUNT;\n        ++GRID_ALLOC_COUNT;\n        let grid = GRID_CACHE.pop();\n        if (!grid) {\n            ++GRID_CREATE_COUNT;\n            return new NumGrid(w, h, v);\n        }\n        grid.resize(w, h, v);\n        return grid;\n    }\n    static free(grid) {\n        if (grid) {\n            if (GRID_CACHE.indexOf(grid) >= 0)\n                return;\n            GRID_CACHE.push(grid);\n            ++GRID_FREE_COUNT;\n            --GRID_ACTIVE_COUNT;\n        }\n    }\n    constructor(w, h, v = 0) {\n        super(w, h, v);\n    }\n    findReplaceRange(findValueMin, findValueMax, fillValue) {\n        this.update((v) => {\n            if (v >= findValueMin && v <= findValueMax) {\n                return fillValue;\n            }\n            return v;\n        });\n    }\n    // Flood-fills the grid from (x, y) along cells that are within the eligible range.\n    // Returns the total count of filled cells.\n    floodFillRange(x, y, eligibleValueMin = 0, eligibleValueMax = 0, fillValue = 0) {\n        let dir;\n        let newX, newY, fillCount = 1;\n        if (fillValue >= eligibleValueMin && fillValue <= eligibleValueMax) {\n            throw new Error(\"Invalid grid flood fill\");\n        }\n        this[x][y] = fillValue;\n        for (dir = 0; dir < 4; dir++) {\n            newX = x + DIRS[dir][0];\n            newY = y + DIRS[dir][1];\n            if (this.hasXY(newX, newY) &&\n                this[newX][newY] >= eligibleValueMin &&\n                this[newX][newY] <= eligibleValueMax) {\n                fillCount += this.floodFillRange(newX, newY, eligibleValueMin, eligibleValueMax, fillValue);\n            }\n        }\n        return fillCount;\n    }\n    invert() {\n        this.update((v) => (v ? 0 : 1));\n    }\n    closestLocWithValue(x, y, value = 1) {\n        return this.closestMatchingLoc(x, y, (v) => v == value);\n    }\n    // Takes a grid as a mask of valid locations, chooses one randomly and returns it as (x, y).\n    // If there are no valid locations, returns (-1, -1).\n    randomLocWithValue(validValue = 1) {\n        return this.randomMatchingLoc((v) => v == validValue);\n    }\n    getQualifyingLocNear(x, y, deterministic = false) {\n        return this.matchingLocNear(x, y, (v) => !!v, deterministic);\n    }\n    leastPositiveValue() {\n        let least = Number.MAX_SAFE_INTEGER;\n        this.forEach((v) => {\n            if (v > 0 && v < least) {\n                least = v;\n            }\n        });\n        return least;\n    }\n    randomLeastPositiveLoc(deterministic = false) {\n        const targetValue = this.leastPositiveValue();\n        return this.randomMatchingLoc((v) => v == targetValue, deterministic);\n    }\n    // Marks a cell as being a member of blobNumber, then recursively iterates through the rest of the blob\n    floodFill(x, y, matchValue, fillValue) {\n        let dir;\n        let newX, newY, numberOfCells = 1;\n        const matchFn = typeof matchValue == \"function\"\n            ? matchValue\n            : (v) => v == matchValue;\n        const fillFn = typeof fillValue == \"function\" ? fillValue : () => fillValue;\n        this[x][y] = fillFn(this[x][y], x, y, this);\n        // Iterate through the four cardinal neighbors.\n        for (dir = 0; dir < 4; dir++) {\n            newX = x + DIRS[dir][0];\n            newY = y + DIRS[dir][1];\n            if (!this.hasXY(newX, newY)) {\n                continue;\n            }\n            if (matchFn(this[newX][newY], newX, newY, this)) {\n                // If the neighbor is an unmarked region cell,\n                numberOfCells += this.floodFill(newX, newY, matchFn, fillFn); // then recurse.\n            }\n        }\n        return numberOfCells;\n    }\n    _cellularAutomataRound(birthParameters /* char[9] */, survivalParameters /* char[9] */) {\n        let i, j, nbCount, newX, newY;\n        let dir;\n        let buffer2;\n        buffer2 = NumGrid.alloc(this.width, this.height);\n        buffer2.copy(this); // Make a backup of this in buffer2, so that each generation is isolated.\n        let didSomething = false;\n        for (i = 0; i < this.width; i++) {\n            for (j = 0; j < this.height; j++) {\n                nbCount = 0;\n                for (dir = 0; dir < DIRS.length; dir++) {\n                    newX = i + DIRS[dir][0];\n                    newY = j + DIRS[dir][1];\n                    if (this.hasXY(newX, newY) && buffer2[newX][newY]) {\n                        nbCount++;\n                    }\n                }\n                if (!buffer2[i][j] && birthParameters[nbCount] == \"t\") {\n                    this[i][j] = 1; // birth\n                    didSomething = true;\n                }\n                else if (buffer2[i][j] && survivalParameters[nbCount] == \"t\") {\n                    // survival\n                }\n                else {\n                    this[i][j] = 0; // death\n                    didSomething = true;\n                }\n            }\n        }\n        NumGrid.free(buffer2);\n        return didSomething;\n    }\n    // Loads up **grid with the results of a cellular automata simulation.\n    fillBlob(roundCount, minBlobWidth, minBlobHeight, maxBlobWidth, maxBlobHeight, percentSeeded, birthParameters, survivalParameters) {\n        let i, j, k;\n        let blobNumber, blobSize, topBlobNumber, topBlobSize;\n        let topBlobMinX, topBlobMinY, topBlobMaxX, topBlobMaxY, blobWidth, blobHeight;\n        let foundACellThisLine;\n        if (minBlobWidth >= maxBlobWidth) {\n            minBlobWidth = Math.round(0.75 * maxBlobWidth);\n            maxBlobWidth = Math.round(1.25 * maxBlobWidth);\n        }\n        if (minBlobHeight >= maxBlobHeight) {\n            minBlobHeight = Math.round(0.75 * maxBlobHeight);\n            maxBlobHeight = Math.round(1.25 * maxBlobHeight);\n        }\n        const left = Math.floor((this.width - maxBlobWidth) / 2);\n        const top = Math.floor((this.height - maxBlobHeight) / 2);\n        // Generate blobs until they satisfy the minBlobWidth and minBlobHeight restraints\n        do {\n            // Clear buffer.\n            this.fill(0);\n            // Fill relevant portion with noise based on the percentSeeded argument.\n            for (i = 0; i < maxBlobWidth; i++) {\n                for (j = 0; j < maxBlobHeight; j++) {\n                    this[i + left][j + top] = random.chance(percentSeeded) ? 1 : 0;\n                }\n            }\n            // Some iterations of cellular automata\n            for (k = 0; k < roundCount; k++) {\n                if (!this._cellularAutomataRound(birthParameters, survivalParameters)) {\n                    k = roundCount; // cellularAutomataRound did not make any changes\n                }\n            }\n            // Now to measure the result. These are best-of variables; start them out at worst-case values.\n            topBlobSize = 0;\n            topBlobNumber = 0;\n            topBlobMinX = this.width;\n            topBlobMaxX = 0;\n            topBlobMinY = this.height;\n            topBlobMaxY = 0;\n            // Fill each blob with its own number, starting with 2 (since 1 means floor), and keeping track of the biggest:\n            blobNumber = 2;\n            for (i = 0; i < this.width; i++) {\n                for (j = 0; j < this.height; j++) {\n                    if (this[i][j] == 1) {\n                        // an unmarked blob\n                        // Mark all the cells and returns the total size:\n                        blobSize = this.floodFill(i, j, 1, blobNumber);\n                        if (blobSize > topBlobSize) {\n                            // if this blob is a new record\n                            topBlobSize = blobSize;\n                            topBlobNumber = blobNumber;\n                        }\n                        blobNumber++;\n                    }\n                }\n            }\n            // Figure out the top blob's height and width:\n            // First find the max & min x:\n            for (i = 0; i < this.width; i++) {\n                foundACellThisLine = false;\n                for (j = 0; j < this.height; j++) {\n                    if (this[i][j] == topBlobNumber) {\n                        foundACellThisLine = true;\n                        break;\n                    }\n                }\n                if (foundACellThisLine) {\n                    if (i < topBlobMinX) {\n                        topBlobMinX = i;\n                    }\n                    if (i > topBlobMaxX) {\n                        topBlobMaxX = i;\n                    }\n                }\n            }\n            // Then the max & min y:\n            for (j = 0; j < this.height; j++) {\n                foundACellThisLine = false;\n                for (i = 0; i < this.width; i++) {\n                    if (this[i][j] == topBlobNumber) {\n                        foundACellThisLine = true;\n                        break;\n                    }\n                }\n                if (foundACellThisLine) {\n                    if (j < topBlobMinY) {\n                        topBlobMinY = j;\n                    }\n                    if (j > topBlobMaxY) {\n                        topBlobMaxY = j;\n                    }\n                }\n            }\n            blobWidth = topBlobMaxX - topBlobMinX + 1;\n            blobHeight = topBlobMaxY - topBlobMinY + 1;\n        } while (blobWidth < minBlobWidth ||\n            blobHeight < minBlobHeight ||\n            topBlobNumber == 0);\n        // Replace the winning blob with 1's, and everything else with 0's:\n        for (i = 0; i < this.width; i++) {\n            for (j = 0; j < this.height; j++) {\n                if (this[i][j] == topBlobNumber) {\n                    this[i][j] = 1;\n                }\n                else {\n                    this[i][j] = 0;\n                }\n            }\n        }\n        // Populate the returned variables.\n        return {\n            x: topBlobMinX,\n            y: topBlobMinY,\n            width: blobWidth,\n            height: blobHeight,\n        };\n    }\n}\n// Grid.fillBlob = fillBlob;\nexport const alloc = NumGrid.alloc.bind(NumGrid);\nexport const free = NumGrid.free.bind(NumGrid);\nexport function make(w, h, v) {\n    if (v === undefined)\n        return new NumGrid(w, h, 0);\n    if (typeof v === \"number\")\n        return new NumGrid(w, h, v);\n    return new Grid(w, h, v);\n}\nexport function offsetZip(destGrid, srcGrid, srcToDestX, srcToDestY, value) {\n    const fn = typeof value === \"function\"\n        ? value\n        : (_, s, dx, dy) => (destGrid[dx][dy] = value || s);\n    srcGrid.forEach((c, i, j) => {\n        const destX = i + srcToDestX;\n        const destY = j + srcToDestY;\n        if (!destGrid.hasXY(destX, destY))\n            return;\n        if (!c)\n            return;\n        fn(destGrid[destX][destY], c, destX, destY, i, j, destGrid, srcGrid);\n    });\n}\n// Grid.offsetZip = offsetZip;\n// If the indicated tile is a wall on the room stored in grid, and it could be the site of\n// a door out of that room, then return the outbound direction that the door faces.\n// Otherwise, return def.NO_DIRECTION.\nexport function directionOfDoorSite(grid, x, y, isOpen) {\n    let dir, solutionDir;\n    let newX, newY, oppX, oppY;\n    const fnOpen = typeof isOpen === \"function\"\n        ? isOpen\n        : (v) => v == isOpen;\n    solutionDir = Utils.NO_DIRECTION;\n    for (dir = 0; dir < 4; dir++) {\n        newX = x + DIRS[dir][0];\n        newY = y + DIRS[dir][1];\n        oppX = x - DIRS[dir][0];\n        oppY = y - DIRS[dir][1];\n        if (grid.hasXY(oppX, oppY) &&\n            grid.hasXY(newX, newY) &&\n            fnOpen(grid[oppX][oppY], oppX, oppY, grid)) {\n            // This grid cell would be a valid tile on which to place a door that, facing outward, points dir.\n            if (solutionDir != Utils.NO_DIRECTION) {\n                // Already claimed by another direction; no doors here!\n                return Utils.NO_DIRECTION;\n            }\n            solutionDir = dir;\n        }\n    }\n    return solutionDir;\n}\n// Grid.directionOfDoorSite = directionOfDoorSite;\nexport function intersection(onto, a, b) {\n    b = b || onto;\n    onto.update((_, i, j) => a[i][j] && b[i][j]);\n}\n// Grid.intersection = intersection;\nexport function unite(onto, a, b) {\n    b = b || onto;\n    onto.update((_, i, j) => b[i][j] || a[i][j]);\n}\n//# sourceMappingURL=grid.js.map","import * as utils_1 from \"./utils\";\nexport { utils_1 as utils };\nimport * as range_1 from \"./range\";\nexport { range_1 as range };\nimport * as flag_1 from \"./flag\";\nexport { flag_1 as flag };\nimport * as grid_1 from \"./grid\";\nexport { grid_1 as grid };\nexport { flags } from \"./flag\";\nexport { cosmetic, random, Random } from \"./random\";\nexport var data = {};\n//# sourceMappingURL=gw.js.map"],"names":["DIRS","CLOCK_DIRS","IDENTITY","x","clamp","v","min","max","src","y","distanceBetween","x1","y1","x2","y2","Math","abs","dirBetween","toX","toY","diffX","diffY","absX","absY","sign","setDefaults","obj","def","custom","dest","Object","keys","forEach","key","origKey","defValue","parts","split","length","shift","undefined","ERROR","current","Array","isArray","slice","message","Error","a","b","pct","dx","dy","floor","dir","x0","y0","findIndex","result","push","fn","diff","steps","c","last","step","currentXValue","maxXValue","sin","PI","omit","map","t","trim","includes","updated","copy","clear","nullify","clone","assignField","field","val","search","concat","fields","data","f","args","console","warn","member","_default","arg","some","av","arr","reduce","root","count","next","chain","entry","item","index","name","prev","RANDOM_CONFIG","random","bind","lotteryDrawArray","rand","frequencies","i","maxFreq","randIndex","range","Random","[object Object]","this","_fn","value","Number","MAX_SAFE_INTEGER","number","lo","hi","sides","addend","total","mult","weights","entries","_","weight","lotteryDrawObject","list","values","fromIndex","toIndex","r","buf","arguments","n","shuffle","percent","outOf","clumps","numSides","cosmetic","Range","lower","upper","rng","_rng","clumped","config","JSON","stringify","RE","results","exec","parseInt","base","std","parseFloat","flags","N","flagObj","inverse","out","fl","join","u","startsWith","substring","flagName","flag","Utils.DIRS","CDIRS","Utils.CLOCK_DIRS","_formatGridValue","String","fromCharCode","charCodeAt","Grid","w","h","super","fill","_width","_height","type","constructor","width","height","col","j","only4dirs","maxIndex","d","hasXY","radius","bounds","left","top","right","bottom","update","updateRect","updateCircle","findValue","replaceValue","from","match","fmtFn","dumpRect","Utils.clamp","output","line","padStart","log","bestLoc","bestDistance","dist","Utils.distanceBetween","chance","deterministic","locationCount","k","candidateLocs","loc","testFn","arcCount","oldX","oldY","newX","newY","Utils.IDENTITY","GRID_CACHE","NumGrid","grid","pop","resize","indexOf","findValueMin","findValueMax","fillValue","eligibleValueMin","eligibleValueMax","fillCount","floodFillRange","closestMatchingLoc","validValue","randomMatchingLoc","matchingLocNear","least","targetValue","leastPositiveValue","matchValue","numberOfCells","matchFn","fillFn","floodFill","birthParameters","survivalParameters","nbCount","buffer2","alloc","didSomething","free","roundCount","minBlobWidth","minBlobHeight","maxBlobWidth","maxBlobHeight","percentSeeded","blobNumber","blobSize","topBlobNumber","topBlobSize","topBlobMinX","topBlobMinY","topBlobMaxX","topBlobMaxY","blobWidth","blobHeight","foundACellThisLine","round","_cellularAutomataRound","l","destGrid","srcGrid","srcToDestX","srcToDestY","s","destX","destY","isOpen","solutionDir","oppX","oppY","fnOpen","onto"],"mappings":"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"}