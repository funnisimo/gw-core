export declare type ArrayInit = (i: number) => any;
export declare function makeArray(l: number, fn: ArrayInit): any[];
export declare type GridInit = (x: number, y: number) => any;
export declare type GridEachFunction = (value: any, x: number, y: number, grid: Grid) => any;
export declare type GridMatchFunction = (value: any, x: number, y: number, grid: Grid) => boolean;
export declare class Grid extends Array {
    x?: number;
    y?: number;
    private _width;
    private _height;
    constructor(w: number, h: number, v: GridInit | number);
    get width(): number;
    get height(): number;
    resize(width: number, height: number, value: any): this;
    forEach(fn: GridEachFunction): void;
    eachNeighbor(x: number, y: number, fn: GridEachFunction, only4dirs?: boolean): void;
    forRect(x: number, y: number, w: number, h: number, fn: GridEachFunction): void;
    map(fn: GridEachFunction): any[][];
    forCircle(x: number, y: number, radius: number, fn: GridEachFunction): void;
    hasXY(x: number, y: number): boolean;
    isBoundaryXY(x: number, y: number): boolean;
    calcBounds(): {
        left: number;
        top: number;
        right: number;
        bottom: number;
    };
    update(fn: GridEachFunction): void;
    updateRect(x: number, y: number, width: number, height: number, fn: GridEachFunction): void;
    updateCircle(x: number, y: number, radius: number, fn: GridEachFunction): void;
    fill(v?: number): void;
    fillRect(x: number, y: number, w: number, h: number, v?: number): void;
    fillCircle(x: number, y: number, radius: number, v?: number): void;
    replace(findValue: number, replaceValue: number): void;
    copy(from: Grid): void;
    count(match: GridMatchFunction | number): number;
    dump(fmtFn: (v: any) => string): void;
    closestMatchingXY(x: number, y: number, fn: (v: any, x: number, y: number, grid: Grid) => boolean): number[];
    firstMatchingXY(v: any): number[];
    randomMatchingXY(v: any, deterministic?: boolean): number[];
    matchingXYNear(x: number, y: number, v: any, deterministic?: boolean): number[] | null;
    arcCount(x: number, y: number, testFn: (v: any, x: number, y: number, grid: Grid) => boolean): number;
}
export declare function make(w: number, h: number, v: any): Grid;
export declare function alloc(w: number, h: number, v?: any): Grid;
export declare function free(grid: Grid): void;
export declare function dump(grid: Grid, fmtFn: (v: any) => string): void;
export declare function dumpRect(grid: Grid, left: number, top: number, width: number, height: number, fmtFn?: (v: any, x: number, y: number) => string): void;
export declare function dumpAround(grid: Grid, x: number, y: number, radius: number): void;
export declare function findAndReplace(grid: Grid, findValueMin: number, findValueMax: number, fillValue: number): void;
export declare function floodFillRange(grid: Grid, x: number, y: number, eligibleValueMin?: number, eligibleValueMax?: number, fillValue?: number): number;
export declare function invert(grid: Grid): void;
export declare function intersection(onto: Grid, a: Grid, b: Grid): void;
export declare function unite(onto: Grid, a: Grid, b: Grid): void;
export declare function closestLocationWithValue(grid: Grid, x: number, y: number, value?: number): number[];
export declare function randomLocationWithValue(grid: Grid, validValue: any): number[];
export declare function getQualifyingLocNear(grid: Grid, x: number, y: number, deterministic?: boolean): number[] | null;
export declare function leastPositiveValue(grid: Grid): number;
export declare function randomLeastPositiveLocation(grid: Grid, deterministic?: boolean): number[];
export declare function floodFill(grid: Grid, x: number, y: number, matchValue: any, fillValue: any): number;
export declare function offsetZip(destGrid: Grid, srcGrid: Grid, srcToDestX: number, srcToDestY: number, value: any): void;
export declare function directionOfDoorSite(grid: Grid, x: number, y: number, isOpen?: number): number;
export declare function fillBlob(grid: Grid, roundCount: number, minBlobWidth: number, minBlobHeight: number, maxBlobWidth: number, maxBlobHeight: number, percentSeeded: number, birthParameters: string, survivalParameters: string): {
    x: number;
    y: number;
    width: number;
    height: number;
};
