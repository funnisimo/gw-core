import * as Utils from "./utils";
export interface Event {
    shiftKey: boolean;
    ctrlKey: boolean;
    altKey: boolean;
    metaKey: boolean;
    type: string;
    key: string | null;
    code: string | null;
    x: number;
    y: number;
    clientX: number;
    clientY: number;
    dir: Utils.Loc | null;
    dt: number;
}
export declare type CommandFn = (event: Event) => Promise<boolean>;
export declare var commands: Record<string, CommandFn>;
export declare function addCommand(id: string, fn: CommandFn): void;
export declare type KeyMap = Record<string, CommandFn | boolean>;
export declare type EventMatchFn = (event: Event) => boolean;
export declare const KEYPRESS = "keypress";
export declare const MOUSEMOVE = "mousemove";
export declare const CLICK = "click";
export declare const TICK = "tick";
export declare const MOUSEUP = "mouseup";
declare type EventHandler = (event: Event) => void;
export declare function setKeymap(keymap: KeyMap): void;
export declare function dispatchEvent(ev: Event, km?: KeyMap | CommandFn): Promise<any>;
export declare function makeTickEvent(dt: number): Event;
export declare function makeKeyEvent(e: KeyboardEvent): Event;
export declare function keyCodeDirection(key: string): Utils.Loc | null;
export declare function ignoreKeyEvent(e: KeyboardEvent): boolean;
export declare var mouse: Utils.XY;
export declare function makeMouseEvent(e: MouseEvent, x: number, y: number): Event;
export declare class Loop {
    running: boolean;
    events: Event[];
    protected CURRENT_HANDLER: EventHandler | null;
    protected PAUSED: EventHandler | null;
    protected LAST_CLICK: Utils.XY;
    constructor();
    hasEvents(): number;
    clearEvents(): void;
    pushEvent(ev: Event): void;
    nextEvent(ms?: number, match?: EventMatchFn): Promise<Event | null>;
    run(keymap: KeyMap, ms?: number): Promise<void>;
    stop(): void;
    pauseEvents(): void;
    resumeEvents(): void;
    tickMs(ms?: number): Promise<unknown>;
    nextKeyPress(ms?: number, match?: EventMatchFn): Promise<Event | null>;
    nextKeyOrClick(ms?: number, matchFn?: EventMatchFn): Promise<Event | null>;
    pause(ms: number): Promise<boolean | null>;
    waitForAck(): Promise<boolean | null>;
}
export declare function make(): Loop;
export declare const loop: Loop;
export {};
